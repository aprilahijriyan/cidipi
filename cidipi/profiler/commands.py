# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.profiler.types import *


class disable(BaseModel):
    __domain__: str = PrivateAttr("Profiler")


class enable(BaseModel):
    __domain__: str = PrivateAttr("Profiler")


class getBestEffortCoverage(BaseModel):
    """
        Collect coverage data for the current isolate. The coverage data may be incomplete due to
    garbage collection.
    """

    __domain__: str = PrivateAttr("Profiler")


class setSamplingInterval(BaseModel):
    """
    Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
    """

    __domain__: str = PrivateAttr("Profiler")
    interval: Union[float, int]
    """
    New sampling interval in microseconds.
    """


class start(BaseModel):
    __domain__: str = PrivateAttr("Profiler")


class startPreciseCoverage(BaseModel):
    """
        Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code
    coverage may be incomplete. Enabling prevents running optimized code and resets execution
    counters.
    """

    __domain__: str = PrivateAttr("Profiler")
    callCount: Optional[bool]
    """
    Collect accurate call counts beyond simple 'covered' or 'not covered'.
    """
    detailed: Optional[bool]
    """
    Collect block-based coverage.
    """
    allowTriggeredUpdates: Optional[bool]
    """
    Allow the backend to send updates on its own initiative
    """


class stop(BaseModel):
    __domain__: str = PrivateAttr("Profiler")


class stopPreciseCoverage(BaseModel):
    """
        Disable precise code coverage. Disabling releases unnecessary execution count records and allows
    executing optimized code.
    """

    __domain__: str = PrivateAttr("Profiler")


class takePreciseCoverage(BaseModel):
    """
        Collect coverage data for the current isolate, and resets execution counters. Precise code
    coverage needs to have started.
    """

    __domain__: str = PrivateAttr("Profiler")
