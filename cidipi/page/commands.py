# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi import emulation, network
from cidipi.page.types import *


class addScriptToEvaluateOnLoad(BaseModel):
    """
    Deprecated, please use addScriptToEvaluateOnNewDocument instead.
    """

    __domain__: str = PrivateAttr("Page")
    scriptSource: str


class addScriptToEvaluateOnNewDocument(BaseModel):
    """
    Evaluates given script in every frame upon creation (before loading frame's scripts).
    """

    __domain__: str = PrivateAttr("Page")
    source: str
    worldName: Optional[str]
    """
    If specified, creates an isolated world with the given name and evaluates given script in it.
This world name will be used as the ExecutionContextDescription::name when the corresponding
event is emitted.
    """
    includeCommandLineAPI: Optional[bool]
    """
    Specifies whether command line API should be available to the script, defaults
to false.
    """
    runImmediately: Optional[bool]
    """
    If true, runs the script immediately on existing execution contexts or worlds.
Default: false.
    """


class bringToFront(BaseModel):
    """
    Brings page to front (activates tab).
    """

    __domain__: str = PrivateAttr("Page")


class captureScreenshot(BaseModel):
    """
    Capture page screenshot.
    """

    __domain__: str = PrivateAttr("Page")
    format: Optional[Literal["jpeg", "png", "webp"]]
    """
    Image compression format (defaults to png).
    """
    quality: Optional[Union[float, int]]
    """
    Compression quality from range [0..100] (jpeg only).
    """
    clip: Optional["Viewport"]
    """
    Capture the screenshot of a given region only.
    """
    fromSurface: Optional[bool]
    """
    Capture the screenshot from the surface, rather than the view. Defaults to true.
    """
    captureBeyondViewport: Optional[bool]
    """
    Capture the screenshot beyond the viewport. Defaults to false.
    """
    optimizeForSpeed: Optional[bool]
    """
    Optimize image encoding for speed, not for resulting size (defaults to false)
    """


class captureSnapshot(BaseModel):
    """
        Returns a snapshot of the page as a string. For MHTML format, the serialization includes
    iframes, shadow DOM, external resources, and element-inline styles.
    """

    __domain__: str = PrivateAttr("Page")
    format: Optional[Literal["mhtml"]]
    """
    Format (defaults to mhtml).
    """


class clearDeviceMetricsOverride(BaseModel):
    """
    Clears the overridden device metrics.
    """

    __domain__: str = PrivateAttr("Page")


class clearDeviceOrientationOverride(BaseModel):
    """
    Clears the overridden Device Orientation.
    """

    __domain__: str = PrivateAttr("Page")


class clearGeolocationOverride(BaseModel):
    """
    Clears the overridden Geolocation Position and Error.
    """

    __domain__: str = PrivateAttr("Page")


class createIsolatedWorld(BaseModel):
    """
    Creates an isolated world for the given frame.
    """

    __domain__: str = PrivateAttr("Page")
    frameId: "FrameId"
    """
    Id of the frame in which the isolated world should be created.
    """
    worldName: Optional[str]
    """
    An optional name which is reported in the Execution Context.
    """
    grantUniveralAccess: Optional[bool]
    """
    Whether or not universal access should be granted to the isolated world. This is a powerful
option, use with caution.
    """


class deleteCookie(BaseModel):
    """
    Deletes browser cookie with given name, domain and path.
    """

    __domain__: str = PrivateAttr("Page")
    cookieName: str
    """
    Name of the cookie to remove.
    """
    url: str
    """
    URL to match cooke domain and path.
    """


class disable(BaseModel):
    """
    Disables page domain notifications.
    """

    __domain__: str = PrivateAttr("Page")


class enable(BaseModel):
    """
    Enables page domain notifications.
    """

    __domain__: str = PrivateAttr("Page")


class getAppManifest(BaseModel):
    """
      Gets the processed manifest for this current document.
    This API always waits for the manifest to be loaded.
    If manifestId is provided, and it does not match the manifest of the
      current document, this API errors out.
    If there is not a loaded page, this API errors out immediately.
    """

    __domain__: str = PrivateAttr("Page")
    manifestId: Optional[str]


class getInstallabilityErrors(BaseModel):
    __domain__: str = PrivateAttr("Page")


class getManifestIcons(BaseModel):
    """
    Deprecated because it's not guaranteed that the returned icon is in fact the one used for PWA installation.
    """

    __domain__: str = PrivateAttr("Page")


class getAppId(BaseModel):
    """
        Returns the unique (PWA) app id.
    Only returns values if the feature flag 'WebAppEnableManifestId' is enabled
    """

    __domain__: str = PrivateAttr("Page")


class getAdScriptId(BaseModel):
    __domain__: str = PrivateAttr("Page")
    frameId: "FrameId"


class getFrameTree(BaseModel):
    """
    Returns present frame tree structure.
    """

    __domain__: str = PrivateAttr("Page")


class getLayoutMetrics(BaseModel):
    """
    Returns metrics relating to the layouting of the page, such as viewport bounds/scale.
    """

    __domain__: str = PrivateAttr("Page")


class getNavigationHistory(BaseModel):
    """
    Returns navigation history for the current page.
    """

    __domain__: str = PrivateAttr("Page")


class resetNavigationHistory(BaseModel):
    """
    Resets navigation history for the current page.
    """

    __domain__: str = PrivateAttr("Page")


class getResourceContent(BaseModel):
    """
    Returns content of the given resource.
    """

    __domain__: str = PrivateAttr("Page")
    frameId: "FrameId"
    """
    Frame id to get resource for.
    """
    url: str
    """
    URL of the resource to get content for.
    """


class getResourceTree(BaseModel):
    """
    Returns present frame / resource tree structure.
    """

    __domain__: str = PrivateAttr("Page")


class handleJavaScriptDialog(BaseModel):
    """
    Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).
    """

    __domain__: str = PrivateAttr("Page")
    accept: bool
    """
    Whether to accept or dismiss the dialog.
    """
    promptText: Optional[str]
    """
    The text to enter into the dialog prompt before accepting. Used only if this is a prompt
dialog.
    """


class navigate(BaseModel):
    """
    Navigates current page to the given URL.
    """

    __domain__: str = PrivateAttr("Page")
    url: str
    """
    URL to navigate the page to.
    """
    referrer: Optional[str]
    """
    Referrer URL.
    """
    transitionType: Optional["TransitionType"]
    """
    Intended transition type.
    """
    frameId: Optional["FrameId"]
    """
    Frame id to navigate, if not specified navigates the top frame.
    """
    referrerPolicy: Optional["ReferrerPolicy"]
    """
    Referrer-policy used for the navigation.
    """


class navigateToHistoryEntry(BaseModel):
    """
    Navigates current page to the given history entry.
    """

    __domain__: str = PrivateAttr("Page")
    entryId: Union[float, int]
    """
    Unique id of the entry to navigate to.
    """


class printToPDF(BaseModel):
    """
    Print page as PDF.
    """

    __domain__: str = PrivateAttr("Page")
    landscape: Optional[bool]
    """
    Paper orientation. Defaults to false.
    """
    displayHeaderFooter: Optional[bool]
    """
    Display header and footer. Defaults to false.
    """
    printBackground: Optional[bool]
    """
    Print background graphics. Defaults to false.
    """
    scale: Optional[Union[float, int]]
    """
    Scale of the webpage rendering. Defaults to 1.
    """
    paperWidth: Optional[Union[float, int]]
    """
    Paper width in inches. Defaults to 8.5 inches.
    """
    paperHeight: Optional[Union[float, int]]
    """
    Paper height in inches. Defaults to 11 inches.
    """
    marginTop: Optional[Union[float, int]]
    """
    Top margin in inches. Defaults to 1cm (~0.4 inches).
    """
    marginBottom: Optional[Union[float, int]]
    """
    Bottom margin in inches. Defaults to 1cm (~0.4 inches).
    """
    marginLeft: Optional[Union[float, int]]
    """
    Left margin in inches. Defaults to 1cm (~0.4 inches).
    """
    marginRight: Optional[Union[float, int]]
    """
    Right margin in inches. Defaults to 1cm (~0.4 inches).
    """
    pageRanges: Optional[str]
    """
    Paper ranges to print, one based, e.g., '1-5, 8, 11-13'. Pages are
printed in the document order, not in the order specified, and no
more than once.
Defaults to empty string, which implies the entire document is printed.
The page numbers are quietly capped to actual page count of the
document, and ranges beyond the end of the document are ignored.
If this results in no pages to print, an error is reported.
It is an error to specify a range with start greater than end.
    """
    headerTemplate: Optional[str]
    """
    HTML template for the print header. Should be valid HTML markup with following
classes used to inject printing values into them:
- `date`: formatted print date
- `title`: document title
- `url`: document location
- `pageNumber`: current page number
- `totalPages`: total pages in the document

For example, `<span class=title></span>` would generate span containing the title.
    """
    footerTemplate: Optional[str]
    """
    HTML template for the print footer. Should use the same format as the `headerTemplate`.
    """
    preferCSSPageSize: Optional[bool]
    """
    Whether or not to prefer page size as defined by css. Defaults to false,
in which case the content will be scaled to fit the paper size.
    """
    transferMode: Optional[Literal["ReturnAsBase64", "ReturnAsStream"]]
    """
    return as stream
    """
    generateTaggedPDF: Optional[bool]
    """
    Whether or not to generate tagged (accessible) PDF. Defaults to embedder choice.
    """
    generateDocumentOutline: Optional[bool]
    """
    Whether or not to embed the document outline into the PDF.
    """


class reload(BaseModel):
    """
    Reloads given page optionally ignoring the cache.
    """

    __domain__: str = PrivateAttr("Page")
    ignoreCache: Optional[bool]
    """
    If true, browser cache is ignored (as if the user pressed Shift+refresh).
    """
    scriptToEvaluateOnLoad: Optional[str]
    """
    If set, the script will be injected into all frames of the inspected page after reload.
Argument will be ignored if reloading dataURL origin.
    """
    loaderId: Optional[network.LoaderId]
    """
    If set, an error will be thrown if the target page's main frame's
loader id does not match the provided id. This prevents accidentally
reloading an unintended target in case there's a racing navigation.
    """


class removeScriptToEvaluateOnLoad(BaseModel):
    """
    Deprecated, please use removeScriptToEvaluateOnNewDocument instead.
    """

    __domain__: str = PrivateAttr("Page")
    identifier: "ScriptIdentifier"


class removeScriptToEvaluateOnNewDocument(BaseModel):
    """
    Removes given script from the list.
    """

    __domain__: str = PrivateAttr("Page")
    identifier: "ScriptIdentifier"


class screencastFrameAck(BaseModel):
    """
    Acknowledges that a screencast frame has been received by the frontend.
    """

    __domain__: str = PrivateAttr("Page")
    sessionId: Union[float, int]
    """
    Frame number.
    """


class searchInResource(BaseModel):
    """
    Searches for given string in resource content.
    """

    __domain__: str = PrivateAttr("Page")
    frameId: "FrameId"
    """
    Frame id for resource to search in.
    """
    url: str
    """
    URL of the resource to search in.
    """
    query: str
    """
    String to search for.
    """
    caseSensitive: Optional[bool]
    """
    If true, search is case sensitive.
    """
    isRegex: Optional[bool]
    """
    If true, treats string parameter as regex.
    """


class setAdBlockingEnabled(BaseModel):
    """
    Enable Chrome's experimental ad filter on all sites.
    """

    __domain__: str = PrivateAttr("Page")
    enabled: bool
    """
    Whether to block ads.
    """


class setBypassCSP(BaseModel):
    """
    Enable page Content Security Policy by-passing.
    """

    __domain__: str = PrivateAttr("Page")
    enabled: bool
    """
    Whether to bypass page CSP.
    """


class getPermissionsPolicyState(BaseModel):
    """
    Get Permissions Policy state on given frame.
    """

    __domain__: str = PrivateAttr("Page")
    frameId: "FrameId"


class getOriginTrials(BaseModel):
    """
    Get Origin Trials on given frame.
    """

    __domain__: str = PrivateAttr("Page")
    frameId: "FrameId"


class setDeviceMetricsOverride(BaseModel):
    """
        Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).
    """

    __domain__: str = PrivateAttr("Page")
    width: Union[float, int]
    """
    Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    """
    height: Union[float, int]
    """
    Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    """
    deviceScaleFactor: Union[float, int]
    """
    Overriding device scale factor value. 0 disables the override.
    """
    mobile: bool
    """
    Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text
autosizing and more.
    """
    scale: Optional[Union[float, int]]
    """
    Scale to apply to resulting view image.
    """
    screenWidth: Optional[Union[float, int]]
    """
    Overriding screen width value in pixels (minimum 0, maximum 10000000).
    """
    screenHeight: Optional[Union[float, int]]
    """
    Overriding screen height value in pixels (minimum 0, maximum 10000000).
    """
    positionX: Optional[Union[float, int]]
    """
    Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    """
    positionY: Optional[Union[float, int]]
    """
    Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    """
    dontSetVisibleSize: Optional[bool]
    """
    Do not set visible view size, rely upon explicit setVisibleSize call.
    """
    screenOrientation: Optional[emulation.ScreenOrientation]
    """
    Screen orientation override.
    """
    viewport: Optional["Viewport"]
    """
    The viewport dimensions and scale. If not set, the override is cleared.
    """


class setDeviceOrientationOverride(BaseModel):
    """
    Overrides the Device Orientation.
    """

    __domain__: str = PrivateAttr("Page")
    alpha: Union[float, int]
    """
    Mock alpha
    """
    beta: Union[float, int]
    """
    Mock beta
    """
    gamma: Union[float, int]
    """
    Mock gamma
    """


class setFontFamilies(BaseModel):
    """
    Set generic font families.
    """

    __domain__: str = PrivateAttr("Page")
    fontFamilies: "FontFamilies"
    """
    Specifies font families to set. If a font family is not specified, it won't be changed.
    """
    forScripts: Optional[list]
    """
    Specifies font families to set for individual scripts.
    """


class setFontSizes(BaseModel):
    """
    Set default font sizes.
    """

    __domain__: str = PrivateAttr("Page")
    fontSizes: "FontSizes"
    """
    Specifies font sizes to set. If a font size is not specified, it won't be changed.
    """


class setDocumentContent(BaseModel):
    """
    Sets given markup as the document's HTML.
    """

    __domain__: str = PrivateAttr("Page")
    frameId: "FrameId"
    """
    Frame id to set HTML for.
    """
    html: str
    """
    HTML content to set.
    """


class setDownloadBehavior(BaseModel):
    """
    Set the behavior when downloading a file.
    """

    __domain__: str = PrivateAttr("Page")
    behavior: Literal["deny", "allow", "default"]
    """
    Whether to allow all or deny all download requests, or use default Chrome behavior if
available (otherwise deny).
    """
    downloadPath: Optional[str]
    """
    The default path to save downloaded files to. This is required if behavior is set to 'allow'
    """


class setGeolocationOverride(BaseModel):
    """
        Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.
    """

    __domain__: str = PrivateAttr("Page")
    latitude: Optional[Union[float, int]]
    """
    Mock latitude
    """
    longitude: Optional[Union[float, int]]
    """
    Mock longitude
    """
    accuracy: Optional[Union[float, int]]
    """
    Mock accuracy
    """


class setLifecycleEventsEnabled(BaseModel):
    """
    Controls whether page will emit lifecycle events.
    """

    __domain__: str = PrivateAttr("Page")
    enabled: bool
    """
    If true, starts emitting lifecycle events.
    """


class setTouchEmulationEnabled(BaseModel):
    """
    Toggles mouse event-based touch event emulation.
    """

    __domain__: str = PrivateAttr("Page")
    enabled: bool
    """
    Whether the touch event emulation should be enabled.
    """
    configuration: Optional[Literal["mobile", "desktop"]]
    """
    Touch/gesture events configuration. Default: current platform.
    """


class startScreencast(BaseModel):
    """
    Starts sending each frame using the `screencastFrame` event.
    """

    __domain__: str = PrivateAttr("Page")
    format: Optional[Literal["jpeg", "png"]]
    """
    Image compression format.
    """
    quality: Optional[Union[float, int]]
    """
    Compression quality from range [0..100].
    """
    maxWidth: Optional[Union[float, int]]
    """
    Maximum screenshot width.
    """
    maxHeight: Optional[Union[float, int]]
    """
    Maximum screenshot height.
    """
    everyNthFrame: Optional[Union[float, int]]
    """
    Send every n-th frame.
    """


class stopLoading(BaseModel):
    """
    Force the page stop all navigations and pending resource fetches.
    """

    __domain__: str = PrivateAttr("Page")


class crash(BaseModel):
    """
    Crashes renderer on the IO thread, generates minidumps.
    """

    __domain__: str = PrivateAttr("Page")


class close(BaseModel):
    """
    Tries to close page, running its beforeunload hooks, if any.
    """

    __domain__: str = PrivateAttr("Page")


class setWebLifecycleState(BaseModel):
    """
        Tries to update the web lifecycle state of the page.
    It will transition the page to the given state according to:
    https://github.com/WICG/web-lifecycle/
    """

    __domain__: str = PrivateAttr("Page")
    state: Literal["frozen", "active"]
    """
    Target lifecycle state
    """


class stopScreencast(BaseModel):
    """
    Stops sending each frame in the `screencastFrame`.
    """

    __domain__: str = PrivateAttr("Page")


class produceCompilationCache(BaseModel):
    """
        Requests backend to produce compilation cache for the specified scripts.
    `scripts` are appended to the list of scripts for which the cache
    would be produced. The list may be reset during page navigation.
    When script with a matching URL is encountered, the cache is optionally
    produced upon backend discretion, based on internal heuristics.
    See also: `Page.compilationCacheProduced`.
    """

    __domain__: str = PrivateAttr("Page")
    scripts: list


class addCompilationCache(BaseModel):
    """
        Seeds compilation cache for given url. Compilation cache does not survive
    cross-process navigation.
    """

    __domain__: str = PrivateAttr("Page")
    url: str
    data: str
    """
    Base64-encoded data (Encoded as a base64 string when passed over JSON)
    """


class clearCompilationCache(BaseModel):
    """
    Clears seeded compilation cache.
    """

    __domain__: str = PrivateAttr("Page")


class setSPCTransactionMode(BaseModel):
    """
        Sets the Secure Payment Confirmation transaction mode.
    https://w3c.github.io/secure-payment-confirmation/#sctn-automation-set-spc-transaction-mode
    """

    __domain__: str = PrivateAttr("Page")
    mode: "AutoResponseMode"


class setRPHRegistrationMode(BaseModel):
    """
        Extensions for Custom Handlers API:
    https://html.spec.whatwg.org/multipage/system-state.html#rph-automation
    """

    __domain__: str = PrivateAttr("Page")
    mode: "AutoResponseMode"


class generateTestReport(BaseModel):
    """
    Generates a report for testing.
    """

    __domain__: str = PrivateAttr("Page")
    message: str
    """
    Message to be displayed in the report.
    """
    group: Optional[str]
    """
    Specifies the endpoint group to deliver the report to.
    """


class waitForDebugger(BaseModel):
    """
    Pauses page execution. Can be resumed using generic Runtime.runIfWaitingForDebugger.
    """

    __domain__: str = PrivateAttr("Page")


class setInterceptFileChooserDialog(BaseModel):
    """
        Intercept file chooser requests and transfer control to protocol clients.
    When file chooser interception is enabled, native file chooser dialog is not shown.
    Instead, a protocol event `Page.fileChooserOpened` is emitted.
    """

    __domain__: str = PrivateAttr("Page")
    enabled: bool


class setPrerenderingAllowed(BaseModel):
    """
        Enable/disable prerendering manually.

    This command is a short-term solution for https://crbug.com/1440085.
    See https://docs.google.com/document/d/12HVmFxYj5Jc-eJr5OmWsa2bqTJsbgGLKI6ZIyx0_wpA
    for more details.

    TODO(https://crbug.com/1440085): Remove this once Puppeteer supports tab targets.
    """

    __domain__: str = PrivateAttr("Page")
    isAllowed: bool
