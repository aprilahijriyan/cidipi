# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Optional, TypeVar, Union

from pydantic import BaseModel

from cidipi import network, runtime

FrameId = TypeVar("FrameId", bound=str)
"""
Unique frame identifier.
"""


class AdFrameType(str, Enum):
    """
    Indicates whether a frame has been identified as an ad.
    """

    none = "none"
    child = "child"
    root = "root"


class AdFrameExplanation(str, Enum):
    ParentIsAd = "ParentIsAd"
    CreatedByAdScript = "CreatedByAdScript"
    MatchedBlockingRule = "MatchedBlockingRule"


class AdFrameStatus(BaseModel):
    """
    Indicates whether a frame has been identified as an ad and why.
    """

    adFrameType: "AdFrameType"
    explanations: Optional[list]


class AdScriptId(BaseModel):
    """
        Identifies the bottom-most script which caused the frame to be labelled
    as an ad.
    """

    scriptId: runtime.ScriptId
    """
    Script Id of the bottom-most script which caused the frame to be labelled
as an ad.
    """
    debuggerId: runtime.UniqueDebuggerId
    """
    Id of adScriptId's debugger.
    """


class SecureContextType(str, Enum):
    """
    Indicates whether the frame is a secure context and why it is the case.
    """

    Secure = "Secure"
    SecureLocalhost = "SecureLocalhost"
    InsecureScheme = "InsecureScheme"
    InsecureAncestor = "InsecureAncestor"


class CrossOriginIsolatedContextType(str, Enum):
    """
    Indicates whether the frame is cross-origin isolated and why it is the case.
    """

    Isolated = "Isolated"
    NotIsolated = "NotIsolated"
    NotIsolatedFeatureDisabled = "NotIsolatedFeatureDisabled"


class GatedAPIFeatures(str, Enum):
    SharedArrayBuffers = "SharedArrayBuffers"
    SharedArrayBuffersTransferAllowed = "SharedArrayBuffersTransferAllowed"
    PerformanceMeasureMemory = "PerformanceMeasureMemory"
    PerformanceProfile = "PerformanceProfile"


class PermissionsPolicyFeature(str, Enum):
    """
        All Permissions Policy features. This enum should match the one defined
    in third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5.
    """

    accelerometer = "accelerometer"
    ambient_light_sensor = "ambient-light-sensor"
    attribution_reporting = "attribution-reporting"
    autoplay = "autoplay"
    bluetooth = "bluetooth"
    browsing_topics = "browsing-topics"
    camera = "camera"
    captured_surface_control = "captured-surface-control"
    ch_dpr = "ch-dpr"
    ch_device_memory = "ch-device-memory"
    ch_downlink = "ch-downlink"
    ch_ect = "ch-ect"
    ch_prefers_color_scheme = "ch-prefers-color-scheme"
    ch_prefers_reduced_motion = "ch-prefers-reduced-motion"
    ch_prefers_reduced_transparency = "ch-prefers-reduced-transparency"
    ch_rtt = "ch-rtt"
    ch_save_data = "ch-save-data"
    ch_ua = "ch-ua"
    ch_ua_arch = "ch-ua-arch"
    ch_ua_bitness = "ch-ua-bitness"
    ch_ua_platform = "ch-ua-platform"
    ch_ua_model = "ch-ua-model"
    ch_ua_mobile = "ch-ua-mobile"
    ch_ua_form_factors = "ch-ua-form-factors"
    ch_ua_full_version = "ch-ua-full-version"
    ch_ua_full_version_list = "ch-ua-full-version-list"
    ch_ua_platform_version = "ch-ua-platform-version"
    ch_ua_wow64 = "ch-ua-wow64"
    ch_viewport_height = "ch-viewport-height"
    ch_viewport_width = "ch-viewport-width"
    ch_width = "ch-width"
    clipboard_read = "clipboard-read"
    clipboard_write = "clipboard-write"
    compute_pressure = "compute-pressure"
    cross_origin_isolated = "cross-origin-isolated"
    deferred_fetch = "deferred-fetch"
    direct_sockets = "direct-sockets"
    display_capture = "display-capture"
    document_domain = "document-domain"
    encrypted_media = "encrypted-media"
    execution_while_out_of_viewport = "execution-while-out-of-viewport"
    execution_while_not_rendered = "execution-while-not-rendered"
    focus_without_user_activation = "focus-without-user-activation"
    fullscreen = "fullscreen"
    frobulate = "frobulate"
    gamepad = "gamepad"
    geolocation = "geolocation"
    gyroscope = "gyroscope"
    hid = "hid"
    identity_credentials_get = "identity-credentials-get"
    idle_detection = "idle-detection"
    interest_cohort = "interest-cohort"
    join_ad_interest_group = "join-ad-interest-group"
    keyboard_map = "keyboard-map"
    local_fonts = "local-fonts"
    magnetometer = "magnetometer"
    microphone = "microphone"
    midi = "midi"
    otp_credentials = "otp-credentials"
    payment = "payment"
    picture_in_picture = "picture-in-picture"
    private_aggregation = "private-aggregation"
    private_state_token_issuance = "private-state-token-issuance"
    private_state_token_redemption = "private-state-token-redemption"
    publickey_credentials_create = "publickey-credentials-create"
    publickey_credentials_get = "publickey-credentials-get"
    run_ad_auction = "run-ad-auction"
    screen_wake_lock = "screen-wake-lock"
    serial = "serial"
    shared_autofill = "shared-autofill"
    shared_storage = "shared-storage"
    shared_storage_select_url = "shared-storage-select-url"
    smart_card = "smart-card"
    speaker_selection = "speaker-selection"
    storage_access = "storage-access"
    sub_apps = "sub-apps"
    sync_xhr = "sync-xhr"
    unload = "unload"
    usb = "usb"
    usb_unrestricted = "usb-unrestricted"
    vertical_scroll = "vertical-scroll"
    web_printing = "web-printing"
    web_share = "web-share"
    window_management = "window-management"
    xr_spatial_tracking = "xr-spatial-tracking"


class PermissionsPolicyBlockReason(str, Enum):
    """
    Reason for a permissions policy feature to be disabled.
    """

    Header = "Header"
    IframeAttribute = "IframeAttribute"
    InFencedFrameTree = "InFencedFrameTree"
    InIsolatedApp = "InIsolatedApp"


class PermissionsPolicyBlockLocator(BaseModel):
    frameId: "FrameId"
    blockReason: "PermissionsPolicyBlockReason"


class PermissionsPolicyFeatureState(BaseModel):
    feature: "PermissionsPolicyFeature"
    allowed: bool
    locator: Optional["PermissionsPolicyBlockLocator"]


class OriginTrialTokenStatus(str, Enum):
    """
        Origin Trial(https://www.chromium.org/blink/origin-trials) support.
    Status for an Origin Trial token.
    """

    Success = "Success"
    NotSupported = "NotSupported"
    Insecure = "Insecure"
    Expired = "Expired"
    WrongOrigin = "WrongOrigin"
    InvalidSignature = "InvalidSignature"
    Malformed = "Malformed"
    WrongVersion = "WrongVersion"
    FeatureDisabled = "FeatureDisabled"
    TokenDisabled = "TokenDisabled"
    FeatureDisabledForUser = "FeatureDisabledForUser"
    UnknownTrial = "UnknownTrial"


class OriginTrialStatus(str, Enum):
    """
    Status for an Origin Trial.
    """

    Enabled = "Enabled"
    ValidTokenNotProvided = "ValidTokenNotProvided"
    OSNotSupported = "OSNotSupported"
    TrialNotAllowed = "TrialNotAllowed"


class OriginTrialUsageRestriction(str, Enum):
    NONE = "None"
    Subset = "Subset"


class OriginTrialToken(BaseModel):
    origin: str
    matchSubDomains: bool
    trialName: str
    expiryTime: network.TimeSinceEpoch
    isThirdParty: bool
    usageRestriction: "OriginTrialUsageRestriction"


class OriginTrialTokenWithStatus(BaseModel):
    rawTokenText: str
    parsedToken: Optional["OriginTrialToken"]
    """
    `parsedToken` is present only when the token is extractable and
parsable.
    """
    status: "OriginTrialTokenStatus"


class OriginTrial(BaseModel):
    trialName: str
    status: "OriginTrialStatus"
    tokensWithStatus: list


class Frame(BaseModel):
    """
    Information about the Frame on the page.
    """

    id: "FrameId"
    """
    Frame unique identifier.
    """
    parentId: Optional["FrameId"]
    """
    Parent frame identifier.
    """
    loaderId: network.LoaderId
    """
    Identifier of the loader associated with this frame.
    """
    name: Optional[str]
    """
    Frame's name as specified in the tag.
    """
    url: str
    """
    Frame document's URL without fragment.
    """
    urlFragment: Optional[str]
    """
    Frame document's URL fragment including the '#'.
    """
    domainAndRegistry: str
    """
    Frame document's registered domain, taking the public suffixes list into account.
Extracted from the Frame's url.
Example URLs: http://www.google.com/file.html -> "google.com"
              http://a.b.co.uk/file.html      -> "b.co.uk"
    """
    securityOrigin: str
    """
    Frame document's security origin.
    """
    mimeType: str
    """
    Frame document's mimeType as determined by the browser.
    """
    unreachableUrl: Optional[str]
    """
    If the frame failed to load, this contains the URL that could not be loaded. Note that unlike url above, this URL may contain a fragment.
    """
    adFrameStatus: Optional["AdFrameStatus"]
    """
    Indicates whether this frame was tagged as an ad and why.
    """
    secureContextType: "SecureContextType"
    """
    Indicates whether the main document is a secure context and explains why that is the case.
    """
    crossOriginIsolatedContextType: "CrossOriginIsolatedContextType"
    """
    Indicates whether this is a cross origin isolated context.
    """
    gatedAPIFeatures: list
    """
    Indicated which gated APIs / features are available.
    """


class FrameResource(BaseModel):
    """
    Information about the Resource on the page.
    """

    url: str
    """
    Resource URL.
    """
    type: network.ResourceType
    """
    Type of this resource.
    """
    mimeType: str
    """
    Resource mimeType as determined by the browser.
    """
    lastModified: Optional[network.TimeSinceEpoch]
    """
    last-modified timestamp as reported by server.
    """
    contentSize: Optional[Union[float, int]]
    """
    Resource content size.
    """
    failed: Optional[bool]
    """
    True if the resource failed to load.
    """
    canceled: Optional[bool]
    """
    True if the resource was canceled during loading.
    """


class FrameResourceTree(BaseModel):
    """
    Information about the Frame hierarchy along with their cached resources.
    """

    frame: "Frame"
    """
    Frame information for this tree item.
    """
    childFrames: Optional[list]
    """
    Child frames.
    """
    resources: list
    """
    Information about frame resources.
    """


class FrameTree(BaseModel):
    """
    Information about the Frame hierarchy.
    """

    frame: "Frame"
    """
    Frame information for this tree item.
    """
    childFrames: Optional[list]
    """
    Child frames.
    """


ScriptIdentifier = TypeVar("ScriptIdentifier", bound=str)
"""
Unique script identifier.
"""


class TransitionType(str, Enum):
    """
    Transition type.
    """

    link = "link"
    typed = "typed"
    address_bar = "address_bar"
    auto_bookmark = "auto_bookmark"
    auto_subframe = "auto_subframe"
    manual_subframe = "manual_subframe"
    generated = "generated"
    auto_toplevel = "auto_toplevel"
    form_submit = "form_submit"
    reload = "reload"
    keyword = "keyword"
    keyword_generated = "keyword_generated"
    other = "other"


class NavigationEntry(BaseModel):
    """
    Navigation history entry.
    """

    id: Union[float, int]
    """
    Unique id of the navigation history entry.
    """
    url: str
    """
    URL of the navigation history entry.
    """
    userTypedURL: str
    """
    URL that the user typed in the url bar.
    """
    title: str
    """
    Title of the navigation history entry.
    """
    transitionType: "TransitionType"
    """
    Transition type.
    """


class ScreencastFrameMetadata(BaseModel):
    """
    Screencast frame metadata.
    """

    offsetTop: Union[float, int]
    """
    Top offset in DIP.
    """
    pageScaleFactor: Union[float, int]
    """
    Page scale factor.
    """
    deviceWidth: Union[float, int]
    """
    Device screen width in DIP.
    """
    deviceHeight: Union[float, int]
    """
    Device screen height in DIP.
    """
    scrollOffsetX: Union[float, int]
    """
    Position of horizontal scroll in CSS pixels.
    """
    scrollOffsetY: Union[float, int]
    """
    Position of vertical scroll in CSS pixels.
    """
    timestamp: Optional[network.TimeSinceEpoch]
    """
    Frame swap timestamp.
    """


class DialogType(str, Enum):
    """
    Javascript dialog type.
    """

    alert = "alert"
    confirm = "confirm"
    prompt = "prompt"
    beforeunload = "beforeunload"


class AppManifestError(BaseModel):
    """
    Error while paring app manifest.
    """

    message: str
    """
    Error message.
    """
    critical: Union[float, int]
    """
    If critical, this is a non-recoverable parse error.
    """
    line: Union[float, int]
    """
    Error line.
    """
    column: Union[float, int]
    """
    Error column.
    """


class AppManifestParsedProperties(BaseModel):
    """
    Parsed app manifest properties.
    """

    scope: str
    """
    Computed scope value
    """


class LayoutViewport(BaseModel):
    """
    Layout viewport position and dimensions.
    """

    pageX: Union[float, int]
    """
    Horizontal offset relative to the document (CSS pixels).
    """
    pageY: Union[float, int]
    """
    Vertical offset relative to the document (CSS pixels).
    """
    clientWidth: Union[float, int]
    """
    Width (CSS pixels), excludes scrollbar if present.
    """
    clientHeight: Union[float, int]
    """
    Height (CSS pixels), excludes scrollbar if present.
    """


class VisualViewport(BaseModel):
    """
    Visual viewport position, dimensions, and scale.
    """

    offsetX: Union[float, int]
    """
    Horizontal offset relative to the layout viewport (CSS pixels).
    """
    offsetY: Union[float, int]
    """
    Vertical offset relative to the layout viewport (CSS pixels).
    """
    pageX: Union[float, int]
    """
    Horizontal offset relative to the document (CSS pixels).
    """
    pageY: Union[float, int]
    """
    Vertical offset relative to the document (CSS pixels).
    """
    clientWidth: Union[float, int]
    """
    Width (CSS pixels), excludes scrollbar if present.
    """
    clientHeight: Union[float, int]
    """
    Height (CSS pixels), excludes scrollbar if present.
    """
    scale: Union[float, int]
    """
    Scale relative to the ideal viewport (size at width=device-width).
    """
    zoom: Optional[Union[float, int]]
    """
    Page zoom factor (CSS to device independent pixels ratio).
    """


class Viewport(BaseModel):
    """
    Viewport for capturing screenshot.
    """

    x: Union[float, int]
    """
    X offset in device independent pixels (dip).
    """
    y: Union[float, int]
    """
    Y offset in device independent pixels (dip).
    """
    width: Union[float, int]
    """
    Rectangle width in device independent pixels (dip).
    """
    height: Union[float, int]
    """
    Rectangle height in device independent pixels (dip).
    """
    scale: Union[float, int]
    """
    Page scale factor.
    """


class FontFamilies(BaseModel):
    """
    Generic font families collection.
    """

    standard: Optional[str]
    """
    The standard font-family.
    """
    fixed: Optional[str]
    """
    The fixed font-family.
    """
    serif: Optional[str]
    """
    The serif font-family.
    """
    sansSerif: Optional[str]
    """
    The sansSerif font-family.
    """
    cursive: Optional[str]
    """
    The cursive font-family.
    """
    fantasy: Optional[str]
    """
    The fantasy font-family.
    """
    math: Optional[str]
    """
    The math font-family.
    """


class ScriptFontFamilies(BaseModel):
    """
    Font families collection for a script.
    """

    script: str
    """
    Name of the script which these font families are defined for.
    """
    fontFamilies: "FontFamilies"
    """
    Generic font families collection for the script.
    """


class FontSizes(BaseModel):
    """
    Default font sizes.
    """

    standard: Optional[Union[float, int]]
    """
    Default standard font size.
    """
    fixed: Optional[Union[float, int]]
    """
    Default fixed font size.
    """


class ClientNavigationReason(str, Enum):
    formSubmissionGet = "formSubmissionGet"
    formSubmissionPost = "formSubmissionPost"
    httpHeaderRefresh = "httpHeaderRefresh"
    scriptInitiated = "scriptInitiated"
    metaTagRefresh = "metaTagRefresh"
    pageBlockInterstitial = "pageBlockInterstitial"
    reload = "reload"
    anchorClick = "anchorClick"


class ClientNavigationDisposition(str, Enum):
    currentTab = "currentTab"
    newTab = "newTab"
    newWindow = "newWindow"
    download = "download"


class InstallabilityErrorArgument(BaseModel):
    name: str
    """
    Argument name (e.g. name:'minimum-icon-size-in-pixels').
    """
    value: str
    """
    Argument value (e.g. value:'64').
    """


class InstallabilityError(BaseModel):
    """
    The installability error
    """

    errorId: str
    """
    The error id (e.g. 'manifest-missing-suitable-icon').
    """
    errorArguments: list
    """
    The list of error arguments (e.g. {name:'minimum-icon-size-in-pixels', value:'64'}).
    """


class ReferrerPolicy(str, Enum):
    """
    The referring-policy used for the navigation.
    """

    noReferrer = "noReferrer"
    noReferrerWhenDowngrade = "noReferrerWhenDowngrade"
    origin = "origin"
    originWhenCrossOrigin = "originWhenCrossOrigin"
    sameOrigin = "sameOrigin"
    strictOrigin = "strictOrigin"
    strictOriginWhenCrossOrigin = "strictOriginWhenCrossOrigin"
    unsafeUrl = "unsafeUrl"


class CompilationCacheParams(BaseModel):
    """
    Per-script compilation cache parameters for `Page.produceCompilationCache`
    """

    url: str
    """
    The URL of the script to produce a compilation cache entry for.
    """
    eager: Optional[bool]
    """
    A hint to the backend whether eager compilation is recommended.
(the actual compilation mode used is upon backend discretion).
    """


class FileFilter(BaseModel):
    name: Optional[str]
    accepts: Optional[list]


class FileHandler(BaseModel):
    action: str
    name: str
    icons: Optional[list]
    accepts: Optional[list]
    """
    Mimic a map, name is the key, accepts is the value.
    """
    launchType: str
    """
    Won't repeat the enums, using string for easy comparison. Same as the
other enums below.
    """


class ImageResource(BaseModel):
    """
    The image definition used in both icon and screenshot.
    """

    url: str
    """
    The src field in the definition, but changing to url in favor of
consistency.
    """
    sizes: Optional[str]
    type: Optional[str]


class LaunchHandler(BaseModel):
    clientMode: str


class ProtocolHandler(BaseModel):
    protocol: str
    url: str


class RelatedApplication(BaseModel):
    id: Optional[str]
    url: str


class ScopeExtension(BaseModel):
    origin: str
    """
    Instead of using tuple, this field always returns the serialized string
for easy understanding and comparison.
    """
    hasOriginWildcard: bool


class Screenshot(BaseModel):
    image: "ImageResource"
    formFactor: str
    label: Optional[str]


class ShareTarget(BaseModel):
    action: str
    method: str
    enctype: str
    title: Optional[str]
    """
    Embed the ShareTargetParams
    """
    text: Optional[str]
    url: Optional[str]
    files: Optional[list]


class Shortcut(BaseModel):
    name: str
    url: str


class WebAppManifest(BaseModel):
    backgroundColor: Optional[str]
    description: Optional[str]
    """
    The extra description provided by the manifest.
    """
    dir: Optional[str]
    display: Optional[str]
    displayOverrides: Optional[list]
    """
    The overrided display mode controlled by the user.
    """
    fileHandlers: Optional[list]
    """
    The handlers to open files.
    """
    icons: Optional[list]
    id: Optional[str]
    lang: Optional[str]
    launchHandler: Optional["LaunchHandler"]
    """
    TODO(crbug.com/1231886): This field is non-standard and part of a Chrome
experiment. See:
https://github.com/WICG/web-app-launch/blob/main/launch_handler.md
    """
    name: Optional[str]
    orientation: Optional[str]
    preferRelatedApplications: Optional[bool]
    protocolHandlers: Optional[list]
    """
    The handlers to open protocols.
    """
    relatedApplications: Optional[list]
    scope: Optional[str]
    scopeExtensions: Optional[list]
    """
    Non-standard, see
https://github.com/WICG/manifest-incubations/blob/gh-pages/scope_extensions-explainer.md
    """
    screenshots: Optional[list]
    """
    The screenshots used by chromium.
    """
    shareTarget: Optional["ShareTarget"]
    shortName: Optional[str]
    shortcuts: Optional[list]
    startUrl: Optional[str]
    themeColor: Optional[str]


class AutoResponseMode(str, Enum):
    """
    Enum of possible auto-response for permission / prompt dialogs.
    """

    none = "none"
    autoAccept = "autoAccept"
    autoReject = "autoReject"
    autoOptOut = "autoOptOut"


class NavigationType(str, Enum):
    """
    The type of a frameNavigated event.
    """

    Navigation = "Navigation"
    BackForwardCacheRestore = "BackForwardCacheRestore"


class BackForwardCacheNotRestoredReason(str, Enum):
    """
    List of not restored reasons for back-forward cache.
    """

    NotPrimaryMainFrame = "NotPrimaryMainFrame"
    BackForwardCacheDisabled = "BackForwardCacheDisabled"
    RelatedActiveContentsExist = "RelatedActiveContentsExist"
    HTTPStatusNotOK = "HTTPStatusNotOK"
    SchemeNotHTTPOrHTTPS = "SchemeNotHTTPOrHTTPS"
    Loading = "Loading"
    WasGrantedMediaAccess = "WasGrantedMediaAccess"
    DisableForRenderFrameHostCalled = "DisableForRenderFrameHostCalled"
    DomainNotAllowed = "DomainNotAllowed"
    HTTPMethodNotGET = "HTTPMethodNotGET"
    SubframeIsNavigating = "SubframeIsNavigating"
    Timeout = "Timeout"
    CacheLimit = "CacheLimit"
    JavaScriptExecution = "JavaScriptExecution"
    RendererProcessKilled = "RendererProcessKilled"
    RendererProcessCrashed = "RendererProcessCrashed"
    SchedulerTrackedFeatureUsed = "SchedulerTrackedFeatureUsed"
    ConflictingBrowsingInstance = "ConflictingBrowsingInstance"
    CacheFlushed = "CacheFlushed"
    ServiceWorkerVersionActivation = "ServiceWorkerVersionActivation"
    SessionRestored = "SessionRestored"
    ServiceWorkerPostMessage = "ServiceWorkerPostMessage"
    EnteredBackForwardCacheBeforeServiceWorkerHostAdded = (
        "EnteredBackForwardCacheBeforeServiceWorkerHostAdded"
    )
    RenderFrameHostReused_SameSite = "RenderFrameHostReused_SameSite"
    RenderFrameHostReused_CrossSite = "RenderFrameHostReused_CrossSite"
    ServiceWorkerClaim = "ServiceWorkerClaim"
    IgnoreEventAndEvict = "IgnoreEventAndEvict"
    HaveInnerContents = "HaveInnerContents"
    TimeoutPuttingInCache = "TimeoutPuttingInCache"
    BackForwardCacheDisabledByLowMemory = "BackForwardCacheDisabledByLowMemory"
    BackForwardCacheDisabledByCommandLine = "BackForwardCacheDisabledByCommandLine"
    NetworkRequestDatapipeDrainedAsBytesConsumer = (
        "NetworkRequestDatapipeDrainedAsBytesConsumer"
    )
    NetworkRequestRedirected = "NetworkRequestRedirected"
    NetworkRequestTimeout = "NetworkRequestTimeout"
    NetworkExceedsBufferLimit = "NetworkExceedsBufferLimit"
    NavigationCancelledWhileRestoring = "NavigationCancelledWhileRestoring"
    NotMostRecentNavigationEntry = "NotMostRecentNavigationEntry"
    BackForwardCacheDisabledForPrerender = "BackForwardCacheDisabledForPrerender"
    UserAgentOverrideDiffers = "UserAgentOverrideDiffers"
    ForegroundCacheLimit = "ForegroundCacheLimit"
    BrowsingInstanceNotSwapped = "BrowsingInstanceNotSwapped"
    BackForwardCacheDisabledForDelegate = "BackForwardCacheDisabledForDelegate"
    UnloadHandlerExistsInMainFrame = "UnloadHandlerExistsInMainFrame"
    UnloadHandlerExistsInSubFrame = "UnloadHandlerExistsInSubFrame"
    ServiceWorkerUnregistration = "ServiceWorkerUnregistration"
    CacheControlNoStore = "CacheControlNoStore"
    CacheControlNoStoreCookieModified = "CacheControlNoStoreCookieModified"
    CacheControlNoStoreHTTPOnlyCookieModified = (
        "CacheControlNoStoreHTTPOnlyCookieModified"
    )
    NoResponseHead = "NoResponseHead"
    Unknown = "Unknown"
    ActivationNavigationsDisallowedForBug1234857 = (
        "ActivationNavigationsDisallowedForBug1234857"
    )
    ErrorDocument = "ErrorDocument"
    FencedFramesEmbedder = "FencedFramesEmbedder"
    CookieDisabled = "CookieDisabled"
    HTTPAuthRequired = "HTTPAuthRequired"
    CookieFlushed = "CookieFlushed"
    BroadcastChannelOnMessage = "BroadcastChannelOnMessage"
    WebViewSettingsChanged = "WebViewSettingsChanged"
    WebViewJavaScriptObjectChanged = "WebViewJavaScriptObjectChanged"
    WebViewMessageListenerInjected = "WebViewMessageListenerInjected"
    WebViewSafeBrowsingAllowlistChanged = "WebViewSafeBrowsingAllowlistChanged"
    WebViewDocumentStartJavascriptChanged = "WebViewDocumentStartJavascriptChanged"
    WebSocket = "WebSocket"
    WebTransport = "WebTransport"
    WebRTC = "WebRTC"
    MainResourceHasCacheControlNoStore = "MainResourceHasCacheControlNoStore"
    MainResourceHasCacheControlNoCache = "MainResourceHasCacheControlNoCache"
    SubresourceHasCacheControlNoStore = "SubresourceHasCacheControlNoStore"
    SubresourceHasCacheControlNoCache = "SubresourceHasCacheControlNoCache"
    ContainsPlugins = "ContainsPlugins"
    DocumentLoaded = "DocumentLoaded"
    OutstandingNetworkRequestOthers = "OutstandingNetworkRequestOthers"
    RequestedMIDIPermission = "RequestedMIDIPermission"
    RequestedAudioCapturePermission = "RequestedAudioCapturePermission"
    RequestedVideoCapturePermission = "RequestedVideoCapturePermission"
    RequestedBackForwardCacheBlockedSensors = "RequestedBackForwardCacheBlockedSensors"
    RequestedBackgroundWorkPermission = "RequestedBackgroundWorkPermission"
    BroadcastChannel = "BroadcastChannel"
    WebXR = "WebXR"
    SharedWorker = "SharedWorker"
    WebLocks = "WebLocks"
    WebHID = "WebHID"
    WebShare = "WebShare"
    RequestedStorageAccessGrant = "RequestedStorageAccessGrant"
    WebNfc = "WebNfc"
    OutstandingNetworkRequestFetch = "OutstandingNetworkRequestFetch"
    OutstandingNetworkRequestXHR = "OutstandingNetworkRequestXHR"
    AppBanner = "AppBanner"
    Printing = "Printing"
    WebDatabase = "WebDatabase"
    PictureInPicture = "PictureInPicture"
    Portal = "Portal"
    SpeechRecognizer = "SpeechRecognizer"
    IdleManager = "IdleManager"
    PaymentManager = "PaymentManager"
    SpeechSynthesis = "SpeechSynthesis"
    KeyboardLock = "KeyboardLock"
    WebOTPService = "WebOTPService"
    OutstandingNetworkRequestDirectSocket = "OutstandingNetworkRequestDirectSocket"
    InjectedJavascript = "InjectedJavascript"
    InjectedStyleSheet = "InjectedStyleSheet"
    KeepaliveRequest = "KeepaliveRequest"
    IndexedDBEvent = "IndexedDBEvent"
    Dummy = "Dummy"
    JsNetworkRequestReceivedCacheControlNoStoreResource = (
        "JsNetworkRequestReceivedCacheControlNoStoreResource"
    )
    WebRTCSticky = "WebRTCSticky"
    WebTransportSticky = "WebTransportSticky"
    WebSocketSticky = "WebSocketSticky"
    SmartCard = "SmartCard"
    LiveMediaStreamTrack = "LiveMediaStreamTrack"
    UnloadHandler = "UnloadHandler"
    ParserAborted = "ParserAborted"
    ContentSecurityHandler = "ContentSecurityHandler"
    ContentWebAuthenticationAPI = "ContentWebAuthenticationAPI"
    ContentFileChooser = "ContentFileChooser"
    ContentSerial = "ContentSerial"
    ContentFileSystemAccess = "ContentFileSystemAccess"
    ContentMediaDevicesDispatcherHost = "ContentMediaDevicesDispatcherHost"
    ContentWebBluetooth = "ContentWebBluetooth"
    ContentWebUSB = "ContentWebUSB"
    ContentMediaSessionService = "ContentMediaSessionService"
    ContentScreenReader = "ContentScreenReader"
    EmbedderPopupBlockerTabHelper = "EmbedderPopupBlockerTabHelper"
    EmbedderSafeBrowsingTriggeredPopupBlocker = (
        "EmbedderSafeBrowsingTriggeredPopupBlocker"
    )
    EmbedderSafeBrowsingThreatDetails = "EmbedderSafeBrowsingThreatDetails"
    EmbedderAppBannerManager = "EmbedderAppBannerManager"
    EmbedderDomDistillerViewerSource = "EmbedderDomDistillerViewerSource"
    EmbedderDomDistillerSelfDeletingRequestDelegate = (
        "EmbedderDomDistillerSelfDeletingRequestDelegate"
    )
    EmbedderOomInterventionTabHelper = "EmbedderOomInterventionTabHelper"
    EmbedderOfflinePage = "EmbedderOfflinePage"
    EmbedderChromePasswordManagerClientBindCredentialManager = (
        "EmbedderChromePasswordManagerClientBindCredentialManager"
    )
    EmbedderPermissionRequestManager = "EmbedderPermissionRequestManager"
    EmbedderModalDialog = "EmbedderModalDialog"
    EmbedderExtensions = "EmbedderExtensions"
    EmbedderExtensionMessaging = "EmbedderExtensionMessaging"
    EmbedderExtensionMessagingForOpenPort = "EmbedderExtensionMessagingForOpenPort"
    EmbedderExtensionSentMessageToCachedFrame = (
        "EmbedderExtensionSentMessageToCachedFrame"
    )
    RequestedByWebViewClient = "RequestedByWebViewClient"


class BackForwardCacheNotRestoredReasonType(str, Enum):
    """
    Types of not restored reasons for back-forward cache.
    """

    SupportPending = "SupportPending"
    PageSupportNeeded = "PageSupportNeeded"
    Circumstantial = "Circumstantial"


class BackForwardCacheBlockingDetails(BaseModel):
    url: Optional[str]
    """
    Url of the file where blockage happened. Optional because of tests.
    """
    function: Optional[str]
    """
    Function name where blockage happened. Optional because of anonymous functions and tests.
    """
    lineNumber: Union[float, int]
    """
    Line number in the script (0-based).
    """
    columnNumber: Union[float, int]
    """
    Column number in the script (0-based).
    """


class BackForwardCacheNotRestoredExplanation(BaseModel):
    type: "BackForwardCacheNotRestoredReasonType"
    """
    Type of the reason
    """
    reason: "BackForwardCacheNotRestoredReason"
    """
    Not restored reason
    """
    context: Optional[str]
    """
    Context associated with the reason. The meaning of this context is
dependent on the reason:
- EmbedderExtensionSentMessageToCachedFrame: the extension ID.
    """
    details: Optional[list]


class BackForwardCacheNotRestoredExplanationTree(BaseModel):
    url: str
    """
    URL of each frame
    """
    explanations: list
    """
    Not restored reasons of each frame
    """
    children: list
    """
    Array of children frame
    """
