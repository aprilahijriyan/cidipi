# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import Optional, TypeVar, Union

from pydantic import BaseModel

from cidipi import dom, page


class DOMNode(BaseModel):
    """
    A Node in the DOM tree.
    """

    nodeType: Union[float, int]
    """
    `Node`'s nodeType.
    """
    nodeName: str
    """
    `Node`'s nodeName.
    """
    nodeValue: str
    """
    `Node`'s nodeValue.
    """
    textValue: Optional[str]
    """
    Only set for textarea elements, contains the text value.
    """
    inputValue: Optional[str]
    """
    Only set for input elements, contains the input's associated text value.
    """
    inputChecked: Optional[bool]
    """
    Only set for radio and checkbox input elements, indicates if the element has been checked
    """
    optionSelected: Optional[bool]
    """
    Only set for option elements, indicates if the element has been selected
    """
    backendNodeId: dom.BackendNodeId
    """
    `Node`'s id, corresponds to DOM.Node.backendNodeId.
    """
    childNodeIndexes: Optional[list]
    """
    The indexes of the node's child nodes in the `domNodes` array returned by `getSnapshot`, if
any.
    """
    attributes: Optional[list]
    """
    Attributes of an `Element` node.
    """
    pseudoElementIndexes: Optional[list]
    """
    Indexes of pseudo elements associated with this node in the `domNodes` array returned by
`getSnapshot`, if any.
    """
    layoutNodeIndex: Optional[Union[float, int]]
    """
    The index of the node's related layout tree node in the `layoutTreeNodes` array returned by
`getSnapshot`, if any.
    """
    documentURL: Optional[str]
    """
    Document URL that `Document` or `FrameOwner` node points to.
    """
    baseURL: Optional[str]
    """
    Base URL that `Document` or `FrameOwner` node uses for URL completion.
    """
    contentLanguage: Optional[str]
    """
    Only set for documents, contains the document's content language.
    """
    documentEncoding: Optional[str]
    """
    Only set for documents, contains the document's character set encoding.
    """
    publicId: Optional[str]
    """
    `DocumentType` node's publicId.
    """
    systemId: Optional[str]
    """
    `DocumentType` node's systemId.
    """
    frameId: Optional[page.FrameId]
    """
    Frame ID for frame owner elements and also for the document node.
    """
    contentDocumentIndex: Optional[Union[float, int]]
    """
    The index of a frame owner element's content document in the `domNodes` array returned by
`getSnapshot`, if any.
    """
    pseudoType: Optional[dom.PseudoType]
    """
    Type of a pseudo element node.
    """
    shadowRootType: Optional[dom.ShadowRootType]
    """
    Shadow root type.
    """
    isClickable: Optional[bool]
    """
    Whether this DOM node responds to mouse clicks. This includes nodes that have had click
event listeners attached via JavaScript as well as anchor tags that naturally navigate when
clicked.
    """
    eventListeners: Optional[list]
    """
    Details of the node's event listeners, if any.
    """
    currentSourceURL: Optional[str]
    """
    The selected url for nodes with a srcset attribute.
    """
    originURL: Optional[str]
    """
    The url of the script (if any) that generates this node.
    """
    scrollOffsetX: Optional[Union[float, int]]
    """
    Scroll offsets, set when this node is a Document.
    """
    scrollOffsetY: Optional[Union[float, int]]


class InlineTextBox(BaseModel):
    """
        Details of post layout rendered text positions. The exact layout should not be regarded as
    stable and may change between versions.
    """

    boundingBox: dom.Rect
    """
    The bounding box in document coordinates. Note that scroll offset of the document is ignored.
    """
    startCharacterIndex: Union[float, int]
    """
    The starting index in characters, for this post layout textbox substring. Characters that
would be represented as a surrogate pair in UTF-16 have length 2.
    """
    numCharacters: Union[float, int]
    """
    The number of characters in this post layout textbox substring. Characters that would be
represented as a surrogate pair in UTF-16 have length 2.
    """


class LayoutTreeNode(BaseModel):
    """
    Details of an element in the DOM tree with a LayoutObject.
    """

    domNodeIndex: Union[float, int]
    """
    The index of the related DOM node in the `domNodes` array returned by `getSnapshot`.
    """
    boundingBox: dom.Rect
    """
    The bounding box in document coordinates. Note that scroll offset of the document is ignored.
    """
    layoutText: Optional[str]
    """
    Contents of the LayoutText, if any.
    """
    inlineTextNodes: Optional[list]
    """
    The post-layout inline text nodes, if any.
    """
    styleIndex: Optional[Union[float, int]]
    """
    Index into the `computedStyles` array returned by `getSnapshot`.
    """
    paintOrder: Optional[Union[float, int]]
    """
    Global paint order index, which is determined by the stacking order of the nodes. Nodes
that are painted together will have the same index. Only provided if includePaintOrder in
getSnapshot was true.
    """
    isStackingContext: Optional[bool]
    """
    Set to true to indicate the element begins a new stacking context.
    """


class ComputedStyle(BaseModel):
    """
    A subset of the full ComputedStyle as defined by the request whitelist.
    """

    properties: list
    """
    Name/value pairs of computed style properties.
    """


class NameValue(BaseModel):
    """
    A name/value pair.
    """

    name: str
    """
    Attribute/property name.
    """
    value: str
    """
    Attribute/property value.
    """


StringIndex = TypeVar("StringIndex", bound=Union[float, int])
"""
Index of the string in the strings table.
"""

ArrayOfStrings = TypeVar("ArrayOfStrings", bound=list)
"""
Index of the string in the strings table.
"""


class RareStringData(BaseModel):
    """
    Data that is only present on rare nodes.
    """

    index: list
    value: list


class RareBooleanData(BaseModel):
    index: list


class RareIntegerData(BaseModel):
    index: list
    value: list


Rectangle = TypeVar("Rectangle", bound=list)


class DocumentSnapshot(BaseModel):
    """
    Document snapshot.
    """

    documentURL: "StringIndex"
    """
    Document URL that `Document` or `FrameOwner` node points to.
    """
    title: "StringIndex"
    """
    Document title.
    """
    baseURL: "StringIndex"
    """
    Base URL that `Document` or `FrameOwner` node uses for URL completion.
    """
    contentLanguage: "StringIndex"
    """
    Contains the document's content language.
    """
    encodingName: "StringIndex"
    """
    Contains the document's character set encoding.
    """
    publicId: "StringIndex"
    """
    `DocumentType` node's publicId.
    """
    systemId: "StringIndex"
    """
    `DocumentType` node's systemId.
    """
    frameId: "StringIndex"
    """
    Frame ID for frame owner elements and also for the document node.
    """
    nodes: "NodeTreeSnapshot"
    """
    A table with dom nodes.
    """
    layout: "LayoutTreeSnapshot"
    """
    The nodes in the layout tree.
    """
    textBoxes: "TextBoxSnapshot"
    """
    The post-layout inline text nodes.
    """
    scrollOffsetX: Optional[Union[float, int]]
    """
    Horizontal scroll offset.
    """
    scrollOffsetY: Optional[Union[float, int]]
    """
    Vertical scroll offset.
    """
    contentWidth: Optional[Union[float, int]]
    """
    Document content width.
    """
    contentHeight: Optional[Union[float, int]]
    """
    Document content height.
    """


class NodeTreeSnapshot(BaseModel):
    """
    Table containing nodes.
    """

    parentIndex: Optional[list]
    """
    Parent node index.
    """
    nodeType: Optional[list]
    """
    `Node`'s nodeType.
    """
    shadowRootType: Optional["RareStringData"]
    """
    Type of the shadow root the `Node` is in. String values are equal to the `ShadowRootType` enum.
    """
    nodeName: Optional[list]
    """
    `Node`'s nodeName.
    """
    nodeValue: Optional[list]
    """
    `Node`'s nodeValue.
    """
    backendNodeId: Optional[list]
    """
    `Node`'s id, corresponds to DOM.Node.backendNodeId.
    """
    attributes: Optional[list]
    """
    Attributes of an `Element` node. Flatten name, value pairs.
    """
    textValue: Optional["RareStringData"]
    """
    Only set for textarea elements, contains the text value.
    """
    inputValue: Optional["RareStringData"]
    """
    Only set for input elements, contains the input's associated text value.
    """
    inputChecked: Optional["RareBooleanData"]
    """
    Only set for radio and checkbox input elements, indicates if the element has been checked
    """
    optionSelected: Optional["RareBooleanData"]
    """
    Only set for option elements, indicates if the element has been selected
    """
    contentDocumentIndex: Optional["RareIntegerData"]
    """
    The index of the document in the list of the snapshot documents.
    """
    pseudoType: Optional["RareStringData"]
    """
    Type of a pseudo element node.
    """
    pseudoIdentifier: Optional["RareStringData"]
    """
    Pseudo element identifier for this node. Only present if there is a
valid pseudoType.
    """
    isClickable: Optional["RareBooleanData"]
    """
    Whether this DOM node responds to mouse clicks. This includes nodes that have had click
event listeners attached via JavaScript as well as anchor tags that naturally navigate when
clicked.
    """
    currentSourceURL: Optional["RareStringData"]
    """
    The selected url for nodes with a srcset attribute.
    """
    originURL: Optional["RareStringData"]
    """
    The url of the script (if any) that generates this node.
    """


class LayoutTreeSnapshot(BaseModel):
    """
    Table of details of an element in the DOM tree with a LayoutObject.
    """

    nodeIndex: list
    """
    Index of the corresponding node in the `NodeTreeSnapshot` array returned by `captureSnapshot`.
    """
    styles: list
    """
    Array of indexes specifying computed style strings, filtered according to the `computedStyles` parameter passed to `captureSnapshot`.
    """
    bounds: list
    """
    The absolute position bounding box.
    """
    text: list
    """
    Contents of the LayoutText, if any.
    """
    stackingContexts: "RareBooleanData"
    """
    Stacking context information.
    """
    paintOrders: Optional[list]
    """
    Global paint order index, which is determined by the stacking order of the nodes. Nodes
that are painted together will have the same index. Only provided if includePaintOrder in
captureSnapshot was true.
    """
    offsetRects: Optional[list]
    """
    The offset rect of nodes. Only available when includeDOMRects is set to true
    """
    scrollRects: Optional[list]
    """
    The scroll rect of nodes. Only available when includeDOMRects is set to true
    """
    clientRects: Optional[list]
    """
    The client rect of nodes. Only available when includeDOMRects is set to true
    """
    blendedBackgroundColors: Optional[list]
    """
    The list of background colors that are blended with colors of overlapping elements.
    """
    textColorOpacities: Optional[list]
    """
    The list of computed text opacities.
    """


class TextBoxSnapshot(BaseModel):
    """
        Table of details of the post layout rendered text positions. The exact layout should not be regarded as
    stable and may change between versions.
    """

    layoutIndex: list
    """
    Index of the layout tree node that owns this box collection.
    """
    bounds: list
    """
    The absolute position bounding box.
    """
    start: list
    """
    The starting index in characters, for this post layout textbox substring. Characters that
would be represented as a surrogate pair in UTF-16 have length 2.
    """
    length: list
    """
    The number of characters in this post layout textbox substring. Characters that would be
represented as a surrogate pair in UTF-16 have length 2.
    """
