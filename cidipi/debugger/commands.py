# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi import runtime
from cidipi.debugger.types import *


class continueToLocation(BaseModel):
    """
    Continues execution until specific location is reached.
    """

    __domain__: str = PrivateAttr("Debugger")
    location: "Location"
    """
    Location to continue to.
    """
    targetCallFrames: Optional[Literal["any", "current"]]


class disable(BaseModel):
    """
    Disables debugger for given page.
    """

    __domain__: str = PrivateAttr("Debugger")


class enable(BaseModel):
    """
        Enables debugger for the given page. Clients should not assume that the debugging has been
    enabled until the result for this command is received.
    """

    __domain__: str = PrivateAttr("Debugger")
    maxScriptsCacheSize: Optional[Union[float, int]]
    """
    The maximum size in bytes of collected scripts (not referenced by other heap objects)
the debugger can hold. Puts no limit if parameter is omitted.
    """


class evaluateOnCallFrame(BaseModel):
    """
    Evaluates expression on a given call frame.
    """

    __domain__: str = PrivateAttr("Debugger")
    callFrameId: "CallFrameId"
    """
    Call frame identifier to evaluate on.
    """
    expression: str
    """
    Expression to evaluate.
    """
    objectGroup: Optional[str]
    """
    String object group name to put result into (allows rapid releasing resulting object handles
using `releaseObjectGroup`).
    """
    includeCommandLineAPI: Optional[bool]
    """
    Specifies whether command line API should be available to the evaluated expression, defaults
to false.
    """
    silent: Optional[bool]
    """
    In silent mode exceptions thrown during evaluation are not reported and do not pause
execution. Overrides `setPauseOnException` state.
    """
    returnByValue: Optional[bool]
    """
    Whether the result is expected to be a JSON object that should be sent by value.
    """
    generatePreview: Optional[bool]
    """
    Whether preview should be generated for the result.
    """
    throwOnSideEffect: Optional[bool]
    """
    Whether to throw an exception if side effect cannot be ruled out during evaluation.
    """
    timeout: Optional[runtime.TimeDelta]
    """
    Terminate execution after timing out (number of milliseconds).
    """


class getPossibleBreakpoints(BaseModel):
    """
        Returns possible locations for breakpoint. scriptId in start and end range locations should be
    the same.
    """

    __domain__: str = PrivateAttr("Debugger")
    start: "Location"
    """
    Start of range to search possible breakpoint locations in.
    """
    end: Optional["Location"]
    """
    End of range to search possible breakpoint locations in (excluding). When not specified, end
of scripts is used as end of range.
    """
    restrictToFunction: Optional[bool]
    """
    Only consider locations which are in the same (non-nested) function as start.
    """


class getScriptSource(BaseModel):
    """
    Returns source for the script with given id.
    """

    __domain__: str = PrivateAttr("Debugger")
    scriptId: runtime.ScriptId
    """
    Id of the script to get source for.
    """


class disassembleWasmModule(BaseModel):
    __domain__: str = PrivateAttr("Debugger")
    scriptId: runtime.ScriptId
    """
    Id of the script to disassemble
    """


class nextWasmDisassemblyChunk(BaseModel):
    """
        Disassemble the next chunk of lines for the module corresponding to the
    stream. If disassembly is complete, this API will invalidate the streamId
    and return an empty chunk. Any subsequent calls for the now invalid stream
    will return errors.
    """

    __domain__: str = PrivateAttr("Debugger")
    streamId: str


class getWasmBytecode(BaseModel):
    """
    This command is deprecated. Use getScriptSource instead.
    """

    __domain__: str = PrivateAttr("Debugger")
    scriptId: runtime.ScriptId
    """
    Id of the Wasm script to get source for.
    """


class getStackTrace(BaseModel):
    """
    Returns stack trace with given `stackTraceId`.
    """

    __domain__: str = PrivateAttr("Debugger")
    stackTraceId: runtime.StackTraceId


class pause(BaseModel):
    """
    Stops on the next JavaScript statement.
    """

    __domain__: str = PrivateAttr("Debugger")


class pauseOnAsyncCall(BaseModel):
    __domain__: str = PrivateAttr("Debugger")
    parentStackTraceId: runtime.StackTraceId
    """
    Debugger will pause when async call with given stack trace is started.
    """


class removeBreakpoint(BaseModel):
    """
    Removes JavaScript breakpoint.
    """

    __domain__: str = PrivateAttr("Debugger")
    breakpointId: "BreakpointId"


class restartFrame(BaseModel):
    """
        Restarts particular call frame from the beginning. The old, deprecated
    behavior of `restartFrame` is to stay paused and allow further CDP commands
    after a restart was scheduled. This can cause problems with restarting, so
    we now continue execution immediatly after it has been scheduled until we
    reach the beginning of the restarted frame.

    To stay back-wards compatible, `restartFrame` now expects a `mode`
    parameter to be present. If the `mode` parameter is missing, `restartFrame`
    errors out.

    The various return values are deprecated and `callFrames` is always empty.
    Use the call frames from the `Debugger#paused` events instead, that fires
    once V8 pauses at the beginning of the restarted function.
    """

    __domain__: str = PrivateAttr("Debugger")
    callFrameId: "CallFrameId"
    """
    Call frame identifier to evaluate on.
    """
    mode: Optional[Literal["StepInto"]]
    """
    The `mode` parameter must be present and set to 'StepInto', otherwise
`restartFrame` will error out.
    """


class resume(BaseModel):
    """
    Resumes JavaScript execution.
    """

    __domain__: str = PrivateAttr("Debugger")
    terminateOnResume: Optional[bool]
    """
    Set to true to terminate execution upon resuming execution. In contrast
to Runtime.terminateExecution, this will allows to execute further
JavaScript (i.e. via evaluation) until execution of the paused code
is actually resumed, at which point termination is triggered.
If execution is currently not paused, this parameter has no effect.
    """


class searchInContent(BaseModel):
    """
    Searches for given string in script content.
    """

    __domain__: str = PrivateAttr("Debugger")
    scriptId: runtime.ScriptId
    """
    Id of the script to search in.
    """
    query: str
    """
    String to search for.
    """
    caseSensitive: Optional[bool]
    """
    If true, search is case sensitive.
    """
    isRegex: Optional[bool]
    """
    If true, treats string parameter as regex.
    """


class setAsyncCallStackDepth(BaseModel):
    """
    Enables or disables async call stacks tracking.
    """

    __domain__: str = PrivateAttr("Debugger")
    maxDepth: Union[float, int]
    """
    Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async
call stacks (default).
    """


class setBlackboxPatterns(BaseModel):
    """
        Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in
    scripts with url matching one of the patterns. VM will try to leave blackboxed script by
    performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
    """

    __domain__: str = PrivateAttr("Debugger")
    patterns: list
    """
    Array of regexps that will be used to check script url for blackbox state.
    """


class setBlackboxedRanges(BaseModel):
    """
        Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted
    scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
    Positions array contains positions where blackbox state is changed. First interval isn't
    blackboxed. Array should be sorted.
    """

    __domain__: str = PrivateAttr("Debugger")
    scriptId: runtime.ScriptId
    """
    Id of the script.
    """
    positions: list


class setBreakpoint(BaseModel):
    """
    Sets JavaScript breakpoint at a given location.
    """

    __domain__: str = PrivateAttr("Debugger")
    location: "Location"
    """
    Location to set breakpoint in.
    """
    condition: Optional[str]
    """
    Expression to use as a breakpoint condition. When specified, debugger will only stop on the
breakpoint if this expression evaluates to true.
    """


class setInstrumentationBreakpoint(BaseModel):
    """
    Sets instrumentation breakpoint.
    """

    __domain__: str = PrivateAttr("Debugger")
    instrumentation: Literal[
        "beforeScriptExecution", "beforeScriptWithSourceMapExecution"
    ]
    """
    Instrumentation name.
    """


class setBreakpointByUrl(BaseModel):
    """
        Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this
    command is issued, all existing parsed scripts will have breakpoints resolved and returned in
    `locations` property. Further matching script parsing will result in subsequent
    `breakpointResolved` events issued. This logical breakpoint will survive page reloads.
    """

    __domain__: str = PrivateAttr("Debugger")
    lineNumber: Union[float, int]
    """
    Line number to set breakpoint at.
    """
    url: Optional[str]
    """
    URL of the resources to set breakpoint on.
    """
    urlRegex: Optional[str]
    """
    Regex pattern for the URLs of the resources to set breakpoints on. Either `url` or
`urlRegex` must be specified.
    """
    scriptHash: Optional[str]
    """
    Script hash of the resources to set breakpoint on.
    """
    columnNumber: Optional[Union[float, int]]
    """
    Offset in the line to set breakpoint at.
    """
    condition: Optional[str]
    """
    Expression to use as a breakpoint condition. When specified, debugger will only stop on the
breakpoint if this expression evaluates to true.
    """


class setBreakpointOnFunctionCall(BaseModel):
    """
        Sets JavaScript breakpoint before each call to the given function.
    If another function was created from the same source as a given one,
    calling it will also trigger the breakpoint.
    """

    __domain__: str = PrivateAttr("Debugger")
    objectId: runtime.RemoteObjectId
    """
    Function object id.
    """
    condition: Optional[str]
    """
    Expression to use as a breakpoint condition. When specified, debugger will
stop on the breakpoint if this expression evaluates to true.
    """


class setBreakpointsActive(BaseModel):
    """
    Activates / deactivates all breakpoints on the page.
    """

    __domain__: str = PrivateAttr("Debugger")
    active: bool
    """
    New value for breakpoints active state.
    """


class setPauseOnExceptions(BaseModel):
    """
        Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions,
    or caught exceptions, no exceptions. Initial pause on exceptions state is `none`.
    """

    __domain__: str = PrivateAttr("Debugger")
    state: Literal["none", "caught", "uncaught", "all"]
    """
    Pause on exceptions mode.
    """


class setReturnValue(BaseModel):
    """
    Changes return value in top frame. Available only at return break position.
    """

    __domain__: str = PrivateAttr("Debugger")
    newValue: runtime.CallArgument
    """
    New return value.
    """


class setScriptSource(BaseModel):
    """
        Edits JavaScript source live.

    In general, functions that are currently on the stack can not be edited with
    a single exception: If the edited function is the top-most stack frame and
    that is the only activation of that function on the stack. In this case
    the live edit will be successful and a `Debugger.restartFrame` for the
    top-most function is automatically triggered.
    """

    __domain__: str = PrivateAttr("Debugger")
    scriptId: runtime.ScriptId
    """
    Id of the script to edit.
    """
    scriptSource: str
    """
    New content of the script.
    """
    dryRun: Optional[bool]
    """
    If true the change will not actually be applied. Dry run may be used to get result
description without actually modifying the code.
    """
    allowTopFrameEditing: Optional[bool]
    """
    If true, then `scriptSource` is allowed to change the function on top of the stack
as long as the top-most stack frame is the only activation of that function.
    """


class setSkipAllPauses(BaseModel):
    """
    Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).
    """

    __domain__: str = PrivateAttr("Debugger")
    skip: bool
    """
    New value for skip pauses state.
    """


class setVariableValue(BaseModel):
    """
        Changes value of variable in a callframe. Object-based scopes are not supported and must be
    mutated manually.
    """

    __domain__: str = PrivateAttr("Debugger")
    scopeNumber: Union[float, int]
    """
    0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch'
scope types are allowed. Other scopes could be manipulated manually.
    """
    variableName: str
    """
    Variable name.
    """
    newValue: runtime.CallArgument
    """
    New variable value.
    """
    callFrameId: "CallFrameId"
    """
    Id of callframe that holds variable.
    """


class stepInto(BaseModel):
    """
    Steps into the function call.
    """

    __domain__: str = PrivateAttr("Debugger")
    breakOnAsyncCall: Optional[bool]
    """
    Debugger will pause on the execution of the first async task which was scheduled
before next pause.
    """
    skipList: Optional[list]
    """
    The skipList specifies location ranges that should be skipped on step into.
    """


class stepOut(BaseModel):
    """
    Steps out of the function call.
    """

    __domain__: str = PrivateAttr("Debugger")


class stepOver(BaseModel):
    """
    Steps over the statement.
    """

    __domain__: str = PrivateAttr("Debugger")
    skipList: Optional[list]
    """
    The skipList specifies location ranges that should be skipped on step over.
    """
