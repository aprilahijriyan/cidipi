# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi import debugger, runtime
from cidipi.debugger.types import *


class breakpointResolved(BaseModel):
    """
    Fired when breakpoint is resolved to an actual script and location.
    """

    __domain__: str = PrivateAttr("Debugger")
    breakpointId: "BreakpointId"
    """
    Breakpoint unique identifier.
    """
    location: "Location"
    """
    Actual breakpoint location.
    """


class paused(BaseModel):
    """
    Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
    """

    __domain__: str = PrivateAttr("Debugger")
    callFrames: list
    """
    Call stack the virtual machine stopped on.
    """
    reason: Literal[
        "ambiguous",
        "assert",
        "CSPViolation",
        "debugCommand",
        "DOM",
        "EventListener",
        "exception",
        "instrumentation",
        "OOM",
        "other",
        "promiseRejection",
        "XHR",
        "step",
    ]
    """
    Pause reason.
    """
    data: Optional[dict]
    """
    Object containing break-specific auxiliary properties.
    """
    hitBreakpoints: Optional[list]
    """
    Hit breakpoints IDs
    """
    asyncStackTrace: Optional[runtime.StackTrace]
    """
    Async stack trace, if any.
    """
    asyncStackTraceId: Optional[runtime.StackTraceId]
    """
    Async stack trace, if any.
    """
    asyncCallStackTraceId: Optional[runtime.StackTraceId]
    """
    Never present, will be removed.
    """


class resumed(BaseModel):
    """
    Fired when the virtual machine resumed execution.
    """

    __domain__: str = PrivateAttr("Debugger")


class scriptFailedToParse(BaseModel):
    """
    Fired when virtual machine fails to parse the script.
    """

    __domain__: str = PrivateAttr("Debugger")
    scriptId: runtime.ScriptId
    """
    Identifier of the script parsed.
    """
    url: str
    """
    URL or name of the script parsed (if any).
    """
    startLine: Union[float, int]
    """
    Line offset of the script within the resource with given URL (for script tags).
    """
    startColumn: Union[float, int]
    """
    Column offset of the script within the resource with given URL.
    """
    endLine: Union[float, int]
    """
    Last line of the script.
    """
    endColumn: Union[float, int]
    """
    Length of the last line of the script.
    """
    executionContextId: runtime.ExecutionContextId
    """
    Specifies script creation context.
    """
    hash: str
    """
    Content hash of the script, SHA-256.
    """
    executionContextAuxData: Optional[dict]
    """
    Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'|'isolated'|'worker', frameId: string}
    """
    sourceMapURL: Optional[str]
    """
    URL of source map associated with script (if any).
    """
    hasSourceURL: Optional[bool]
    """
    True, if this script has sourceURL.
    """
    isModule: Optional[bool]
    """
    True, if this script is ES6 module.
    """
    length: Optional[Union[float, int]]
    """
    This script length.
    """
    stackTrace: Optional[runtime.StackTrace]
    """
    JavaScript top stack frame of where the script parsed event was triggered if available.
    """
    codeOffset: Optional[Union[float, int]]
    """
    If the scriptLanguage is WebAssembly, the code section offset in the module.
    """
    scriptLanguage: Optional[debugger.ScriptLanguage]
    """
    The language of the script.
    """
    embedderName: Optional[str]
    """
    The name the embedder supplied for this script.
    """


class scriptParsed(BaseModel):
    """
        Fired when virtual machine parses script. This event is also fired for all known and uncollected
    scripts upon enabling debugger.
    """

    __domain__: str = PrivateAttr("Debugger")
    scriptId: runtime.ScriptId
    """
    Identifier of the script parsed.
    """
    url: str
    """
    URL or name of the script parsed (if any).
    """
    startLine: Union[float, int]
    """
    Line offset of the script within the resource with given URL (for script tags).
    """
    startColumn: Union[float, int]
    """
    Column offset of the script within the resource with given URL.
    """
    endLine: Union[float, int]
    """
    Last line of the script.
    """
    endColumn: Union[float, int]
    """
    Length of the last line of the script.
    """
    executionContextId: runtime.ExecutionContextId
    """
    Specifies script creation context.
    """
    hash: str
    """
    Content hash of the script, SHA-256.
    """
    executionContextAuxData: Optional[dict]
    """
    Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'|'isolated'|'worker', frameId: string}
    """
    isLiveEdit: Optional[bool]
    """
    True, if this script is generated as a result of the live edit operation.
    """
    sourceMapURL: Optional[str]
    """
    URL of source map associated with script (if any).
    """
    hasSourceURL: Optional[bool]
    """
    True, if this script has sourceURL.
    """
    isModule: Optional[bool]
    """
    True, if this script is ES6 module.
    """
    length: Optional[Union[float, int]]
    """
    This script length.
    """
    stackTrace: Optional[runtime.StackTrace]
    """
    JavaScript top stack frame of where the script parsed event was triggered if available.
    """
    codeOffset: Optional[Union[float, int]]
    """
    If the scriptLanguage is WebAssembly, the code section offset in the module.
    """
    scriptLanguage: Optional[debugger.ScriptLanguage]
    """
    The language of the script.
    """
    debugSymbols: Optional[debugger.DebugSymbols]
    """
    If the scriptLanguage is WebASsembly, the source of debug symbols for the module.
    """
    embedderName: Optional[str]
    """
    The name the embedder supplied for this script.
    """
