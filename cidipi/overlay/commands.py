# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi import dom, page, runtime
from cidipi.overlay.types import *


class disable(BaseModel):
    """
    Disables domain notifications.
    """

    __domain__: str = PrivateAttr("Overlay")


class enable(BaseModel):
    """
    Enables domain notifications.
    """

    __domain__: str = PrivateAttr("Overlay")


class getHighlightObjectForTest(BaseModel):
    """
    For testing.
    """

    __domain__: str = PrivateAttr("Overlay")
    nodeId: dom.NodeId
    """
    Id of the node to get highlight object for.
    """
    includeDistance: Optional[bool]
    """
    Whether to include distance info.
    """
    includeStyle: Optional[bool]
    """
    Whether to include style info.
    """
    colorFormat: Optional["ColorFormat"]
    """
    The color format to get config with (default: hex).
    """
    showAccessibilityInfo: Optional[bool]
    """
    Whether to show accessibility info (default: true).
    """


class getGridHighlightObjectsForTest(BaseModel):
    """
    For Persistent Grid testing.
    """

    __domain__: str = PrivateAttr("Overlay")
    nodeIds: list
    """
    Ids of the node to get highlight object for.
    """


class getSourceOrderHighlightObjectForTest(BaseModel):
    """
    For Source Order Viewer testing.
    """

    __domain__: str = PrivateAttr("Overlay")
    nodeId: dom.NodeId
    """
    Id of the node to highlight.
    """


class hideHighlight(BaseModel):
    """
    Hides any highlight.
    """

    __domain__: str = PrivateAttr("Overlay")


class highlightFrame(BaseModel):
    """
        Highlights owner element of the frame with given id.
    Deprecated: Doesn't work reliably and cannot be fixed due to process
    separation (the owner node might be in a different process). Determine
    the owner node in the client and use highlightNode.
    """

    __domain__: str = PrivateAttr("Overlay")
    frameId: page.FrameId
    """
    Identifier of the frame to highlight.
    """
    contentColor: Optional[dom.RGBA]
    """
    The content box highlight fill color (default: transparent).
    """
    contentOutlineColor: Optional[dom.RGBA]
    """
    The content box highlight outline color (default: transparent).
    """


class highlightNode(BaseModel):
    """
        Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or
    objectId must be specified.
    """

    __domain__: str = PrivateAttr("Overlay")
    highlightConfig: "HighlightConfig"
    """
    A descriptor for the highlight appearance.
    """
    nodeId: Optional[dom.NodeId]
    """
    Identifier of the node to highlight.
    """
    backendNodeId: Optional[dom.BackendNodeId]
    """
    Identifier of the backend node to highlight.
    """
    objectId: Optional[runtime.RemoteObjectId]
    """
    JavaScript object id of the node to be highlighted.
    """
    selector: Optional[str]
    """
    Selectors to highlight relevant nodes.
    """


class highlightQuad(BaseModel):
    """
    Highlights given quad. Coordinates are absolute with respect to the main frame viewport.
    """

    __domain__: str = PrivateAttr("Overlay")
    quad: dom.Quad
    """
    Quad to highlight
    """
    color: Optional[dom.RGBA]
    """
    The highlight fill color (default: transparent).
    """
    outlineColor: Optional[dom.RGBA]
    """
    The highlight outline color (default: transparent).
    """


class highlightRect(BaseModel):
    """
    Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.
    """

    __domain__: str = PrivateAttr("Overlay")
    x: Union[float, int]
    """
    X coordinate
    """
    y: Union[float, int]
    """
    Y coordinate
    """
    width: Union[float, int]
    """
    Rectangle width
    """
    height: Union[float, int]
    """
    Rectangle height
    """
    color: Optional[dom.RGBA]
    """
    The highlight fill color (default: transparent).
    """
    outlineColor: Optional[dom.RGBA]
    """
    The highlight outline color (default: transparent).
    """


class highlightSourceOrder(BaseModel):
    """
        Highlights the source order of the children of the DOM node with given id or with the given
    JavaScript object wrapper. Either nodeId or objectId must be specified.
    """

    __domain__: str = PrivateAttr("Overlay")
    sourceOrderConfig: "SourceOrderConfig"
    """
    A descriptor for the appearance of the overlay drawing.
    """
    nodeId: Optional[dom.NodeId]
    """
    Identifier of the node to highlight.
    """
    backendNodeId: Optional[dom.BackendNodeId]
    """
    Identifier of the backend node to highlight.
    """
    objectId: Optional[runtime.RemoteObjectId]
    """
    JavaScript object id of the node to be highlighted.
    """


class setInspectMode(BaseModel):
    """
        Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted.
    Backend then generates 'inspectNodeRequested' event upon element selection.
    """

    __domain__: str = PrivateAttr("Overlay")
    mode: "InspectMode"
    """
    Set an inspection mode.
    """
    highlightConfig: Optional["HighlightConfig"]
    """
    A descriptor for the highlight appearance of hovered-over nodes. May be omitted if `enabled
== false`.
    """


class setShowAdHighlights(BaseModel):
    """
    Highlights owner element of all frames detected to be ads.
    """

    __domain__: str = PrivateAttr("Overlay")
    show: bool
    """
    True for showing ad highlights
    """


class setPausedInDebuggerMessage(BaseModel):
    __domain__: str = PrivateAttr("Overlay")
    message: Optional[str]
    """
    The message to display, also triggers resume and step over controls.
    """


class setShowDebugBorders(BaseModel):
    """
    Requests that backend shows debug borders on layers
    """

    __domain__: str = PrivateAttr("Overlay")
    show: bool
    """
    True for showing debug borders
    """


class setShowFPSCounter(BaseModel):
    """
    Requests that backend shows the FPS counter
    """

    __domain__: str = PrivateAttr("Overlay")
    show: bool
    """
    True for showing the FPS counter
    """


class setShowGridOverlays(BaseModel):
    """
    Highlight multiple elements with the CSS Grid overlay.
    """

    __domain__: str = PrivateAttr("Overlay")
    gridNodeHighlightConfigs: list
    """
    An array of node identifiers and descriptors for the highlight appearance.
    """


class setShowFlexOverlays(BaseModel):
    __domain__: str = PrivateAttr("Overlay")
    flexNodeHighlightConfigs: list
    """
    An array of node identifiers and descriptors for the highlight appearance.
    """


class setShowScrollSnapOverlays(BaseModel):
    __domain__: str = PrivateAttr("Overlay")
    scrollSnapHighlightConfigs: list
    """
    An array of node identifiers and descriptors for the highlight appearance.
    """


class setShowContainerQueryOverlays(BaseModel):
    __domain__: str = PrivateAttr("Overlay")
    containerQueryHighlightConfigs: list
    """
    An array of node identifiers and descriptors for the highlight appearance.
    """


class setShowPaintRects(BaseModel):
    """
    Requests that backend shows paint rectangles
    """

    __domain__: str = PrivateAttr("Overlay")
    result: bool
    """
    True for showing paint rectangles
    """


class setShowLayoutShiftRegions(BaseModel):
    """
    Requests that backend shows layout shift regions
    """

    __domain__: str = PrivateAttr("Overlay")
    result: bool
    """
    True for showing layout shift regions
    """


class setShowScrollBottleneckRects(BaseModel):
    """
    Requests that backend shows scroll bottleneck rects
    """

    __domain__: str = PrivateAttr("Overlay")
    show: bool
    """
    True for showing scroll bottleneck rects
    """


class setShowHitTestBorders(BaseModel):
    """
    Deprecated, no longer has any effect.
    """

    __domain__: str = PrivateAttr("Overlay")
    show: bool
    """
    True for showing hit-test borders
    """


class setShowWebVitals(BaseModel):
    """
    Request that backend shows an overlay with web vital metrics.
    """

    __domain__: str = PrivateAttr("Overlay")
    show: bool


class setShowViewportSizeOnResize(BaseModel):
    """
    Paints viewport size upon main frame resize.
    """

    __domain__: str = PrivateAttr("Overlay")
    show: bool
    """
    Whether to paint size or not.
    """


class setShowHinge(BaseModel):
    """
    Add a dual screen device hinge
    """

    __domain__: str = PrivateAttr("Overlay")
    hingeConfig: Optional["HingeConfig"]
    """
    hinge data, null means hideHinge
    """


class setShowIsolatedElements(BaseModel):
    """
    Show elements in isolation mode with overlays.
    """

    __domain__: str = PrivateAttr("Overlay")
    isolatedElementHighlightConfigs: list
    """
    An array of node identifiers and descriptors for the highlight appearance.
    """


class setShowWindowControlsOverlay(BaseModel):
    """
    Show Window Controls Overlay for PWA
    """

    __domain__: str = PrivateAttr("Overlay")
    windowControlsOverlayConfig: Optional["WindowControlsOverlayConfig"]
    """
    Window Controls Overlay data, null means hide Window Controls Overlay
    """
