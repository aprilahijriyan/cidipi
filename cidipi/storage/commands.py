# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi import browser, page
from cidipi.storage.types import *


class getStorageKeyForFrame(BaseModel):
    """
    Returns a storage key given a frame id.
    """

    __domain__: str = PrivateAttr("Storage")
    frameId: page.FrameId


class clearDataForOrigin(BaseModel):
    """
    Clears storage for origin.
    """

    __domain__: str = PrivateAttr("Storage")
    origin: str
    """
    Security origin.
    """
    storageTypes: str
    """
    Comma separated list of StorageType to clear.
    """


class clearDataForStorageKey(BaseModel):
    """
    Clears storage for storage key.
    """

    __domain__: str = PrivateAttr("Storage")
    storageKey: str
    """
    Storage key.
    """
    storageTypes: str
    """
    Comma separated list of StorageType to clear.
    """


class getCookies(BaseModel):
    """
    Returns all browser cookies.
    """

    __domain__: str = PrivateAttr("Storage")
    browserContextId: Optional[browser.BrowserContextID]
    """
    Browser context to use when called on the browser endpoint.
    """


class setCookies(BaseModel):
    """
    Sets given cookies.
    """

    __domain__: str = PrivateAttr("Storage")
    cookies: list
    """
    Cookies to be set.
    """
    browserContextId: Optional[browser.BrowserContextID]
    """
    Browser context to use when called on the browser endpoint.
    """


class clearCookies(BaseModel):
    """
    Clears cookies.
    """

    __domain__: str = PrivateAttr("Storage")
    browserContextId: Optional[browser.BrowserContextID]
    """
    Browser context to use when called on the browser endpoint.
    """


class getUsageAndQuota(BaseModel):
    """
    Returns usage and quota in bytes.
    """

    __domain__: str = PrivateAttr("Storage")
    origin: str
    """
    Security origin.
    """


class overrideQuotaForOrigin(BaseModel):
    """
    Override quota for the specified origin
    """

    __domain__: str = PrivateAttr("Storage")
    origin: str
    """
    Security origin.
    """
    quotaSize: Optional[Union[float, int]]
    """
    The quota size (in bytes) to override the original quota with.
If this is called multiple times, the overridden quota will be equal to
the quotaSize provided in the final call. If this is called without
specifying a quotaSize, the quota will be reset to the default value for
the specified origin. If this is called multiple times with different
origins, the override will be maintained for each origin until it is
disabled (called without a quotaSize).
    """


class trackCacheStorageForOrigin(BaseModel):
    """
    Registers origin to be notified when an update occurs to its cache storage list.
    """

    __domain__: str = PrivateAttr("Storage")
    origin: str
    """
    Security origin.
    """


class trackCacheStorageForStorageKey(BaseModel):
    """
    Registers storage key to be notified when an update occurs to its cache storage list.
    """

    __domain__: str = PrivateAttr("Storage")
    storageKey: str
    """
    Storage key.
    """


class trackIndexedDBForOrigin(BaseModel):
    """
    Registers origin to be notified when an update occurs to its IndexedDB.
    """

    __domain__: str = PrivateAttr("Storage")
    origin: str
    """
    Security origin.
    """


class trackIndexedDBForStorageKey(BaseModel):
    """
    Registers storage key to be notified when an update occurs to its IndexedDB.
    """

    __domain__: str = PrivateAttr("Storage")
    storageKey: str
    """
    Storage key.
    """


class untrackCacheStorageForOrigin(BaseModel):
    """
    Unregisters origin from receiving notifications for cache storage.
    """

    __domain__: str = PrivateAttr("Storage")
    origin: str
    """
    Security origin.
    """


class untrackCacheStorageForStorageKey(BaseModel):
    """
    Unregisters storage key from receiving notifications for cache storage.
    """

    __domain__: str = PrivateAttr("Storage")
    storageKey: str
    """
    Storage key.
    """


class untrackIndexedDBForOrigin(BaseModel):
    """
    Unregisters origin from receiving notifications for IndexedDB.
    """

    __domain__: str = PrivateAttr("Storage")
    origin: str
    """
    Security origin.
    """


class untrackIndexedDBForStorageKey(BaseModel):
    """
    Unregisters storage key from receiving notifications for IndexedDB.
    """

    __domain__: str = PrivateAttr("Storage")
    storageKey: str
    """
    Storage key.
    """


class getTrustTokens(BaseModel):
    """
        Returns the number of stored Trust Tokens per issuer for the
    current browsing context.
    """

    __domain__: str = PrivateAttr("Storage")


class clearTrustTokens(BaseModel):
    """
        Removes all Trust Tokens issued by the provided issuerOrigin.
    Leaves other stored data, including the issuer's Redemption Records, intact.
    """

    __domain__: str = PrivateAttr("Storage")
    issuerOrigin: str


class getInterestGroupDetails(BaseModel):
    """
    Gets details for a named interest group.
    """

    __domain__: str = PrivateAttr("Storage")
    ownerOrigin: str
    name: str


class setInterestGroupTracking(BaseModel):
    """
    Enables/Disables issuing of interestGroupAccessed events.
    """

    __domain__: str = PrivateAttr("Storage")
    enable: bool


class setInterestGroupAuctionTracking(BaseModel):
    """
        Enables/Disables issuing of interestGroupAuctionEventOccurred and
    interestGroupAuctionNetworkRequestCreated.
    """

    __domain__: str = PrivateAttr("Storage")
    enable: bool


class getSharedStorageMetadata(BaseModel):
    """
    Gets metadata for an origin's shared storage.
    """

    __domain__: str = PrivateAttr("Storage")
    ownerOrigin: str


class getSharedStorageEntries(BaseModel):
    """
    Gets the entries in an given origin's shared storage.
    """

    __domain__: str = PrivateAttr("Storage")
    ownerOrigin: str


class setSharedStorageEntry(BaseModel):
    """
    Sets entry with `key` and `value` for a given origin's shared storage.
    """

    __domain__: str = PrivateAttr("Storage")
    ownerOrigin: str
    key: str
    value: str
    ignoreIfPresent: Optional[bool]
    """
    If `ignoreIfPresent` is included and true, then only sets the entry if
`key` doesn't already exist.
    """


class deleteSharedStorageEntry(BaseModel):
    """
    Deletes entry for `key` (if it exists) for a given origin's shared storage.
    """

    __domain__: str = PrivateAttr("Storage")
    ownerOrigin: str
    key: str


class clearSharedStorageEntries(BaseModel):
    """
    Clears all entries for a given origin's shared storage.
    """

    __domain__: str = PrivateAttr("Storage")
    ownerOrigin: str


class resetSharedStorageBudget(BaseModel):
    """
    Resets the budget for `ownerOrigin` by clearing all budget withdrawals.
    """

    __domain__: str = PrivateAttr("Storage")
    ownerOrigin: str


class setSharedStorageTracking(BaseModel):
    """
    Enables/disables issuing of sharedStorageAccessed events.
    """

    __domain__: str = PrivateAttr("Storage")
    enable: bool


class setStorageBucketTracking(BaseModel):
    """
    Set tracking for a storage key's buckets.
    """

    __domain__: str = PrivateAttr("Storage")
    storageKey: str
    enable: bool


class deleteStorageBucket(BaseModel):
    """
    Deletes the Storage Bucket with the given storage key and bucket name.
    """

    __domain__: str = PrivateAttr("Storage")
    bucket: "StorageBucket"


class runBounceTrackingMitigations(BaseModel):
    """
    Deletes state for sites identified as potential bounce trackers, immediately.
    """

    __domain__: str = PrivateAttr("Storage")


class setAttributionReportingLocalTestingMode(BaseModel):
    """
    https://wicg.github.io/attribution-reporting-api/
    """

    __domain__: str = PrivateAttr("Storage")
    enabled: bool
    """
    If enabled, noise is suppressed and reports are sent immediately.
    """


class setAttributionReportingTracking(BaseModel):
    """
    Enables/disables issuing of Attribution Reporting events.
    """

    __domain__: str = PrivateAttr("Storage")
    enable: bool


class sendPendingAttributionReports(BaseModel):
    """
        Sends all pending Attribution Reports immediately, regardless of their
    scheduled report time.
    """

    __domain__: str = PrivateAttr("Storage")


class getRelatedWebsiteSets(BaseModel):
    """
        Returns the effective Related Website Sets in use by this profile for the browser
    session. The effective Related Website Sets will not change during a browser session.
    """

    __domain__: str = PrivateAttr("Storage")
