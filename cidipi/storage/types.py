# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Optional, TypeVar, Union

from pydantic import BaseModel

from cidipi import network

SerializedStorageKey = TypeVar("SerializedStorageKey", bound=str)


class StorageType(str, Enum):
    """
    Enum of possible storage types.
    """

    appcache = "appcache"
    cookies = "cookies"
    file_systems = "file_systems"
    indexeddb = "indexeddb"
    local_storage = "local_storage"
    shader_cache = "shader_cache"
    websql = "websql"
    service_workers = "service_workers"
    cache_storage = "cache_storage"
    interest_groups = "interest_groups"
    shared_storage = "shared_storage"
    storage_buckets = "storage_buckets"
    all = "all"
    other = "other"


class UsageForType(BaseModel):
    """
    Usage for a storage type.
    """

    storageType: "StorageType"
    """
    Name of storage type.
    """
    usage: Union[float, int]
    """
    Storage usage (bytes).
    """


class TrustTokens(BaseModel):
    """
        Pair of issuer origin and number of available (signed, but not used) Trust
    Tokens from that issuer.
    """

    issuerOrigin: str
    count: Union[float, int]


InterestGroupAuctionId = TypeVar("InterestGroupAuctionId", bound=str)
"""
Protected audience interest group auction identifier.
"""


class InterestGroupAccessType(str, Enum):
    """
    Enum of interest group access types.
    """

    join = "join"
    leave = "leave"
    update = "update"
    loaded = "loaded"
    bid = "bid"
    win = "win"
    additionalBid = "additionalBid"
    additionalBidWin = "additionalBidWin"
    topLevelBid = "topLevelBid"
    topLevelAdditionalBid = "topLevelAdditionalBid"
    clear = "clear"


class InterestGroupAuctionEventType(str, Enum):
    """
    Enum of auction events.
    """

    started = "started"
    configResolved = "configResolved"


class InterestGroupAuctionFetchType(str, Enum):
    """
    Enum of network fetches auctions can do.
    """

    bidderJs = "bidderJs"
    bidderWasm = "bidderWasm"
    sellerJs = "sellerJs"
    bidderTrustedSignals = "bidderTrustedSignals"
    sellerTrustedSignals = "sellerTrustedSignals"


class SharedStorageAccessType(str, Enum):
    """
    Enum of shared storage access types.
    """

    documentAddModule = "documentAddModule"
    documentSelectURL = "documentSelectURL"
    documentRun = "documentRun"
    documentSet = "documentSet"
    documentAppend = "documentAppend"
    documentDelete = "documentDelete"
    documentClear = "documentClear"
    documentGet = "documentGet"
    workletSet = "workletSet"
    workletAppend = "workletAppend"
    workletDelete = "workletDelete"
    workletClear = "workletClear"
    workletGet = "workletGet"
    workletKeys = "workletKeys"
    workletEntries = "workletEntries"
    workletLength = "workletLength"
    workletRemainingBudget = "workletRemainingBudget"
    headerSet = "headerSet"
    headerAppend = "headerAppend"
    headerDelete = "headerDelete"
    headerClear = "headerClear"


class SharedStorageEntry(BaseModel):
    """
    Struct for a single key-value pair in an origin's shared storage.
    """

    key: str
    value: str


class SharedStorageMetadata(BaseModel):
    """
    Details for an origin's shared storage.
    """

    creationTime: network.TimeSinceEpoch
    """
    Time when the origin's shared storage was last created.
    """
    length: Union[float, int]
    """
    Number of key-value pairs stored in origin's shared storage.
    """
    remainingBudget: Union[float, int]
    """
    Current amount of bits of entropy remaining in the navigation budget.
    """
    bytesUsed: Union[float, int]
    """
    Total number of bytes stored as key-value pairs in origin's shared
storage.
    """


class SharedStorageReportingMetadata(BaseModel):
    """
    Pair of reporting metadata details for a candidate URL for `selectURL()`.
    """

    eventType: str
    reportingUrl: str


class SharedStorageUrlWithMetadata(BaseModel):
    """
    Bundles a candidate URL with its reporting metadata.
    """

    url: str
    """
    Spec of candidate URL.
    """
    reportingMetadata: list
    """
    Any associated reporting metadata.
    """


class SharedStorageAccessParams(BaseModel):
    """
        Bundles the parameters for shared storage access events whose
    presence/absence can vary according to SharedStorageAccessType.
    """

    scriptSourceUrl: Optional[str]
    """
    Spec of the module script URL.
Present only for SharedStorageAccessType.documentAddModule.
    """
    operationName: Optional[str]
    """
    Name of the registered operation to be run.
Present only for SharedStorageAccessType.documentRun and
SharedStorageAccessType.documentSelectURL.
    """
    serializedData: Optional[str]
    """
    The operation's serialized data in bytes (converted to a string).
Present only for SharedStorageAccessType.documentRun and
SharedStorageAccessType.documentSelectURL.
    """
    urlsWithMetadata: Optional[list]
    """
    Array of candidate URLs' specs, along with any associated metadata.
Present only for SharedStorageAccessType.documentSelectURL.
    """
    key: Optional[str]
    """
    Key for a specific entry in an origin's shared storage.
Present only for SharedStorageAccessType.documentSet,
SharedStorageAccessType.documentAppend,
SharedStorageAccessType.documentDelete,
SharedStorageAccessType.workletSet,
SharedStorageAccessType.workletAppend,
SharedStorageAccessType.workletDelete,
SharedStorageAccessType.workletGet,
SharedStorageAccessType.headerSet,
SharedStorageAccessType.headerAppend, and
SharedStorageAccessType.headerDelete.
    """
    value: Optional[str]
    """
    Value for a specific entry in an origin's shared storage.
Present only for SharedStorageAccessType.documentSet,
SharedStorageAccessType.documentAppend,
SharedStorageAccessType.workletSet,
SharedStorageAccessType.workletAppend,
SharedStorageAccessType.headerSet, and
SharedStorageAccessType.headerAppend.
    """
    ignoreIfPresent: Optional[bool]
    """
    Whether or not to set an entry for a key if that key is already present.
Present only for SharedStorageAccessType.documentSet,
SharedStorageAccessType.workletSet, and
SharedStorageAccessType.headerSet.
    """


class StorageBucketsDurability(str, Enum):
    relaxed = "relaxed"
    strict = "strict"


class StorageBucket(BaseModel):
    storageKey: "SerializedStorageKey"
    name: Optional[str]
    """
    If not specified, it is the default bucket of the storageKey.
    """


class StorageBucketInfo(BaseModel):
    bucket: "StorageBucket"
    id: str
    expiration: network.TimeSinceEpoch
    quota: Union[float, int]
    """
    Storage quota (bytes).
    """
    persistent: bool
    durability: "StorageBucketsDurability"


class AttributionReportingSourceType(str, Enum):
    navigation = "navigation"
    event = "event"


UnsignedInt64AsBase10 = TypeVar("UnsignedInt64AsBase10", bound=str)

UnsignedInt128AsBase16 = TypeVar("UnsignedInt128AsBase16", bound=str)

SignedInt64AsBase10 = TypeVar("SignedInt64AsBase10", bound=str)


class AttributionReportingFilterDataEntry(BaseModel):
    key: str
    values: list


class AttributionReportingFilterConfig(BaseModel):
    filterValues: list
    lookbackWindow: Optional[Union[float, int]]
    """
    duration in seconds
    """


class AttributionReportingFilterPair(BaseModel):
    filters: list
    notFilters: list


class AttributionReportingAggregationKeysEntry(BaseModel):
    key: str
    value: "UnsignedInt128AsBase16"


class AttributionReportingEventReportWindows(BaseModel):
    start: Union[float, int]
    """
    duration in seconds
    """
    ends: list
    """
    duration in seconds
    """


class AttributionReportingTriggerSpec(BaseModel):
    triggerData: list
    """
    number instead of integer because not all uint32 can be represented by
int
    """
    eventReportWindows: "AttributionReportingEventReportWindows"


class AttributionReportingTriggerDataMatching(str, Enum):
    exact = "exact"
    modulus = "modulus"


class AttributionReportingSourceRegistration(BaseModel):
    time: network.TimeSinceEpoch
    expiry: Union[float, int]
    """
    duration in seconds
    """
    triggerSpecs: list
    aggregatableReportWindow: Union[float, int]
    """
    duration in seconds
    """
    type: "AttributionReportingSourceType"
    sourceOrigin: str
    reportingOrigin: str
    destinationSites: list
    eventId: "UnsignedInt64AsBase10"
    priority: "SignedInt64AsBase10"
    filterData: list
    aggregationKeys: list
    debugKey: Optional["UnsignedInt64AsBase10"]
    triggerDataMatching: "AttributionReportingTriggerDataMatching"


class AttributionReportingSourceRegistrationResult(str, Enum):
    success = "success"
    internalError = "internalError"
    insufficientSourceCapacity = "insufficientSourceCapacity"
    insufficientUniqueDestinationCapacity = "insufficientUniqueDestinationCapacity"
    excessiveReportingOrigins = "excessiveReportingOrigins"
    prohibitedByBrowserPolicy = "prohibitedByBrowserPolicy"
    successNoised = "successNoised"
    destinationReportingLimitReached = "destinationReportingLimitReached"
    destinationGlobalLimitReached = "destinationGlobalLimitReached"
    destinationBothLimitsReached = "destinationBothLimitsReached"
    reportingOriginsPerSiteLimitReached = "reportingOriginsPerSiteLimitReached"
    exceedsMaxChannelCapacity = "exceedsMaxChannelCapacity"
    exceedsMaxTriggerStateCardinality = "exceedsMaxTriggerStateCardinality"
    destinationPerDayReportingLimitReached = "destinationPerDayReportingLimitReached"


class AttributionReportingSourceRegistrationTimeConfig(str, Enum):
    include = "include"
    exclude = "exclude"


class AttributionReportingAggregatableValueDictEntry(BaseModel):
    key: str
    value: Union[float, int]
    """
    number instead of integer because not all uint32 can be represented by
int
    """


class AttributionReportingAggregatableValueEntry(BaseModel):
    values: list
    filters: "AttributionReportingFilterPair"


class AttributionReportingEventTriggerData(BaseModel):
    data: "UnsignedInt64AsBase10"
    priority: "SignedInt64AsBase10"
    dedupKey: Optional["UnsignedInt64AsBase10"]
    filters: "AttributionReportingFilterPair"


class AttributionReportingAggregatableTriggerData(BaseModel):
    keyPiece: "UnsignedInt128AsBase16"
    sourceKeys: list
    filters: "AttributionReportingFilterPair"


class AttributionReportingAggregatableDedupKey(BaseModel):
    dedupKey: Optional["UnsignedInt64AsBase10"]
    filters: "AttributionReportingFilterPair"


class AttributionReportingTriggerRegistration(BaseModel):
    filters: "AttributionReportingFilterPair"
    debugKey: Optional["UnsignedInt64AsBase10"]
    aggregatableDedupKeys: list
    eventTriggerData: list
    aggregatableTriggerData: list
    aggregatableValues: list
    debugReporting: bool
    aggregationCoordinatorOrigin: Optional[str]
    sourceRegistrationTimeConfig: "AttributionReportingSourceRegistrationTimeConfig"
    triggerContextId: Optional[str]


class AttributionReportingEventLevelResult(str, Enum):
    success = "success"
    successDroppedLowerPriority = "successDroppedLowerPriority"
    internalError = "internalError"
    noCapacityForAttributionDestination = "noCapacityForAttributionDestination"
    noMatchingSources = "noMatchingSources"
    deduplicated = "deduplicated"
    excessiveAttributions = "excessiveAttributions"
    priorityTooLow = "priorityTooLow"
    neverAttributedSource = "neverAttributedSource"
    excessiveReportingOrigins = "excessiveReportingOrigins"
    noMatchingSourceFilterData = "noMatchingSourceFilterData"
    prohibitedByBrowserPolicy = "prohibitedByBrowserPolicy"
    noMatchingConfigurations = "noMatchingConfigurations"
    excessiveReports = "excessiveReports"
    falselyAttributedSource = "falselyAttributedSource"
    reportWindowPassed = "reportWindowPassed"
    notRegistered = "notRegistered"
    reportWindowNotStarted = "reportWindowNotStarted"
    noMatchingTriggerData = "noMatchingTriggerData"


class AttributionReportingAggregatableResult(str, Enum):
    success = "success"
    internalError = "internalError"
    noCapacityForAttributionDestination = "noCapacityForAttributionDestination"
    noMatchingSources = "noMatchingSources"
    excessiveAttributions = "excessiveAttributions"
    excessiveReportingOrigins = "excessiveReportingOrigins"
    noHistograms = "noHistograms"
    insufficientBudget = "insufficientBudget"
    noMatchingSourceFilterData = "noMatchingSourceFilterData"
    notRegistered = "notRegistered"
    prohibitedByBrowserPolicy = "prohibitedByBrowserPolicy"
    deduplicated = "deduplicated"
    reportWindowPassed = "reportWindowPassed"
    excessiveReports = "excessiveReports"


class RelatedWebsiteSet(BaseModel):
    """
    A single Related Website Set object.
    """

    primarySites: list
    """
    The primary site of this set, along with the ccTLDs if there is any.
    """
    associatedSites: list
    """
    The associated sites of this set, along with the ccTLDs if there is any.
    """
    serviceSites: list
    """
    The service sites of this set, along with the ccTLDs if there is any.
    """
