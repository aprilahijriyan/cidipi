# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi import runtime
from cidipi.io.types import *


class close(BaseModel):
    """
    Close the stream, discard any temporary backing storage.
    """

    __domain__: str = PrivateAttr("IO")
    handle: "StreamHandle"
    """
    Handle of the stream to close.
    """


class read(BaseModel):
    """
    Read a chunk of the stream
    """

    __domain__: str = PrivateAttr("IO")
    handle: "StreamHandle"
    """
    Handle of the stream to read.
    """
    offset: Optional[Union[float, int]]
    """
    Seek to the specified offset before reading (if not specified, proceed with offset
following the last read). Some types of streams may only support sequential reads.
    """
    size: Optional[Union[float, int]]
    """
    Maximum number of bytes to read (left upon the agent discretion if not specified).
    """


class resolveBlob(BaseModel):
    """
    Return UUID of Blob object specified by a remote object id.
    """

    __domain__: str = PrivateAttr("IO")
    objectId: runtime.RemoteObjectId
    """
    Object id of a Blob object wrapper.
    """
