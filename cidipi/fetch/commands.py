# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi import network
from cidipi.fetch.types import *


class disable(BaseModel):
    """
    Disables the fetch domain.
    """

    __domain__: str = PrivateAttr("Fetch")


class enable(BaseModel):
    """
        Enables issuing of requestPaused events. A request will be paused until client
    calls one of failRequest, fulfillRequest or continueRequest/continueWithAuth.
    """

    __domain__: str = PrivateAttr("Fetch")
    patterns: Optional[list]
    """
    If specified, only requests matching any of these patterns will produce
fetchRequested event and will be paused until clients response. If not set,
all requests will be affected.
    """
    handleAuthRequests: Optional[bool]
    """
    If true, authRequired events will be issued and requests will be paused
expecting a call to continueWithAuth.
    """


class failRequest(BaseModel):
    """
    Causes the request to fail with specified reason.
    """

    __domain__: str = PrivateAttr("Fetch")
    requestId: "RequestId"
    """
    An id the client received in requestPaused event.
    """
    errorReason: network.ErrorReason
    """
    Causes the request to fail with the given reason.
    """


class fulfillRequest(BaseModel):
    """
    Provides response to the request.
    """

    __domain__: str = PrivateAttr("Fetch")
    requestId: "RequestId"
    """
    An id the client received in requestPaused event.
    """
    responseCode: Union[float, int]
    """
    An HTTP response code.
    """
    responseHeaders: Optional[list]
    """
    Response headers.
    """
    binaryResponseHeaders: Optional[str]
    """
    Alternative way of specifying response headers as a \0-separated
series of name: value pairs. Prefer the above method unless you
need to represent some non-UTF8 values that can't be transmitted
over the protocol as text. (Encoded as a base64 string when passed over JSON)
    """
    body: Optional[str]
    """
    A response body. If absent, original response body will be used if
the request is intercepted at the response stage and empty body
will be used if the request is intercepted at the request stage. (Encoded as a base64 string when passed over JSON)
    """
    responsePhrase: Optional[str]
    """
    A textual representation of responseCode.
If absent, a standard phrase matching responseCode is used.
    """


class continueRequest(BaseModel):
    """
    Continues the request, optionally modifying some of its parameters.
    """

    __domain__: str = PrivateAttr("Fetch")
    requestId: "RequestId"
    """
    An id the client received in requestPaused event.
    """
    url: Optional[str]
    """
    If set, the request url will be modified in a way that's not observable by page.
    """
    method: Optional[str]
    """
    If set, the request method is overridden.
    """
    postData: Optional[str]
    """
    If set, overrides the post data in the request. (Encoded as a base64 string when passed over JSON)
    """
    headers: Optional[list]
    """
    If set, overrides the request headers. Note that the overrides do not
extend to subsequent redirect hops, if a redirect happens. Another override
may be applied to a different request produced by a redirect.
    """
    interceptResponse: Optional[bool]
    """
    If set, overrides response interception behavior for this request.
    """


class continueWithAuth(BaseModel):
    """
    Continues a request supplying authChallengeResponse following authRequired event.
    """

    __domain__: str = PrivateAttr("Fetch")
    requestId: "RequestId"
    """
    An id the client received in authRequired event.
    """
    authChallengeResponse: "AuthChallengeResponse"
    """
    Response to  with an authChallenge.
    """


class continueResponse(BaseModel):
    """
        Continues loading of the paused response, optionally modifying the
    response headers. If either responseCode or headers are modified, all of them
    must be present.
    """

    __domain__: str = PrivateAttr("Fetch")
    requestId: "RequestId"
    """
    An id the client received in requestPaused event.
    """
    responseCode: Optional[Union[float, int]]
    """
    An HTTP response code. If absent, original response code will be used.
    """
    responsePhrase: Optional[str]
    """
    A textual representation of responseCode.
If absent, a standard phrase matching responseCode is used.
    """
    responseHeaders: Optional[list]
    """
    Response headers. If absent, original response headers will be used.
    """
    binaryResponseHeaders: Optional[str]
    """
    Alternative way of specifying response headers as a \0-separated
series of name: value pairs. Prefer the above method unless you
need to represent some non-UTF8 values that can't be transmitted
over the protocol as text. (Encoded as a base64 string when passed over JSON)
    """


class getResponseBody(BaseModel):
    """
        Causes the body of the response to be received from the server and
    returned as a single string. May only be issued for a request that
    is paused in the Response stage and is mutually exclusive with
    takeResponseBodyForInterceptionAsStream. Calling other methods that
    affect the request or disabling fetch domain before body is received
    results in an undefined behavior.
    Note that the response body is not available for redirects. Requests
    paused in the _redirect received_ state may be differentiated by
    `responseCode` and presence of `location` response header, see
    comments to `requestPaused` for details.
    """

    __domain__: str = PrivateAttr("Fetch")
    requestId: "RequestId"
    """
    Identifier for the intercepted request to get body for.
    """


class takeResponseBodyAsStream(BaseModel):
    """
        Returns a handle to the stream representing the response body.
    The request must be paused in the HeadersReceived stage.
    Note that after this command the request can't be continued
    as is -- client either needs to cancel it or to provide the
    response body.
    The stream only supports sequential read, IO.read will fail if the position
    is specified.
    This method is mutually exclusive with getResponseBody.
    Calling other methods that affect the request or disabling fetch
    domain before body is received results in an undefined behavior.
    """

    __domain__: str = PrivateAttr("Fetch")
    requestId: "RequestId"
