# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Literal, Optional, TypeVar, Union

from pydantic import BaseModel

from cidipi import dom, page

StyleSheetId = TypeVar("StyleSheetId", bound=str)


class StyleSheetOrigin(str, Enum):
    """
        Stylesheet type: "injected" for stylesheets injected via extension, "user-agent" for user-agent
    stylesheets, "inspector" for stylesheets created by the inspector (i.e. those holding the "via
    inspector" rules), "regular" for regular stylesheets.
    """

    injected = "injected"
    user_agent = "user-agent"
    inspector = "inspector"
    regular = "regular"


class PseudoElementMatches(BaseModel):
    """
    CSS rule collection for a single pseudo style.
    """

    pseudoType: dom.PseudoType
    """
    Pseudo element type.
    """
    pseudoIdentifier: Optional[str]
    """
    Pseudo element custom ident.
    """
    matches: list
    """
    Matches of CSS rules applicable to the pseudo style.
    """


class InheritedStyleEntry(BaseModel):
    """
    Inherited CSS rule collection from ancestor node.
    """

    inlineStyle: Optional["CSSStyle"]
    """
    The ancestor node's inline style, if any, in the style inheritance chain.
    """
    matchedCSSRules: list
    """
    Matches of CSS rules matching the ancestor node in the style inheritance chain.
    """


class InheritedPseudoElementMatches(BaseModel):
    """
    Inherited pseudo element matches from pseudos of an ancestor node.
    """

    pseudoElements: list
    """
    Matches of pseudo styles from the pseudos of an ancestor node.
    """


class RuleMatch(BaseModel):
    """
    Match data for a CSS rule.
    """

    rule: "CSSRule"
    """
    CSS rule in the match.
    """
    matchingSelectors: list
    """
    Matching selector indices in the rule's selectorList selectors (0-based).
    """


class Value(BaseModel):
    """
    Data for a simple selector (these are delimited by commas in a selector list).
    """

    text: str
    """
    Value text.
    """
    range: Optional["SourceRange"]
    """
    Value range in the underlying resource (if available).
    """
    specificity: Optional["Specificity"]
    """
    Specificity of the selector.
    """


class Specificity(BaseModel):
    """
        Specificity:
    https://drafts.csswg.org/selectors/#specificity-rules
    """

    a: Union[float, int]
    """
    The a component, which represents the number of ID selectors.
    """
    b: Union[float, int]
    """
    The b component, which represents the number of class selectors, attributes selectors, and
pseudo-classes.
    """
    c: Union[float, int]
    """
    The c component, which represents the number of type selectors and pseudo-elements.
    """


class SelectorList(BaseModel):
    """
    Selector list data.
    """

    selectors: list
    """
    Selectors in the list.
    """
    text: str
    """
    Rule selector text.
    """


class CSSStyleSheetHeader(BaseModel):
    """
    CSS stylesheet metainformation.
    """

    styleSheetId: "StyleSheetId"
    """
    The stylesheet identifier.
    """
    frameId: page.FrameId
    """
    Owner frame identifier.
    """
    sourceURL: str
    """
    Stylesheet resource URL. Empty if this is a constructed stylesheet created using
new CSSStyleSheet() (but non-empty if this is a constructed stylesheet imported
as a CSS module script).
    """
    sourceMapURL: Optional[str]
    """
    URL of source map associated with the stylesheet (if any).
    """
    origin: "StyleSheetOrigin"
    """
    Stylesheet origin.
    """
    title: str
    """
    Stylesheet title.
    """
    ownerNode: Optional[dom.BackendNodeId]
    """
    The backend id for the owner node of the stylesheet.
    """
    disabled: bool
    """
    Denotes whether the stylesheet is disabled.
    """
    hasSourceURL: Optional[bool]
    """
    Whether the sourceURL field value comes from the sourceURL comment.
    """
    isInline: bool
    """
    Whether this stylesheet is created for STYLE tag by parser. This flag is not set for
document.written STYLE tags.
    """
    isMutable: bool
    """
    Whether this stylesheet is mutable. Inline stylesheets become mutable
after they have been modified via CSSOM API.
`<link>` element's stylesheets become mutable only if DevTools modifies them.
Constructed stylesheets (new CSSStyleSheet()) are mutable immediately after creation.
    """
    isConstructed: bool
    """
    True if this stylesheet is created through new CSSStyleSheet() or imported as a
CSS module script.
    """
    startLine: Union[float, int]
    """
    Line offset of the stylesheet within the resource (zero based).
    """
    startColumn: Union[float, int]
    """
    Column offset of the stylesheet within the resource (zero based).
    """
    length: Union[float, int]
    """
    Size of the content (in characters).
    """
    endLine: Union[float, int]
    """
    Line offset of the end of the stylesheet within the resource (zero based).
    """
    endColumn: Union[float, int]
    """
    Column offset of the end of the stylesheet within the resource (zero based).
    """
    loadingFailed: Optional[bool]
    """
    If the style sheet was loaded from a network resource, this indicates when the resource failed to load
    """


class CSSRule(BaseModel):
    """
    CSS rule representation.
    """

    styleSheetId: Optional["StyleSheetId"]
    """
    The css style sheet identifier (absent for user agent stylesheet and user-specified
stylesheet rules) this rule came from.
    """
    selectorList: "SelectorList"
    """
    Rule selector data.
    """
    nestingSelectors: Optional[list]
    """
    Array of selectors from ancestor style rules, sorted by distance from the current rule.
    """
    origin: "StyleSheetOrigin"
    """
    Parent stylesheet's origin.
    """
    style: "CSSStyle"
    """
    Associated style declaration.
    """
    media: Optional[list]
    """
    Media list array (for rules involving media queries). The array enumerates media queries
starting with the innermost one, going outwards.
    """
    containerQueries: Optional[list]
    """
    Container query list array (for rules involving container queries).
The array enumerates container queries starting with the innermost one, going outwards.
    """
    supports: Optional[list]
    """
    @supports CSS at-rule array.
The array enumerates @supports at-rules starting with the innermost one, going outwards.
    """
    layers: Optional[list]
    """
    Cascade layer array. Contains the layer hierarchy that this rule belongs to starting
with the innermost layer and going outwards.
    """
    scopes: Optional[list]
    """
    @scope CSS at-rule array.
The array enumerates @scope at-rules starting with the innermost one, going outwards.
    """
    ruleTypes: Optional[list]
    """
    The array keeps the types of ancestor CSSRules from the innermost going outwards.
    """


class CSSRuleType(str, Enum):
    """
        Enum indicating the type of a CSS rule, used to represent the order of a style rule's ancestors.
    This list only contains rule types that are collected during the ancestor rule collection.
    """

    MediaRule = "MediaRule"
    SupportsRule = "SupportsRule"
    ContainerRule = "ContainerRule"
    LayerRule = "LayerRule"
    ScopeRule = "ScopeRule"
    StyleRule = "StyleRule"


class RuleUsage(BaseModel):
    """
    CSS coverage information.
    """

    styleSheetId: "StyleSheetId"
    """
    The css style sheet identifier (absent for user agent stylesheet and user-specified
stylesheet rules) this rule came from.
    """
    startOffset: Union[float, int]
    """
    Offset of the start of the rule (including selector) from the beginning of the stylesheet.
    """
    endOffset: Union[float, int]
    """
    Offset of the end of the rule body from the beginning of the stylesheet.
    """
    used: bool
    """
    Indicates whether the rule was actually used by some element in the page.
    """


class SourceRange(BaseModel):
    """
    Text range within a resource. All numbers are zero-based.
    """

    startLine: Union[float, int]
    """
    Start line of range.
    """
    startColumn: Union[float, int]
    """
    Start column of range (inclusive).
    """
    endLine: Union[float, int]
    """
    End line of range
    """
    endColumn: Union[float, int]
    """
    End column of range (exclusive).
    """


class ShorthandEntry(BaseModel):
    name: str
    """
    Shorthand name.
    """
    value: str
    """
    Shorthand value.
    """
    important: Optional[bool]
    """
    Whether the property has "!important" annotation (implies `false` if absent).
    """


class CSSComputedStyleProperty(BaseModel):
    name: str
    """
    Computed style property name.
    """
    value: str
    """
    Computed style property value.
    """


class CSSStyle(BaseModel):
    """
    CSS style representation.
    """

    styleSheetId: Optional["StyleSheetId"]
    """
    The css style sheet identifier (absent for user agent stylesheet and user-specified
stylesheet rules) this rule came from.
    """
    cssProperties: list
    """
    CSS properties in the style.
    """
    shorthandEntries: list
    """
    Computed values for all shorthands found in the style.
    """
    cssText: Optional[str]
    """
    Style declaration text (if available).
    """
    range: Optional["SourceRange"]
    """
    Style declaration range in the enclosing stylesheet (if available).
    """


class CSSProperty(BaseModel):
    """
    CSS property declaration data.
    """

    name: str
    """
    The property name.
    """
    value: str
    """
    The property value.
    """
    important: Optional[bool]
    """
    Whether the property has "!important" annotation (implies `false` if absent).
    """
    implicit: Optional[bool]
    """
    Whether the property is implicit (implies `false` if absent).
    """
    text: Optional[str]
    """
    The full property text as specified in the style.
    """
    parsedOk: Optional[bool]
    """
    Whether the property is understood by the browser (implies `true` if absent).
    """
    disabled: Optional[bool]
    """
    Whether the property is disabled by the user (present for source-based properties only).
    """
    range: Optional["SourceRange"]
    """
    The entire property range in the enclosing style declaration (if available).
    """
    longhandProperties: Optional[list]
    """
    Parsed longhand components of this property if it is a shorthand.
This field will be empty if the given property is not a shorthand.
    """


class CSSMedia(BaseModel):
    """
    CSS media rule descriptor.
    """

    text: str
    """
    Media query text.
    """
    source: Literal["mediaRule", "importRule", "linkedSheet", "inlineSheet"]
    """
    Source of the media query: "mediaRule" if specified by a @media rule, "importRule" if
specified by an @import rule, "linkedSheet" if specified by a "media" attribute in a linked
stylesheet's LINK tag, "inlineSheet" if specified by a "media" attribute in an inline
stylesheet's STYLE tag.
    """
    sourceURL: Optional[str]
    """
    URL of the document containing the media query description.
    """
    range: Optional["SourceRange"]
    """
    The associated rule (@media or @import) header range in the enclosing stylesheet (if
available).
    """
    styleSheetId: Optional["StyleSheetId"]
    """
    Identifier of the stylesheet containing this object (if exists).
    """
    mediaList: Optional[list]
    """
    Array of media queries.
    """


class MediaQuery(BaseModel):
    """
    Media query descriptor.
    """

    expressions: list
    """
    Array of media query expressions.
    """
    active: bool
    """
    Whether the media query condition is satisfied.
    """


class MediaQueryExpression(BaseModel):
    """
    Media query expression descriptor.
    """

    value: Union[float, int]
    """
    Media query expression value.
    """
    unit: str
    """
    Media query expression units.
    """
    feature: str
    """
    Media query expression feature.
    """
    valueRange: Optional["SourceRange"]
    """
    The associated range of the value text in the enclosing stylesheet (if available).
    """
    computedLength: Optional[Union[float, int]]
    """
    Computed length of media query expression (if applicable).
    """


class CSSContainerQuery(BaseModel):
    """
    CSS container query rule descriptor.
    """

    text: str
    """
    Container query text.
    """
    range: Optional["SourceRange"]
    """
    The associated rule header range in the enclosing stylesheet (if
available).
    """
    styleSheetId: Optional["StyleSheetId"]
    """
    Identifier of the stylesheet containing this object (if exists).
    """
    name: Optional[str]
    """
    Optional name for the container.
    """
    physicalAxes: Optional[dom.PhysicalAxes]
    """
    Optional physical axes queried for the container.
    """
    logicalAxes: Optional[dom.LogicalAxes]
    """
    Optional logical axes queried for the container.
    """


class CSSSupports(BaseModel):
    """
    CSS Supports at-rule descriptor.
    """

    text: str
    """
    Supports rule text.
    """
    active: bool
    """
    Whether the supports condition is satisfied.
    """
    range: Optional["SourceRange"]
    """
    The associated rule header range in the enclosing stylesheet (if
available).
    """
    styleSheetId: Optional["StyleSheetId"]
    """
    Identifier of the stylesheet containing this object (if exists).
    """


class CSSScope(BaseModel):
    """
    CSS Scope at-rule descriptor.
    """

    text: str
    """
    Scope rule text.
    """
    range: Optional["SourceRange"]
    """
    The associated rule header range in the enclosing stylesheet (if
available).
    """
    styleSheetId: Optional["StyleSheetId"]
    """
    Identifier of the stylesheet containing this object (if exists).
    """


class CSSLayer(BaseModel):
    """
    CSS Layer at-rule descriptor.
    """

    text: str
    """
    Layer name.
    """
    range: Optional["SourceRange"]
    """
    The associated rule header range in the enclosing stylesheet (if
available).
    """
    styleSheetId: Optional["StyleSheetId"]
    """
    Identifier of the stylesheet containing this object (if exists).
    """


class CSSLayerData(BaseModel):
    """
    CSS Layer data.
    """

    name: str
    """
    Layer name.
    """
    subLayers: Optional[list]
    """
    Direct sub-layers
    """
    order: Union[float, int]
    """
    Layer order. The order determines the order of the layer in the cascade order.
A higher number has higher priority in the cascade order.
    """


class PlatformFontUsage(BaseModel):
    """
    Information about amount of glyphs that were rendered with given font.
    """

    familyName: str
    """
    Font's family name reported by platform.
    """
    postScriptName: str
    """
    Font's PostScript name reported by platform.
    """
    isCustomFont: bool
    """
    Indicates if the font was downloaded or resolved locally.
    """
    glyphCount: Union[float, int]
    """
    Amount of glyphs that were rendered with this font.
    """


class FontVariationAxis(BaseModel):
    """
    Information about font variation axes for variable fonts
    """

    tag: str
    """
    The font-variation-setting tag (a.k.a. "axis tag").
    """
    name: str
    """
    Human-readable variation name in the default language (normally, "en").
    """
    minValue: Union[float, int]
    """
    The minimum value (inclusive) the font supports for this tag.
    """
    maxValue: Union[float, int]
    """
    The maximum value (inclusive) the font supports for this tag.
    """
    defaultValue: Union[float, int]
    """
    The default value.
    """


class FontFace(BaseModel):
    """
        Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions
    and additional information such as platformFontFamily and fontVariationAxes.
    """

    fontFamily: str
    """
    The font-family.
    """
    fontStyle: str
    """
    The font-style.
    """
    fontVariant: str
    """
    The font-variant.
    """
    fontWeight: str
    """
    The font-weight.
    """
    fontStretch: str
    """
    The font-stretch.
    """
    fontDisplay: str
    """
    The font-display.
    """
    unicodeRange: str
    """
    The unicode-range.
    """
    src: str
    """
    The src.
    """
    platformFontFamily: str
    """
    The resolved platform font family
    """
    fontVariationAxes: Optional[list]
    """
    Available variation settings (a.k.a. "axes").
    """


class CSSTryRule(BaseModel):
    """
    CSS try rule representation.
    """

    styleSheetId: Optional["StyleSheetId"]
    """
    The css style sheet identifier (absent for user agent stylesheet and user-specified
stylesheet rules) this rule came from.
    """
    origin: "StyleSheetOrigin"
    """
    Parent stylesheet's origin.
    """
    style: "CSSStyle"
    """
    Associated style declaration.
    """


class CSSPositionFallbackRule(BaseModel):
    """
    CSS position-fallback rule representation.
    """

    name: "Value"
    tryRules: list
    """
    List of keyframes.
    """


class CSSPositionTryRule(BaseModel):
    """
    CSS @position-try rule representation.
    """

    name: "Value"
    """
    The prelude dashed-ident name
    """
    styleSheetId: Optional["StyleSheetId"]
    """
    The css style sheet identifier (absent for user agent stylesheet and user-specified
stylesheet rules) this rule came from.
    """
    origin: "StyleSheetOrigin"
    """
    Parent stylesheet's origin.
    """
    style: "CSSStyle"
    """
    Associated style declaration.
    """


class CSSKeyframesRule(BaseModel):
    """
    CSS keyframes rule representation.
    """

    animationName: "Value"
    """
    Animation name.
    """
    keyframes: list
    """
    List of keyframes.
    """


class CSSPropertyRegistration(BaseModel):
    """
    Representation of a custom property registration through CSS.registerProperty
    """

    propertyName: str
    initialValue: Optional["Value"]
    inherits: bool
    syntax: str


class CSSFontPaletteValuesRule(BaseModel):
    """
    CSS font-palette-values rule representation.
    """

    styleSheetId: Optional["StyleSheetId"]
    """
    The css style sheet identifier (absent for user agent stylesheet and user-specified
stylesheet rules) this rule came from.
    """
    origin: "StyleSheetOrigin"
    """
    Parent stylesheet's origin.
    """
    fontPaletteName: "Value"
    """
    Associated font palette name.
    """
    style: "CSSStyle"
    """
    Associated style declaration.
    """


class CSSPropertyRule(BaseModel):
    """
    CSS property at-rule representation.
    """

    styleSheetId: Optional["StyleSheetId"]
    """
    The css style sheet identifier (absent for user agent stylesheet and user-specified
stylesheet rules) this rule came from.
    """
    origin: "StyleSheetOrigin"
    """
    Parent stylesheet's origin.
    """
    propertyName: "Value"
    """
    Associated property name.
    """
    style: "CSSStyle"
    """
    Associated style declaration.
    """


class CSSKeyframeRule(BaseModel):
    """
    CSS keyframe rule representation.
    """

    styleSheetId: Optional["StyleSheetId"]
    """
    The css style sheet identifier (absent for user agent stylesheet and user-specified
stylesheet rules) this rule came from.
    """
    origin: "StyleSheetOrigin"
    """
    Parent stylesheet's origin.
    """
    keyText: "Value"
    """
    Associated key text.
    """
    style: "CSSStyle"
    """
    Associated style declaration.
    """


class StyleDeclarationEdit(BaseModel):
    """
    A descriptor of operation to mutate style declaration text.
    """

    styleSheetId: "StyleSheetId"
    """
    The css style sheet identifier.
    """
    range: "SourceRange"
    """
    The range of the style text in the enclosing stylesheet.
    """
    text: str
    """
    New style text.
    """
