# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.input.types import *


class dispatchDragEvent(BaseModel):
    """
    Dispatches a drag event into the page.
    """

    __domain__: str = PrivateAttr("Input")
    type: Literal["dragEnter", "dragOver", "drop", "dragCancel"]
    """
    Type of the drag event.
    """
    x: Union[float, int]
    """
    X coordinate of the event relative to the main frame's viewport in CSS pixels.
    """
    y: Union[float, int]
    """
    Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
    """
    data: "DragData"
    modifiers: Optional[Union[float, int]]
    """
    Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
(default: 0).
    """


class dispatchKeyEvent(BaseModel):
    """
    Dispatches a key event to the page.
    """

    __domain__: str = PrivateAttr("Input")
    type: Literal["keyDown", "keyUp", "rawKeyDown", "char"]
    """
    Type of the key event.
    """
    modifiers: Optional[Union[float, int]]
    """
    Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
(default: 0).
    """
    timestamp: Optional["TimeSinceEpoch"]
    """
    Time at which the event occurred.
    """
    text: Optional[str]
    """
    Text as generated by processing a virtual key code with a keyboard layout. Not needed for
for `keyUp` and `rawKeyDown` events (default: "")
    """
    unmodifiedText: Optional[str]
    """
    Text that would have been generated by the keyboard if no modifiers were pressed (except for
shift). Useful for shortcut (accelerator) key handling (default: "").
    """
    keyIdentifier: Optional[str]
    """
    Unique key identifier (e.g., 'U+0041') (default: "").
    """
    code: Optional[str]
    """
    Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
    """
    key: Optional[str]
    """
    Unique DOM defined string value describing the meaning of the key in the context of active
modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
    """
    windowsVirtualKeyCode: Optional[Union[float, int]]
    """
    Windows virtual key code (default: 0).
    """
    nativeVirtualKeyCode: Optional[Union[float, int]]
    """
    Native virtual key code (default: 0).
    """
    autoRepeat: Optional[bool]
    """
    Whether the event was generated from auto repeat (default: false).
    """
    isKeypad: Optional[bool]
    """
    Whether the event was generated from the keypad (default: false).
    """
    isSystemKey: Optional[bool]
    """
    Whether the event was a system key event (default: false).
    """
    location: Optional[Union[float, int]]
    """
    Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:
0).
    """
    commands: Optional[list]
    """
    Editing commands to send with the key event (e.g., 'selectAll') (default: []).
These are related to but not equal the command names used in `document.execCommand` and NSStandardKeyBindingResponding.
See https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names.
    """


class insertText(BaseModel):
    """
        This method emulates inserting text that doesn't come from a key press,
    for example an emoji keyboard or an IME.
    """

    __domain__: str = PrivateAttr("Input")
    text: str
    """
    The text to insert.
    """


class imeSetComposition(BaseModel):
    """
        This method sets the current candidate text for IME.
    Use imeCommitComposition to commit the final text.
    Use imeSetComposition with empty string as text to cancel composition.
    """

    __domain__: str = PrivateAttr("Input")
    text: str
    """
    The text to insert
    """
    selectionStart: Union[float, int]
    """
    selection start
    """
    selectionEnd: Union[float, int]
    """
    selection end
    """
    replacementStart: Optional[Union[float, int]]
    """
    replacement start
    """
    replacementEnd: Optional[Union[float, int]]
    """
    replacement end
    """


class dispatchMouseEvent(BaseModel):
    """
    Dispatches a mouse event to the page.
    """

    __domain__: str = PrivateAttr("Input")
    type: Literal["mousePressed", "mouseReleased", "mouseMoved", "mouseWheel"]
    """
    Type of the mouse event.
    """
    x: Union[float, int]
    """
    X coordinate of the event relative to the main frame's viewport in CSS pixels.
    """
    y: Union[float, int]
    """
    Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
    """
    modifiers: Optional[Union[float, int]]
    """
    Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
(default: 0).
    """
    timestamp: Optional["TimeSinceEpoch"]
    """
    Time at which the event occurred.
    """
    button: Optional["MouseButton"]
    """
    Mouse button (default: "none").
    """
    buttons: Optional[Union[float, int]]
    """
    A number indicating which buttons are pressed on the mouse when a mouse event is triggered.
Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.
    """
    clickCount: Optional[Union[float, int]]
    """
    Number of times the mouse button was clicked (default: 0).
    """
    force: Optional[Union[float, int]]
    """
    The normalized pressure, which has a range of [0,1] (default: 0).
    """
    tangentialPressure: Optional[Union[float, int]]
    """
    The normalized tangential pressure, which has a range of [-1,1] (default: 0).
    """
    tiltX: Optional[Union[float, int]]
    """
    The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0).
    """
    tiltY: Optional[Union[float, int]]
    """
    The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).
    """
    twist: Optional[Union[float, int]]
    """
    The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).
    """
    deltaX: Optional[Union[float, int]]
    """
    X delta in CSS pixels for mouse wheel event (default: 0).
    """
    deltaY: Optional[Union[float, int]]
    """
    Y delta in CSS pixels for mouse wheel event (default: 0).
    """
    pointerType: Optional[Literal["mouse", "pen"]]
    """
    Pointer type (default: "mouse").
    """


class dispatchTouchEvent(BaseModel):
    """
    Dispatches a touch event to the page.
    """

    __domain__: str = PrivateAttr("Input")
    type: Literal["touchStart", "touchEnd", "touchMove", "touchCancel"]
    """
    Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while
TouchStart and TouchMove must contains at least one.
    """
    touchPoints: list
    """
    Active touch points on the touch device. One event per any changed point (compared to
previous touch event in a sequence) is generated, emulating pressing/moving/releasing points
one by one.
    """
    modifiers: Optional[Union[float, int]]
    """
    Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
(default: 0).
    """
    timestamp: Optional["TimeSinceEpoch"]
    """
    Time at which the event occurred.
    """


class cancelDragging(BaseModel):
    """
    Cancels any active dragging in the page.
    """

    __domain__: str = PrivateAttr("Input")


class emulateTouchFromMouseEvent(BaseModel):
    """
    Emulates touch event from the mouse event parameters.
    """

    __domain__: str = PrivateAttr("Input")
    type: Literal["mousePressed", "mouseReleased", "mouseMoved", "mouseWheel"]
    """
    Type of the mouse event.
    """
    x: Union[float, int]
    """
    X coordinate of the mouse pointer in DIP.
    """
    y: Union[float, int]
    """
    Y coordinate of the mouse pointer in DIP.
    """
    button: "MouseButton"
    """
    Mouse button. Only "none", "left", "right" are supported.
    """
    timestamp: Optional["TimeSinceEpoch"]
    """
    Time at which the event occurred (default: current time).
    """
    deltaX: Optional[Union[float, int]]
    """
    X delta in DIP for mouse wheel event (default: 0).
    """
    deltaY: Optional[Union[float, int]]
    """
    Y delta in DIP for mouse wheel event (default: 0).
    """
    modifiers: Optional[Union[float, int]]
    """
    Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
(default: 0).
    """
    clickCount: Optional[Union[float, int]]
    """
    Number of times the mouse button was clicked (default: 0).
    """


class setIgnoreInputEvents(BaseModel):
    """
    Ignores input events (useful while auditing page).
    """

    __domain__: str = PrivateAttr("Input")
    ignore: bool
    """
    Ignores input events processing when set to true.
    """


class setInterceptDrags(BaseModel):
    """
        Prevents default drag and drop behavior and instead emits `Input.dragIntercepted` events.
    Drag and drop behavior can be directly controlled via `Input.dispatchDragEvent`.
    """

    __domain__: str = PrivateAttr("Input")
    enabled: bool


class synthesizePinchGesture(BaseModel):
    """
    Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
    """

    __domain__: str = PrivateAttr("Input")
    x: Union[float, int]
    """
    X coordinate of the start of the gesture in CSS pixels.
    """
    y: Union[float, int]
    """
    Y coordinate of the start of the gesture in CSS pixels.
    """
    scaleFactor: Union[float, int]
    """
    Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
    """
    relativeSpeed: Optional[Union[float, int]]
    """
    Relative pointer speed in pixels per second (default: 800).
    """
    gestureSourceType: Optional["GestureSourceType"]
    """
    Which type of input events to be generated (default: 'default', which queries the platform
for the preferred input type).
    """


class synthesizeScrollGesture(BaseModel):
    """
    Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
    """

    __domain__: str = PrivateAttr("Input")
    x: Union[float, int]
    """
    X coordinate of the start of the gesture in CSS pixels.
    """
    y: Union[float, int]
    """
    Y coordinate of the start of the gesture in CSS pixels.
    """
    xDistance: Optional[Union[float, int]]
    """
    The distance to scroll along the X axis (positive to scroll left).
    """
    yDistance: Optional[Union[float, int]]
    """
    The distance to scroll along the Y axis (positive to scroll up).
    """
    xOverscroll: Optional[Union[float, int]]
    """
    The number of additional pixels to scroll back along the X axis, in addition to the given
distance.
    """
    yOverscroll: Optional[Union[float, int]]
    """
    The number of additional pixels to scroll back along the Y axis, in addition to the given
distance.
    """
    preventFling: Optional[bool]
    """
    Prevent fling (default: true).
    """
    speed: Optional[Union[float, int]]
    """
    Swipe speed in pixels per second (default: 800).
    """
    gestureSourceType: Optional["GestureSourceType"]
    """
    Which type of input events to be generated (default: 'default', which queries the platform
for the preferred input type).
    """
    repeatCount: Optional[Union[float, int]]
    """
    The number of times to repeat the gesture (default: 0).
    """
    repeatDelayMs: Optional[Union[float, int]]
    """
    The number of milliseconds delay between each repeat. (default: 250).
    """
    interactionMarkerName: Optional[str]
    """
    The name of the interaction markers to generate, if not empty (default: "").
    """


class synthesizeTapGesture(BaseModel):
    """
    Synthesizes a tap gesture over a time period by issuing appropriate touch events.
    """

    __domain__: str = PrivateAttr("Input")
    x: Union[float, int]
    """
    X coordinate of the start of the gesture in CSS pixels.
    """
    y: Union[float, int]
    """
    Y coordinate of the start of the gesture in CSS pixels.
    """
    duration: Optional[Union[float, int]]
    """
    Duration between touchdown and touchup events in ms (default: 50).
    """
    tapCount: Optional[Union[float, int]]
    """
    Number of times to perform the tap (e.g. 2 for double tap, default: 1).
    """
    gestureSourceType: Optional["GestureSourceType"]
    """
    Which type of input events to be generated (default: 'default', which queries the platform
for the preferred input type).
    """
