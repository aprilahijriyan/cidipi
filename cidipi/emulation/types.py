# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Literal, Optional, Union

from pydantic import BaseModel


class ScreenOrientation(BaseModel):
    """
    Screen orientation.
    """

    type: Literal[
        "portraitPrimary", "portraitSecondary", "landscapePrimary", "landscapeSecondary"
    ]
    """
    Orientation type.
    """
    angle: Union[float, int]
    """
    Orientation angle.
    """


class DisplayFeature(BaseModel):
    orientation: Literal["vertical", "horizontal"]
    """
    Orientation of a display feature in relation to screen
    """
    offset: Union[float, int]
    """
    The offset from the screen origin in either the x (for vertical
orientation) or y (for horizontal orientation) direction.
    """
    maskLength: Union[float, int]
    """
    A display feature may mask content such that it is not physically
displayed - this length along with the offset describes this area.
A display feature that only splits content will have a 0 mask_length.
    """


class DevicePosture(BaseModel):
    type: Literal["continuous", "folded"]
    """
    Current posture of the device
    """


class MediaFeature(BaseModel):
    name: str
    value: str


class VirtualTimePolicy(str, Enum):
    """
        advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to
    allow the next delayed task (if any) to run; pause: The virtual time base may not advance;
    pauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending
    resource fetches.
    """

    advance = "advance"
    pause = "pause"
    pauseIfNetworkFetchesPending = "pauseIfNetworkFetchesPending"


class UserAgentBrandVersion(BaseModel):
    """
    Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints
    """

    brand: str
    version: str


class UserAgentMetadata(BaseModel):
    """
        Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints
    Missing optional values will be filled in by the target with what it would normally use.
    """

    brands: Optional[list]
    """
    Brands appearing in Sec-CH-UA.
    """
    fullVersionList: Optional[list]
    """
    Brands appearing in Sec-CH-UA-Full-Version-List.
    """
    fullVersion: Optional[str]
    platform: str
    platformVersion: str
    architecture: str
    model: str
    mobile: bool
    bitness: Optional[str]
    wow64: Optional[bool]


class SensorType(str, Enum):
    """
        Used to specify sensor types to emulate.
    See https://w3c.github.io/sensors/#automation for more information.
    """

    absolute_orientation = "absolute-orientation"
    accelerometer = "accelerometer"
    ambient_light = "ambient-light"
    gravity = "gravity"
    gyroscope = "gyroscope"
    linear_acceleration = "linear-acceleration"
    magnetometer = "magnetometer"
    proximity = "proximity"
    relative_orientation = "relative-orientation"


class SensorMetadata(BaseModel):
    available: Optional[bool]
    minimumFrequency: Optional[Union[float, int]]
    maximumFrequency: Optional[Union[float, int]]


class SensorReadingSingle(BaseModel):
    value: Union[float, int]


class SensorReadingXYZ(BaseModel):
    x: Union[float, int]
    y: Union[float, int]
    z: Union[float, int]


class SensorReadingQuaternion(BaseModel):
    x: Union[float, int]
    y: Union[float, int]
    z: Union[float, int]
    w: Union[float, int]


class SensorReading(BaseModel):
    single: Optional["SensorReadingSingle"]
    xyz: Optional["SensorReadingXYZ"]
    quaternion: Optional["SensorReadingQuaternion"]


class DisabledImageType(str, Enum):
    """
    Enum of image types that can be disabled.
    """

    avif = "avif"
    webp = "webp"
