# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import Literal, Optional, Union

from pydantic import BaseModel

from cidipi import network, runtime


class LogEntry(BaseModel):
    """
    Log entry.
    """

    source: Literal[
        "xml",
        "javascript",
        "network",
        "storage",
        "appcache",
        "rendering",
        "security",
        "deprecation",
        "worker",
        "violation",
        "intervention",
        "recommendation",
        "other",
    ]
    """
    Log entry source.
    """
    level: Literal["verbose", "info", "warning", "error"]
    """
    Log entry severity.
    """
    text: str
    """
    Logged text.
    """
    category: Optional[Literal["cors"]]
    timestamp: runtime.Timestamp
    """
    Timestamp when this entry was added.
    """
    url: Optional[str]
    """
    URL of the resource if known.
    """
    lineNumber: Optional[Union[float, int]]
    """
    Line number in the resource.
    """
    stackTrace: Optional[runtime.StackTrace]
    """
    JavaScript stack trace.
    """
    networkRequestId: Optional[network.RequestId]
    """
    Identifier of the network request associated with this entry.
    """
    workerId: Optional[str]
    """
    Identifier of the worker associated with this entry.
    """
    args: Optional[list]
    """
    Call arguments.
    """


class ViolationSetting(BaseModel):
    """
    Violation configuration setting.
    """

    name: Literal[
        "longTask",
        "longLayout",
        "blockedEvent",
        "blockedParser",
        "discouragedAPIUse",
        "handler",
        "recurringHandler",
    ]
    """
    Violation type.
    """
    threshold: Union[float, int]
    """
    Time threshold to trigger upon.
    """
