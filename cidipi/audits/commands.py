# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi import network
from cidipi.audits.types import *


class getEncodedResponse(BaseModel):
    """
        Returns the response body and size if it were re-encoded with the specified settings. Only
    applies to images.
    """

    __domain__: str = PrivateAttr("Audits")
    requestId: network.RequestId
    """
    Identifier of the network request to get content for.
    """
    encoding: Literal["webp", "jpeg", "png"]
    """
    The encoding to use.
    """
    quality: Optional[Union[float, int]]
    """
    The quality of the encoding (0-1). (defaults to 1)
    """
    sizeOnly: Optional[bool]
    """
    Whether to only return the size information (defaults to false).
    """


class disable(BaseModel):
    """
    Disables issues domain, prevents further issues from being reported to the client.
    """

    __domain__: str = PrivateAttr("Audits")


class enable(BaseModel):
    """
        Enables issues domain, sends the issues collected so far to the client by means of the
    `issueAdded` event.
    """

    __domain__: str = PrivateAttr("Audits")


class checkContrast(BaseModel):
    """
        Runs the contrast check for the target page. Found issues are reported
    using Audits.issueAdded event.
    """

    __domain__: str = PrivateAttr("Audits")
    reportAAA: Optional[bool]
    """
    Whether to report WCAG AAA level issues. Default is false.
    """


class checkFormsIssues(BaseModel):
    """
        Runs the form issues check for the target page. Found issues are reported
    using Audits.issueAdded event.
    """

    __domain__: str = PrivateAttr("Audits")
