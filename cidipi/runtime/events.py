# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.runtime.types import *


class bindingCalled(BaseModel):
    """
    Notification is issued every time when binding is called.
    """

    __domain__: str = PrivateAttr("Runtime")
    name: str
    payload: str
    executionContextId: "ExecutionContextId"
    """
    Identifier of the context where the call was made.
    """


class consoleAPICalled(BaseModel):
    """
    Issued when console API was called.
    """

    __domain__: str = PrivateAttr("Runtime")
    type: Literal[
        "log",
        "debug",
        "info",
        "error",
        "warning",
        "dir",
        "dirxml",
        "table",
        "trace",
        "clear",
        "startGroup",
        "startGroupCollapsed",
        "endGroup",
        "assert",
        "profile",
        "profileEnd",
        "count",
        "timeEnd",
    ]
    """
    Type of the call.
    """
    args: list
    """
    Call arguments.
    """
    executionContextId: "ExecutionContextId"
    """
    Identifier of the context where the call was made.
    """
    timestamp: "Timestamp"
    """
    Call timestamp.
    """
    stackTrace: Optional["StackTrace"]
    """
    Stack trace captured when the call was made. The async stack chain is automatically reported for
the following call types: `assert`, `error`, `trace`, `warning`. For other types the async call
chain can be retrieved using `Debugger.getStackTrace` and `stackTrace.parentId` field.
    """
    context: Optional[str]
    """
    Console context descriptor for calls on non-default console context (not console.*):
'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call
on named context.
    """


class exceptionRevoked(BaseModel):
    """
    Issued when unhandled exception was revoked.
    """

    __domain__: str = PrivateAttr("Runtime")
    reason: str
    """
    Reason describing why exception was revoked.
    """
    exceptionId: Union[float, int]
    """
    The id of revoked exception, as reported in `exceptionThrown`.
    """


class exceptionThrown(BaseModel):
    """
    Issued when exception was thrown and unhandled.
    """

    __domain__: str = PrivateAttr("Runtime")
    timestamp: "Timestamp"
    """
    Timestamp of the exception.
    """
    exceptionDetails: "ExceptionDetails"


class executionContextCreated(BaseModel):
    """
    Issued when new execution context is created.
    """

    __domain__: str = PrivateAttr("Runtime")
    context: "ExecutionContextDescription"
    """
    A newly created execution context.
    """


class executionContextDestroyed(BaseModel):
    """
    Issued when execution context is destroyed.
    """

    __domain__: str = PrivateAttr("Runtime")
    executionContextId: "ExecutionContextId"
    """
    Id of the destroyed context
    """
    executionContextUniqueId: str
    """
    Unique Id of the destroyed context
    """


class executionContextsCleared(BaseModel):
    """
    Issued when all executionContexts were cleared in browser
    """

    __domain__: str = PrivateAttr("Runtime")


class inspectRequested(BaseModel):
    """
        Issued when object should be inspected (for example, as a result of inspect() command line API
    call).
    """

    __domain__: str = PrivateAttr("Runtime")
    object: "RemoteObject"
    hints: dict
    executionContextId: Optional["ExecutionContextId"]
    """
    Identifier of the context where the call was made.
    """
