# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi import dom, runtime
from cidipi.domdebugger.types import *


class getEventListeners(BaseModel):
    """
    Returns event listeners of the given object.
    """

    __domain__: str = PrivateAttr("DOMDebugger")
    objectId: runtime.RemoteObjectId
    """
    Identifier of the object to return listeners for.
    """
    depth: Optional[Union[float, int]]
    """
    The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the
entire subtree or provide an integer larger than 0.
    """
    pierce: Optional[bool]
    """
    Whether or not iframes and shadow roots should be traversed when returning the subtree
(default is false). Reports listeners for all contexts if pierce is enabled.
    """


class removeDOMBreakpoint(BaseModel):
    """
    Removes DOM breakpoint that was set using `setDOMBreakpoint`.
    """

    __domain__: str = PrivateAttr("DOMDebugger")
    nodeId: dom.NodeId
    """
    Identifier of the node to remove breakpoint from.
    """
    type: "DOMBreakpointType"
    """
    Type of the breakpoint to remove.
    """


class removeEventListenerBreakpoint(BaseModel):
    """
    Removes breakpoint on particular DOM event.
    """

    __domain__: str = PrivateAttr("DOMDebugger")
    eventName: str
    """
    Event name.
    """
    targetName: Optional[str]
    """
    EventTarget interface name.
    """


class removeInstrumentationBreakpoint(BaseModel):
    """
    Removes breakpoint on particular native event.
    """

    __domain__: str = PrivateAttr("DOMDebugger")
    eventName: str
    """
    Instrumentation name to stop on.
    """


class removeXHRBreakpoint(BaseModel):
    """
    Removes breakpoint from XMLHttpRequest.
    """

    __domain__: str = PrivateAttr("DOMDebugger")
    url: str
    """
    Resource URL substring.
    """


class setBreakOnCSPViolation(BaseModel):
    """
    Sets breakpoint on particular CSP violations.
    """

    __domain__: str = PrivateAttr("DOMDebugger")
    violationTypes: list
    """
    CSP Violations to stop upon.
    """


class setDOMBreakpoint(BaseModel):
    """
    Sets breakpoint on particular operation with DOM.
    """

    __domain__: str = PrivateAttr("DOMDebugger")
    nodeId: dom.NodeId
    """
    Identifier of the node to set breakpoint on.
    """
    type: "DOMBreakpointType"
    """
    Type of the operation to stop upon.
    """


class setEventListenerBreakpoint(BaseModel):
    """
    Sets breakpoint on particular DOM event.
    """

    __domain__: str = PrivateAttr("DOMDebugger")
    eventName: str
    """
    DOM Event name to stop on (any DOM event will do).
    """
    targetName: Optional[str]
    """
    EventTarget interface name to stop on. If equal to `"*"` or not provided, will stop on any
EventTarget.
    """


class setInstrumentationBreakpoint(BaseModel):
    """
    Sets breakpoint on particular native event.
    """

    __domain__: str = PrivateAttr("DOMDebugger")
    eventName: str
    """
    Instrumentation name to stop on.
    """


class setXHRBreakpoint(BaseModel):
    """
    Sets breakpoint on XMLHttpRequest.
    """

    __domain__: str = PrivateAttr("DOMDebugger")
    url: str
    """
    Resource URL substring. All XHRs having this substring in the URL will get stopped upon.
    """
