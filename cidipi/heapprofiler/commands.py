# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi import runtime
from cidipi.heapprofiler.types import *


class addInspectedHeapObject(BaseModel):
    """
        Enables console to refer to the node with given id via $x (see Command Line API for more details
    $x functions).
    """

    __domain__: str = PrivateAttr("HeapProfiler")
    heapObjectId: "HeapSnapshotObjectId"
    """
    Heap snapshot object id to be accessible by means of $x command line API.
    """


class collectGarbage(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")


class disable(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")


class enable(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")


class getHeapObjectId(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")
    objectId: runtime.RemoteObjectId
    """
    Identifier of the object to get heap object id for.
    """


class getObjectByHeapObjectId(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")
    objectId: "HeapSnapshotObjectId"
    objectGroup: Optional[str]
    """
    Symbolic group name that can be used to release multiple objects.
    """


class getSamplingProfile(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")


class startSampling(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")
    samplingInterval: Optional[Union[float, int]]
    """
    Average sample interval in bytes. Poisson distribution is used for the intervals. The
default value is 32768 bytes.
    """
    includeObjectsCollectedByMajorGC: Optional[bool]
    """
    By default, the sampling heap profiler reports only objects which are
still alive when the profile is returned via getSamplingProfile or
stopSampling, which is useful for determining what functions contribute
the most to steady-state memory usage. This flag instructs the sampling
heap profiler to also include information about objects discarded by
major GC, which will show which functions cause large temporary memory
usage or long GC pauses.
    """
    includeObjectsCollectedByMinorGC: Optional[bool]
    """
    By default, the sampling heap profiler reports only objects which are
still alive when the profile is returned via getSamplingProfile or
stopSampling, which is useful for determining what functions contribute
the most to steady-state memory usage. This flag instructs the sampling
heap profiler to also include information about objects discarded by
minor GC, which is useful when tuning a latency-sensitive application
for minimal GC activity.
    """


class startTrackingHeapObjects(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")
    trackAllocations: Optional[bool]


class stopSampling(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")


class stopTrackingHeapObjects(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")
    reportProgress: Optional[bool]
    """
    If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken
when the tracking is stopped.
    """
    treatGlobalObjectsAsRoots: Optional[bool]
    """
    Deprecated in favor of `exposeInternals`.
    """
    captureNumericValue: Optional[bool]
    """
    If true, numerical values are included in the snapshot
    """
    exposeInternals: Optional[bool]
    """
    If true, exposes internals of the snapshot.
    """


class takeHeapSnapshot(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")
    reportProgress: Optional[bool]
    """
    If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.
    """
    treatGlobalObjectsAsRoots: Optional[bool]
    """
    If true, a raw snapshot without artificial roots will be generated.
Deprecated in favor of `exposeInternals`.
    """
    captureNumericValue: Optional[bool]
    """
    If true, numerical values are included in the snapshot
    """
    exposeInternals: Optional[bool]
    """
    If true, exposes internals of the snapshot.
    """
