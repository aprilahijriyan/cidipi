# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Optional, TypeVar

from pydantic import BaseModel

from cidipi.domains import dom, network

RuleSetId = TypeVar("RuleSetId", bound=str)
"""
Unique id
"""


class RuleSet(BaseModel):
    """
    Corresponds to SpeculationRuleSet
    """

    id: "RuleSetId"
    loaderId: network.LoaderId
    """
    Identifies a document which the rule set is associated with.
    """
    sourceText: str
    """
    Source text of JSON representing the rule set. If it comes from
`<script>` tag, it is the textContent of the node. Note that it is
a JSON for valid case.

See also:
- https://wicg.github.io/nav-speculation/speculation-rules.html
- https://github.com/WICG/nav-speculation/blob/main/triggers.md
    """
    backendNodeId: Optional[dom.BackendNodeId]
    """
    A speculation rule set is either added through an inline
`<script>` tag or through an external resource via the
'Speculation-Rules' HTTP header. For the first case, we include
the BackendNodeId of the relevant `<script>` tag. For the second
case, we include the external URL where the rule set was loaded
from, and also RequestId if Network domain is enabled.

See also:
- https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script
- https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header
    """
    url: Optional[str]
    requestId: Optional[network.RequestId]
    errorType: Optional["RuleSetErrorType"]
    """
    Error information
`errorMessage` is null iff `errorType` is null.
    """
    errorMessage: Optional[str]
    """
    TODO(https://crbug.com/1425354): Replace this property with structured error.
    """


class RuleSetErrorType(str, Enum):
    SourceIsNotJsonObject = "SourceIsNotJsonObject"
    InvalidRulesSkipped = "InvalidRulesSkipped"


class SpeculationAction(str, Enum):
    """
        The type of preloading attempted. It corresponds to
    mojom::SpeculationAction (although PrefetchWithSubresources is omitted as it
    isn't being used by clients).
    """

    Prefetch = "Prefetch"
    Prerender = "Prerender"


class SpeculationTargetHint(str, Enum):
    """
        Corresponds to mojom::SpeculationTargetHint.
    See https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints
    """

    Blank = "Blank"
    Self = "Self"


class PreloadingAttemptKey(BaseModel):
    """
        A key that identifies a preloading attempt.

    The url used is the url specified by the trigger (i.e. the initial URL), and
    not the final url that is navigated to. For example, prerendering allows
    same-origin main frame navigations during the attempt, but the attempt is
    still keyed with the initial URL.
    """

    loaderId: network.LoaderId
    action: "SpeculationAction"
    url: str
    targetHint: Optional["SpeculationTargetHint"]


class PreloadingAttemptSource(BaseModel):
    """
        Lists sources for a preloading attempt, specifically the ids of rule sets
    that had a speculation rule that triggered the attempt, and the
    BackendNodeIds of <a href> or <area href> elements that triggered the
    attempt (in the case of attempts triggered by a document rule). It is
    possible for multiple rule sets and links to trigger a single attempt.
    """

    key: "PreloadingAttemptKey"
    ruleSetIds: list
    nodeIds: list


class PrerenderFinalStatus(str, Enum):
    """
    List of FinalStatus reasons for Prerender2.
    """

    Activated = "Activated"
    Destroyed = "Destroyed"
    LowEndDevice = "LowEndDevice"
    InvalidSchemeRedirect = "InvalidSchemeRedirect"
    InvalidSchemeNavigation = "InvalidSchemeNavigation"
    NavigationRequestBlockedByCsp = "NavigationRequestBlockedByCsp"
    MainFrameNavigation = "MainFrameNavigation"
    MojoBinderPolicy = "MojoBinderPolicy"
    RendererProcessCrashed = "RendererProcessCrashed"
    RendererProcessKilled = "RendererProcessKilled"
    Download = "Download"
    TriggerDestroyed = "TriggerDestroyed"
    NavigationNotCommitted = "NavigationNotCommitted"
    NavigationBadHttpStatus = "NavigationBadHttpStatus"
    ClientCertRequested = "ClientCertRequested"
    NavigationRequestNetworkError = "NavigationRequestNetworkError"
    CancelAllHostsForTesting = "CancelAllHostsForTesting"
    DidFailLoad = "DidFailLoad"
    Stop = "Stop"
    SslCertificateError = "SslCertificateError"
    LoginAuthRequested = "LoginAuthRequested"
    UaChangeRequiresReload = "UaChangeRequiresReload"
    BlockedByClient = "BlockedByClient"
    AudioOutputDeviceRequested = "AudioOutputDeviceRequested"
    MixedContent = "MixedContent"
    TriggerBackgrounded = "TriggerBackgrounded"
    MemoryLimitExceeded = "MemoryLimitExceeded"
    DataSaverEnabled = "DataSaverEnabled"
    TriggerUrlHasEffectiveUrl = "TriggerUrlHasEffectiveUrl"
    ActivatedBeforeStarted = "ActivatedBeforeStarted"
    InactivePageRestriction = "InactivePageRestriction"
    StartFailed = "StartFailed"
    TimeoutBackgrounded = "TimeoutBackgrounded"
    CrossSiteRedirectInInitialNavigation = "CrossSiteRedirectInInitialNavigation"
    CrossSiteNavigationInInitialNavigation = "CrossSiteNavigationInInitialNavigation"
    SameSiteCrossOriginRedirectNotOptInInInitialNavigation = (
        "SameSiteCrossOriginRedirectNotOptInInInitialNavigation"
    )
    SameSiteCrossOriginNavigationNotOptInInInitialNavigation = (
        "SameSiteCrossOriginNavigationNotOptInInInitialNavigation"
    )
    ActivationNavigationParameterMismatch = "ActivationNavigationParameterMismatch"
    ActivatedInBackground = "ActivatedInBackground"
    EmbedderHostDisallowed = "EmbedderHostDisallowed"
    ActivationNavigationDestroyedBeforeSuccess = (
        "ActivationNavigationDestroyedBeforeSuccess"
    )
    TabClosedByUserGesture = "TabClosedByUserGesture"
    TabClosedWithoutUserGesture = "TabClosedWithoutUserGesture"
    PrimaryMainFrameRendererProcessCrashed = "PrimaryMainFrameRendererProcessCrashed"
    PrimaryMainFrameRendererProcessKilled = "PrimaryMainFrameRendererProcessKilled"
    ActivationFramePolicyNotCompatible = "ActivationFramePolicyNotCompatible"
    PreloadingDisabled = "PreloadingDisabled"
    BatterySaverEnabled = "BatterySaverEnabled"
    ActivatedDuringMainFrameNavigation = "ActivatedDuringMainFrameNavigation"
    PreloadingUnsupportedByWebContents = "PreloadingUnsupportedByWebContents"
    CrossSiteRedirectInMainFrameNavigation = "CrossSiteRedirectInMainFrameNavigation"
    CrossSiteNavigationInMainFrameNavigation = (
        "CrossSiteNavigationInMainFrameNavigation"
    )
    SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation = (
        "SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation"
    )
    SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation = (
        "SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation"
    )
    MemoryPressureOnTrigger = "MemoryPressureOnTrigger"
    MemoryPressureAfterTriggered = "MemoryPressureAfterTriggered"
    PrerenderingDisabledByDevTools = "PrerenderingDisabledByDevTools"
    SpeculationRuleRemoved = "SpeculationRuleRemoved"
    ActivatedWithAuxiliaryBrowsingContexts = "ActivatedWithAuxiliaryBrowsingContexts"
    MaxNumOfRunningEagerPrerendersExceeded = "MaxNumOfRunningEagerPrerendersExceeded"
    MaxNumOfRunningNonEagerPrerendersExceeded = (
        "MaxNumOfRunningNonEagerPrerendersExceeded"
    )
    MaxNumOfRunningEmbedderPrerendersExceeded = (
        "MaxNumOfRunningEmbedderPrerendersExceeded"
    )
    PrerenderingUrlHasEffectiveUrl = "PrerenderingUrlHasEffectiveUrl"
    RedirectedPrerenderingUrlHasEffectiveUrl = (
        "RedirectedPrerenderingUrlHasEffectiveUrl"
    )
    ActivationUrlHasEffectiveUrl = "ActivationUrlHasEffectiveUrl"
    JavaScriptInterfaceAdded = "JavaScriptInterfaceAdded"
    JavaScriptInterfaceRemoved = "JavaScriptInterfaceRemoved"
    AllPrerenderingCanceled = "AllPrerenderingCanceled"


class PreloadingStatus(str, Enum):
    """
        Preloading status values, see also PreloadingTriggeringOutcome. This
    status is shared by prefetchStatusUpdated and prerenderStatusUpdated.
    """

    Pending = "Pending"
    Running = "Running"
    Ready = "Ready"
    Success = "Success"
    Failure = "Failure"
    NotSupported = "NotSupported"


class PrefetchStatus(str, Enum):
    """
        TODO(https://crbug.com/1384419): revisit the list of PrefetchStatus and
    filter out the ones that aren't necessary to the developers.
    """

    PrefetchAllowed = "PrefetchAllowed"
    PrefetchFailedIneligibleRedirect = "PrefetchFailedIneligibleRedirect"
    PrefetchFailedInvalidRedirect = "PrefetchFailedInvalidRedirect"
    PrefetchFailedMIMENotSupported = "PrefetchFailedMIMENotSupported"
    PrefetchFailedNetError = "PrefetchFailedNetError"
    PrefetchFailedNon2XX = "PrefetchFailedNon2XX"
    PrefetchFailedPerPageLimitExceeded = "PrefetchFailedPerPageLimitExceeded"
    PrefetchEvictedAfterCandidateRemoved = "PrefetchEvictedAfterCandidateRemoved"
    PrefetchEvictedForNewerPrefetch = "PrefetchEvictedForNewerPrefetch"
    PrefetchHeldback = "PrefetchHeldback"
    PrefetchIneligibleRetryAfter = "PrefetchIneligibleRetryAfter"
    PrefetchIsPrivacyDecoy = "PrefetchIsPrivacyDecoy"
    PrefetchIsStale = "PrefetchIsStale"
    PrefetchNotEligibleBrowserContextOffTheRecord = (
        "PrefetchNotEligibleBrowserContextOffTheRecord"
    )
    PrefetchNotEligibleDataSaverEnabled = "PrefetchNotEligibleDataSaverEnabled"
    PrefetchNotEligibleExistingProxy = "PrefetchNotEligibleExistingProxy"
    PrefetchNotEligibleHostIsNonUnique = "PrefetchNotEligibleHostIsNonUnique"
    PrefetchNotEligibleNonDefaultStoragePartition = (
        "PrefetchNotEligibleNonDefaultStoragePartition"
    )
    PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy = (
        "PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy"
    )
    PrefetchNotEligibleSchemeIsNotHttps = "PrefetchNotEligibleSchemeIsNotHttps"
    PrefetchNotEligibleUserHasCookies = "PrefetchNotEligibleUserHasCookies"
    PrefetchNotEligibleUserHasServiceWorker = "PrefetchNotEligibleUserHasServiceWorker"
    PrefetchNotEligibleBatterySaverEnabled = "PrefetchNotEligibleBatterySaverEnabled"
    PrefetchNotEligiblePreloadingDisabled = "PrefetchNotEligiblePreloadingDisabled"
    PrefetchNotFinishedInTime = "PrefetchNotFinishedInTime"
    PrefetchNotStarted = "PrefetchNotStarted"
    PrefetchNotUsedCookiesChanged = "PrefetchNotUsedCookiesChanged"
    PrefetchProxyNotAvailable = "PrefetchProxyNotAvailable"
    PrefetchResponseUsed = "PrefetchResponseUsed"
    PrefetchSuccessfulButNotUsed = "PrefetchSuccessfulButNotUsed"
    PrefetchNotUsedProbeFailed = "PrefetchNotUsedProbeFailed"


class PrerenderMismatchedHeaders(BaseModel):
    """
    Information of headers to be displayed when the header mismatch occurred.
    """

    headerName: str
    initialValue: Optional[str]
    activationValue: Optional[str]
