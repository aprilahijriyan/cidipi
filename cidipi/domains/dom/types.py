# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Optional, TypeVar, Union

from pydantic import BaseModel

from cidipi.domains import page

NodeId = TypeVar("NodeId", bound=Union[float, int])
"""
Unique DOM node identifier.
"""

BackendNodeId = TypeVar("BackendNodeId", bound=Union[float, int])
"""
Unique DOM node identifier used to reference a node that may not have been pushed to the
front-end.
"""


class BackendNode(BaseModel):
    """
    Backend node with a friendly name.
    """

    nodeType: Union[float, int]
    """
    `Node`'s nodeType.
    """
    nodeName: str
    """
    `Node`'s nodeName.
    """
    backendNodeId: "BackendNodeId"


class PseudoType(str, Enum):
    """
    Pseudo element type.
    """

    first_line = "first-line"
    first_letter = "first-letter"
    before = "before"
    after = "after"
    marker = "marker"
    backdrop = "backdrop"
    selection = "selection"
    search_text = "search-text"
    target_text = "target-text"
    spelling_error = "spelling-error"
    grammar_error = "grammar-error"
    highlight = "highlight"
    first_line_inherited = "first-line-inherited"
    scroll_marker = "scroll-marker"
    scroll_marker_group = "scroll-marker-group"
    scrollbar = "scrollbar"
    scrollbar_thumb = "scrollbar-thumb"
    scrollbar_button = "scrollbar-button"
    scrollbar_track = "scrollbar-track"
    scrollbar_track_piece = "scrollbar-track-piece"
    scrollbar_corner = "scrollbar-corner"
    resizer = "resizer"
    input_list_button = "input-list-button"
    view_transition = "view-transition"
    view_transition_group = "view-transition-group"
    view_transition_image_pair = "view-transition-image-pair"
    view_transition_old = "view-transition-old"
    view_transition_new = "view-transition-new"


class ShadowRootType(str, Enum):
    """
    Shadow root type.
    """

    user_agent = "user-agent"
    open = "open"
    closed = "closed"


class CompatibilityMode(str, Enum):
    """
    Document compatibility mode.
    """

    QuirksMode = "QuirksMode"
    LimitedQuirksMode = "LimitedQuirksMode"
    NoQuirksMode = "NoQuirksMode"


class PhysicalAxes(str, Enum):
    """
    ContainerSelector physical axes
    """

    Horizontal = "Horizontal"
    Vertical = "Vertical"
    Both = "Both"


class LogicalAxes(str, Enum):
    """
    ContainerSelector logical axes
    """

    Inline = "Inline"
    Block = "Block"
    Both = "Both"


class ScrollOrientation(str, Enum):
    """
    Physical scroll orientation
    """

    horizontal = "horizontal"
    vertical = "vertical"


class Node(BaseModel):
    """
        DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.
    DOMNode is a base node mirror type.
    """

    nodeId: "NodeId"
    """
    Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend
will only push node with given `id` once. It is aware of all requested nodes and will only
fire DOM events for nodes known to the client.
    """
    parentId: Optional["NodeId"]
    """
    The id of the parent node if any.
    """
    backendNodeId: "BackendNodeId"
    """
    The BackendNodeId for this node.
    """
    nodeType: Union[float, int]
    """
    `Node`'s nodeType.
    """
    nodeName: str
    """
    `Node`'s nodeName.
    """
    localName: str
    """
    `Node`'s localName.
    """
    nodeValue: str
    """
    `Node`'s nodeValue.
    """
    childNodeCount: Optional[Union[float, int]]
    """
    Child count for `Container` nodes.
    """
    children: Optional[list]
    """
    Child nodes of this node when requested with children.
    """
    attributes: Optional[list]
    """
    Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`.
    """
    documentURL: Optional[str]
    """
    Document URL that `Document` or `FrameOwner` node points to.
    """
    baseURL: Optional[str]
    """
    Base URL that `Document` or `FrameOwner` node uses for URL completion.
    """
    publicId: Optional[str]
    """
    `DocumentType`'s publicId.
    """
    systemId: Optional[str]
    """
    `DocumentType`'s systemId.
    """
    internalSubset: Optional[str]
    """
    `DocumentType`'s internalSubset.
    """
    xmlVersion: Optional[str]
    """
    `Document`'s XML version in case of XML documents.
    """
    name: Optional[str]
    """
    `Attr`'s name.
    """
    value: Optional[str]
    """
    `Attr`'s value.
    """
    pseudoType: Optional["PseudoType"]
    """
    Pseudo element type for this node.
    """
    pseudoIdentifier: Optional[str]
    """
    Pseudo element identifier for this node. Only present if there is a
valid pseudoType.
    """
    shadowRootType: Optional["ShadowRootType"]
    """
    Shadow root type.
    """
    frameId: Optional[page.FrameId]
    """
    Frame ID for frame owner elements.
    """
    contentDocument: Optional["Node"]
    """
    Content document for frame owner elements.
    """
    shadowRoots: Optional[list]
    """
    Shadow root list for given element host.
    """
    templateContent: Optional["Node"]
    """
    Content document fragment for template elements.
    """
    pseudoElements: Optional[list]
    """
    Pseudo elements associated with this node.
    """
    importedDocument: Optional["Node"]
    """
    Deprecated, as the HTML Imports API has been removed (crbug.com/937746).
This property used to return the imported document for the HTMLImport links.
The property is always undefined now.
    """
    distributedNodes: Optional[list]
    """
    Distributed nodes for given insertion point.
    """
    isSVG: Optional[bool]
    """
    Whether the node is SVG.
    """
    compatibilityMode: Optional["CompatibilityMode"]
    assignedSlot: Optional["BackendNode"]


class RGBA(BaseModel):
    """
    A structure holding an RGBA color.
    """

    r: Union[float, int]
    """
    The red component, in the [0-255] range.
    """
    g: Union[float, int]
    """
    The green component, in the [0-255] range.
    """
    b: Union[float, int]
    """
    The blue component, in the [0-255] range.
    """
    a: Optional[Union[float, int]]
    """
    The alpha component, in the [0-1] range (default: 1).
    """


Quad = TypeVar("Quad", bound=list)
"""
An array of quad vertices, x immediately followed by y for each point, points clock-wise.
"""


class BoxModel(BaseModel):
    """
    Box model.
    """

    content: "Quad"
    """
    Content box
    """
    padding: "Quad"
    """
    Padding box
    """
    border: "Quad"
    """
    Border box
    """
    margin: "Quad"
    """
    Margin box
    """
    width: Union[float, int]
    """
    Node width
    """
    height: Union[float, int]
    """
    Node height
    """
    shapeOutside: Optional["ShapeOutsideInfo"]
    """
    Shape outside coordinates
    """


class ShapeOutsideInfo(BaseModel):
    """
    CSS Shape Outside details.
    """

    bounds: "Quad"
    """
    Shape bounds
    """
    shape: list
    """
    Shape coordinate details
    """
    marginShape: list
    """
    Margin shape bounds
    """


class Rect(BaseModel):
    """
    Rectangle.
    """

    x: Union[float, int]
    """
    X coordinate
    """
    y: Union[float, int]
    """
    Y coordinate
    """
    width: Union[float, int]
    """
    Rectangle width
    """
    height: Union[float, int]
    """
    Rectangle height
    """


class CSSComputedStyleProperty(BaseModel):
    name: str
    """
    Computed style property name.
    """
    value: str
    """
    Computed style property value.
    """
