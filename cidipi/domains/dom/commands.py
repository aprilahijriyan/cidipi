# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.domains import dom, page, runtime
from cidipi.domains.dom.types import *


class collectClassNamesFromSubtree(BaseModel):
    """
    Collects class names for the node with given id and all of it's child nodes.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node to collect class names.
    """


class copyTo(BaseModel):
    """
        Creates a deep copy of the specified node and places it into the target container before the
    given anchor.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node to copy.
    """
    targetNodeId: "NodeId"
    """
    Id of the element to drop the copy into.
    """
    insertBeforeNodeId: Optional["NodeId"]
    """
    Drop the copy before this node (if absent, the copy becomes the last child of
`targetNodeId`).
    """


class describeNode(BaseModel):
    """
        Describes node given its id, does not require domain to be enabled. Does not start tracking any
    objects, can be used for automation.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: Optional["NodeId"]
    """
    Identifier of the node.
    """
    backendNodeId: Optional["BackendNodeId"]
    """
    Identifier of the backend node.
    """
    objectId: Optional[runtime.RemoteObjectId]
    """
    JavaScript object id of the node wrapper.
    """
    depth: Optional[Union[float, int]]
    """
    The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
entire subtree or provide an integer larger than 0.
    """
    pierce: Optional[bool]
    """
    Whether or not iframes and shadow roots should be traversed when returning the subtree
(default is false).
    """


class scrollIntoViewIfNeeded(BaseModel):
    """
        Scrolls the specified rect of the given node into view if not already visible.
    Note: exactly one between nodeId, backendNodeId and objectId should be passed
    to identify the node.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: Optional["NodeId"]
    """
    Identifier of the node.
    """
    backendNodeId: Optional["BackendNodeId"]
    """
    Identifier of the backend node.
    """
    objectId: Optional[runtime.RemoteObjectId]
    """
    JavaScript object id of the node wrapper.
    """
    rect: Optional["Rect"]
    """
    The rect to be scrolled into view, relative to the node's border box, in CSS pixels.
When omitted, center of the node will be used, similar to Element.scrollIntoView.
    """


class disable(BaseModel):
    """
    Disables DOM agent for the given page.
    """

    __domain__: str = PrivateAttr("DOM")


class discardSearchResults(BaseModel):
    """
        Discards search results from the session with the given id. `getSearchResults` should no longer
    be called for that search.
    """

    __domain__: str = PrivateAttr("DOM")
    searchId: str
    """
    Unique search session identifier.
    """


class enable(BaseModel):
    """
    Enables DOM agent for the given page.
    """

    __domain__: str = PrivateAttr("DOM")
    includeWhitespace: Optional[Literal["none", "all"]]
    """
    Whether to include whitespaces in the children array of returned Nodes.
    """


class focus(BaseModel):
    """
    Focuses the given element.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: Optional["NodeId"]
    """
    Identifier of the node.
    """
    backendNodeId: Optional["BackendNodeId"]
    """
    Identifier of the backend node.
    """
    objectId: Optional[runtime.RemoteObjectId]
    """
    JavaScript object id of the node wrapper.
    """


class getAttributes(BaseModel):
    """
    Returns attributes for the specified node.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node to retrieve attributes for.
    """


class getBoxModel(BaseModel):
    """
    Returns boxes for the given node.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: Optional["NodeId"]
    """
    Identifier of the node.
    """
    backendNodeId: Optional["BackendNodeId"]
    """
    Identifier of the backend node.
    """
    objectId: Optional[runtime.RemoteObjectId]
    """
    JavaScript object id of the node wrapper.
    """


class getContentQuads(BaseModel):
    """
        Returns quads that describe node position on the page. This method
    might return multiple quads for inline nodes.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: Optional["NodeId"]
    """
    Identifier of the node.
    """
    backendNodeId: Optional["BackendNodeId"]
    """
    Identifier of the backend node.
    """
    objectId: Optional[runtime.RemoteObjectId]
    """
    JavaScript object id of the node wrapper.
    """


class getDocument(BaseModel):
    """
        Returns the root DOM node (and optionally the subtree) to the caller.
    Implicitly enables the DOM domain events for the current target.
    """

    __domain__: str = PrivateAttr("DOM")
    depth: Optional[Union[float, int]]
    """
    The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
entire subtree or provide an integer larger than 0.
    """
    pierce: Optional[bool]
    """
    Whether or not iframes and shadow roots should be traversed when returning the subtree
(default is false).
    """


class getFlattenedDocument(BaseModel):
    """
        Returns the root DOM node (and optionally the subtree) to the caller.
    Deprecated, as it is not designed to work well with the rest of the DOM agent.
    Use DOMSnapshot.captureSnapshot instead.
    """

    __domain__: str = PrivateAttr("DOM")
    depth: Optional[Union[float, int]]
    """
    The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
entire subtree or provide an integer larger than 0.
    """
    pierce: Optional[bool]
    """
    Whether or not iframes and shadow roots should be traversed when returning the subtree
(default is false).
    """


class getNodesForSubtreeByStyle(BaseModel):
    """
    Finds nodes with a given computed style in a subtree.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Node ID pointing to the root of a subtree.
    """
    computedStyles: list
    """
    The style to filter nodes by (includes nodes if any of properties matches).
    """
    pierce: Optional[bool]
    """
    Whether or not iframes and shadow roots in the same target should be traversed when returning the
results (default is false).
    """


class getNodeForLocation(BaseModel):
    """
        Returns node id at given location. Depending on whether DOM domain is enabled, nodeId is
    either returned or not.
    """

    __domain__: str = PrivateAttr("DOM")
    x: Union[float, int]
    """
    X coordinate.
    """
    y: Union[float, int]
    """
    Y coordinate.
    """
    includeUserAgentShadowDOM: Optional[bool]
    """
    False to skip to the nearest non-UA shadow root ancestor (default: false).
    """
    ignorePointerEventsNone: Optional[bool]
    """
    Whether to ignore pointer-events: none on elements and hit test them.
    """


class getOuterHTML(BaseModel):
    """
    Returns node's HTML markup.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: Optional["NodeId"]
    """
    Identifier of the node.
    """
    backendNodeId: Optional["BackendNodeId"]
    """
    Identifier of the backend node.
    """
    objectId: Optional[runtime.RemoteObjectId]
    """
    JavaScript object id of the node wrapper.
    """


class getRelayoutBoundary(BaseModel):
    """
    Returns the id of the nearest ancestor that is a relayout boundary.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node.
    """


class getSearchResults(BaseModel):
    """
        Returns search results from given `fromIndex` to given `toIndex` from the search with the given
    identifier.
    """

    __domain__: str = PrivateAttr("DOM")
    searchId: str
    """
    Unique search session identifier.
    """
    fromIndex: Union[float, int]
    """
    Start index of the search result to be returned.
    """
    toIndex: Union[float, int]
    """
    End index of the search result to be returned.
    """


class hideHighlight(BaseModel):
    """
    Hides any highlight.
    """

    __domain__: str = PrivateAttr("DOM")


class highlightNode(BaseModel):
    """
    Highlights DOM node.
    """

    __domain__: str = PrivateAttr("DOM")


class highlightRect(BaseModel):
    """
    Highlights given rectangle.
    """

    __domain__: str = PrivateAttr("DOM")


class markUndoableState(BaseModel):
    """
    Marks last undoable state.
    """

    __domain__: str = PrivateAttr("DOM")


class moveTo(BaseModel):
    """
    Moves node into the new container, places it before the given anchor.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node to move.
    """
    targetNodeId: "NodeId"
    """
    Id of the element to drop the moved node into.
    """
    insertBeforeNodeId: Optional["NodeId"]
    """
    Drop node before this one (if absent, the moved node becomes the last child of
`targetNodeId`).
    """


class performSearch(BaseModel):
    """
        Searches for a given string in the DOM tree. Use `getSearchResults` to access search results or
    `cancelSearch` to end this search session.
    """

    __domain__: str = PrivateAttr("DOM")
    query: str
    """
    Plain text or query selector or XPath search query.
    """
    includeUserAgentShadowDOM: Optional[bool]
    """
    True to search in user agent shadow DOM.
    """


class pushNodeByPathToFrontend(BaseModel):
    """
    Requests that the node is sent to the caller given its path. // FIXME, use XPath
    """

    __domain__: str = PrivateAttr("DOM")
    path: str
    """
    Path to node in the proprietary format.
    """


class pushNodesByBackendIdsToFrontend(BaseModel):
    """
    Requests that a batch of nodes is sent to the caller given their backend node ids.
    """

    __domain__: str = PrivateAttr("DOM")
    backendNodeIds: list
    """
    The array of backend node ids.
    """


class querySelector(BaseModel):
    """
    Executes `querySelector` on a given node.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node to query upon.
    """
    selector: str
    """
    Selector string.
    """


class querySelectorAll(BaseModel):
    """
    Executes `querySelectorAll` on a given node.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node to query upon.
    """
    selector: str
    """
    Selector string.
    """


class getTopLayerElements(BaseModel):
    """
        Returns NodeIds of current top layer elements.
    Top layer is rendered closest to the user within a viewport, therefore its elements always
    appear on top of all other content.
    """

    __domain__: str = PrivateAttr("DOM")


class getElementByRelation(BaseModel):
    """
    Returns the NodeId of the matched element according to certain relations.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node from which to query the relation.
    """
    relation: Literal["PopoverTarget"]
    """
    Type of relation to get.
    """


class redo(BaseModel):
    """
    Re-does the last undone action.
    """

    __domain__: str = PrivateAttr("DOM")


class removeAttribute(BaseModel):
    """
    Removes attribute with given name from an element with given id.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the element to remove attribute from.
    """
    name: str
    """
    Name of the attribute to remove.
    """


class removeNode(BaseModel):
    """
    Removes node with given id.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node to remove.
    """


class requestChildNodes(BaseModel):
    """
        Requests that children of the node with given id are returned to the caller in form of
    `setChildNodes` events where not only immediate children are retrieved, but all children down to
    the specified depth.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node to get children for.
    """
    depth: Optional[Union[float, int]]
    """
    The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
entire subtree or provide an integer larger than 0.
    """
    pierce: Optional[bool]
    """
    Whether or not iframes and shadow roots should be traversed when returning the sub-tree
(default is false).
    """


class requestNode(BaseModel):
    """
        Requests that the node is sent to the caller given the JavaScript node object reference. All
    nodes that form the path from the node to the root are also sent to the client as a series of
    `setChildNodes` notifications.
    """

    __domain__: str = PrivateAttr("DOM")
    objectId: runtime.RemoteObjectId
    """
    JavaScript object id to convert into node.
    """


class resolveNode(BaseModel):
    """
    Resolves the JavaScript node object for a given NodeId or BackendNodeId.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: Optional["NodeId"]
    """
    Id of the node to resolve.
    """
    backendNodeId: Optional[dom.BackendNodeId]
    """
    Backend identifier of the node to resolve.
    """
    objectGroup: Optional[str]
    """
    Symbolic group name that can be used to release multiple objects.
    """
    executionContextId: Optional[runtime.ExecutionContextId]
    """
    Execution context in which to resolve the node.
    """


class setAttributeValue(BaseModel):
    """
    Sets attribute for an element with given id.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the element to set attribute for.
    """
    name: str
    """
    Attribute name.
    """
    value: str
    """
    Attribute value.
    """


class setAttributesAsText(BaseModel):
    """
        Sets attributes on element with given id. This method is useful when user edits some existing
    attribute value and types in several attribute name/value pairs.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the element to set attributes for.
    """
    text: str
    """
    Text with a number of attributes. Will parse this text using HTML parser.
    """
    name: Optional[str]
    """
    Attribute name to replace with new attributes derived from text in case text parsed
successfully.
    """


class setFileInputFiles(BaseModel):
    """
    Sets files for the given file input element.
    """

    __domain__: str = PrivateAttr("DOM")
    files: list
    """
    Array of file paths to set.
    """
    nodeId: Optional["NodeId"]
    """
    Identifier of the node.
    """
    backendNodeId: Optional["BackendNodeId"]
    """
    Identifier of the backend node.
    """
    objectId: Optional[runtime.RemoteObjectId]
    """
    JavaScript object id of the node wrapper.
    """


class setNodeStackTracesEnabled(BaseModel):
    """
    Sets if stack traces should be captured for Nodes. See `Node.getNodeStackTraces`. Default is disabled.
    """

    __domain__: str = PrivateAttr("DOM")
    enable: bool
    """
    Enable or disable.
    """


class getNodeStackTraces(BaseModel):
    """
    Gets stack traces associated with a Node. As of now, only provides stack trace for Node creation.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node to get stack traces for.
    """


class getFileInfo(BaseModel):
    """
        Returns file information for the given
    File wrapper.
    """

    __domain__: str = PrivateAttr("DOM")
    objectId: runtime.RemoteObjectId
    """
    JavaScript object id of the node wrapper.
    """


class setInspectedNode(BaseModel):
    """
        Enables console to refer to the node with given id via $x (see Command Line API for more details
    $x functions).
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    DOM node id to be accessible by means of $x command line API.
    """


class setNodeName(BaseModel):
    """
    Sets node name for a node with given id.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node to set name for.
    """
    name: str
    """
    New node's name.
    """


class setNodeValue(BaseModel):
    """
    Sets node value for a node with given id.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node to set value for.
    """
    value: str
    """
    New node's value.
    """


class setOuterHTML(BaseModel):
    """
    Sets node HTML markup, returns new node id.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the node to set markup for.
    """
    outerHTML: str
    """
    Outer HTML markup to set.
    """


class undo(BaseModel):
    """
    Undoes the last performed action.
    """

    __domain__: str = PrivateAttr("DOM")


class getFrameOwner(BaseModel):
    """
    Returns iframe node that owns iframe with the given domain.
    """

    __domain__: str = PrivateAttr("DOM")
    frameId: page.FrameId


class getContainerForNode(BaseModel):
    """
        Returns the query container of the given node based on container query
    conditions: containerName, physical, and logical axes. If no axes are
    provided, the style container is returned, which is the direct parent or the
    closest element with a matching container-name.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    containerName: Optional[str]
    physicalAxes: Optional["PhysicalAxes"]
    logicalAxes: Optional["LogicalAxes"]


class getQueryingDescendantsForContainer(BaseModel):
    """
        Returns the descendants of a container query container that have
    container queries against this container.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the container node to find querying descendants from.
    """


class getAnchorElement(BaseModel):
    """
        Returns the target anchor element of the given anchor query according to
    https://www.w3.org/TR/css-anchor-position-1/#target.
    """

    __domain__: str = PrivateAttr("DOM")
    nodeId: "NodeId"
    """
    Id of the positioned element from which to find the anchor.
    """
    anchorSpecifier: Optional[str]
    """
    An optional anchor specifier, as defined in
https://www.w3.org/TR/css-anchor-position-1/#anchor-specifier.
If not provided, it will return the implicit anchor element for
the given positioned element.
    """
