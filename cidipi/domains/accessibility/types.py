# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Any, Optional, TypeVar

from pydantic import BaseModel

from cidipi.domains import dom, page

AXNodeId = TypeVar("AXNodeId", bound=str)
"""
Unique accessibility node identifier.
"""


class AXValueType(str, Enum):
    """
    Enum of possible property types.
    """

    boolean = "boolean"
    tristate = "tristate"
    booleanOrUndefined = "booleanOrUndefined"
    idref = "idref"
    idrefList = "idrefList"
    integer = "integer"
    node = "node"
    nodeList = "nodeList"
    number = "number"
    string = "string"
    computedString = "computedString"
    token = "token"
    tokenList = "tokenList"
    domRelation = "domRelation"
    role = "role"
    internalRole = "internalRole"
    valueUndefined = "valueUndefined"


class AXValueSourceType(str, Enum):
    """
    Enum of possible property sources.
    """

    attribute = "attribute"
    implicit = "implicit"
    style = "style"
    contents = "contents"
    placeholder = "placeholder"
    relatedElement = "relatedElement"


class AXValueNativeSourceType(str, Enum):
    """
    Enum of possible native property sources (as a subtype of a particular AXValueSourceType).
    """

    description = "description"
    figcaption = "figcaption"
    label = "label"
    labelfor = "labelfor"
    labelwrapped = "labelwrapped"
    legend = "legend"
    rubyannotation = "rubyannotation"
    tablecaption = "tablecaption"
    title = "title"
    other = "other"


class AXValueSource(BaseModel):
    """
    A single source for a computed AX property.
    """

    type: "AXValueSourceType"
    """
    What type of source this is.
    """
    value: Optional["AXValue"]
    """
    The value of this property source.
    """
    attribute: Optional[str]
    """
    The name of the relevant attribute, if any.
    """
    attributeValue: Optional["AXValue"]
    """
    The value of the relevant attribute, if any.
    """
    superseded: Optional[bool]
    """
    Whether this source is superseded by a higher priority source.
    """
    nativeSource: Optional["AXValueNativeSourceType"]
    """
    The native markup source for this value, e.g. a `<label>` element.
    """
    nativeSourceValue: Optional["AXValue"]
    """
    The value, such as a node or node list, of the native source.
    """
    invalid: Optional[bool]
    """
    Whether the value for this property is invalid.
    """
    invalidReason: Optional[str]
    """
    Reason for the value being invalid, if it is.
    """


class AXRelatedNode(BaseModel):
    backendDOMNodeId: dom.BackendNodeId
    """
    The BackendNodeId of the related DOM node.
    """
    idref: Optional[str]
    """
    The IDRef value provided, if any.
    """
    text: Optional[str]
    """
    The text alternative of this node in the current context.
    """


class AXProperty(BaseModel):
    name: "AXPropertyName"
    """
    The name of this property.
    """
    value: "AXValue"
    """
    The value of this property.
    """


class AXValue(BaseModel):
    """
    A single computed AX property.
    """

    type: "AXValueType"
    """
    The type of this value.
    """
    value: Optional[Any]
    """
    The computed value of this property.
    """
    relatedNodes: Optional[list]
    """
    One or more related nodes, if applicable.
    """
    sources: Optional[list]
    """
    The sources which contributed to the computation of this property.
    """


class AXPropertyName(str, Enum):
    """
        Values of AXProperty name:
    - from 'busy' to 'roledescription': states which apply to every AX node
    - from 'live' to 'root': attributes which apply to nodes in live regions
    - from 'autocomplete' to 'valuetext': attributes which apply to widgets
    - from 'checked' to 'selected': states which apply to widgets
    - from 'activedescendant' to 'owns' - relationships between elements other than parent/child/sibling.
    """

    busy = "busy"
    disabled = "disabled"
    editable = "editable"
    focusable = "focusable"
    focused = "focused"
    hidden = "hidden"
    hiddenRoot = "hiddenRoot"
    invalid = "invalid"
    keyshortcuts = "keyshortcuts"
    settable = "settable"
    roledescription = "roledescription"
    live = "live"
    atomic = "atomic"
    relevant = "relevant"
    root = "root"
    autocomplete = "autocomplete"
    hasPopup = "hasPopup"
    level = "level"
    multiselectable = "multiselectable"
    orientation = "orientation"
    multiline = "multiline"
    readonly = "readonly"
    required = "required"
    valuemin = "valuemin"
    valuemax = "valuemax"
    valuetext = "valuetext"
    checked = "checked"
    expanded = "expanded"
    modal = "modal"
    pressed = "pressed"
    selected = "selected"
    activedescendant = "activedescendant"
    controls = "controls"
    describedby = "describedby"
    details = "details"
    errormessage = "errormessage"
    flowto = "flowto"
    labelledby = "labelledby"
    owns = "owns"
    url = "url"


class AXNode(BaseModel):
    """
    A node in the accessibility tree.
    """

    nodeId: "AXNodeId"
    """
    Unique identifier for this node.
    """
    ignored: bool
    """
    Whether this node is ignored for accessibility
    """
    ignoredReasons: Optional[list]
    """
    Collection of reasons why this node is hidden.
    """
    role: Optional["AXValue"]
    """
    This `Node`'s role, whether explicit or implicit.
    """
    chromeRole: Optional["AXValue"]
    """
    This `Node`'s Chrome raw role.
    """
    name: Optional["AXValue"]
    """
    The accessible name for this `Node`.
    """
    description: Optional["AXValue"]
    """
    The accessible description for this `Node`.
    """
    value: Optional["AXValue"]
    """
    The value for this `Node`.
    """
    properties: Optional[list]
    """
    All other properties
    """
    parentId: Optional["AXNodeId"]
    """
    ID for this node's parent.
    """
    childIds: Optional[list]
    """
    IDs for each of this node's child nodes.
    """
    backendDOMNodeId: Optional[dom.BackendNodeId]
    """
    The backend ID for the associated DOM node, if any.
    """
    frameId: Optional[page.FrameId]
    """
    The frame ID for the frame associated with this nodes document.
    """
