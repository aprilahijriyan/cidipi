# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Literal, Optional, TypeVar, Union

from pydantic import BaseModel

MemoryDumpConfig = TypeVar("MemoryDumpConfig", bound=dict)
"""
Configuration for memory dump. Used only when "memory-infra" category is enabled.
"""


class TraceConfig(BaseModel):
    recordMode: Optional[
        Literal[
            "recordUntilFull",
            "recordContinuously",
            "recordAsMuchAsPossible",
            "echoToConsole",
        ]
    ]
    """
    Controls how the trace buffer stores data.
    """
    traceBufferSizeInKb: Optional[Union[float, int]]
    """
    Size of the trace buffer in kilobytes. If not specified or zero is passed, a default value
of 200 MB would be used.
    """
    enableSampling: Optional[bool]
    """
    Turns on JavaScript stack sampling.
    """
    enableSystrace: Optional[bool]
    """
    Turns on system tracing.
    """
    enableArgumentFilter: Optional[bool]
    """
    Turns on argument filter.
    """
    includedCategories: Optional[list]
    """
    Included category filters.
    """
    excludedCategories: Optional[list]
    """
    Excluded category filters.
    """
    syntheticDelays: Optional[list]
    """
    Configuration to synthesize the delays in tracing.
    """
    memoryDumpConfig: Optional["MemoryDumpConfig"]
    """
    Configuration for memory dump triggers. Used only when "memory-infra" category is enabled.
    """


class StreamFormat(str, Enum):
    """
        Data format of a trace. Can be either the legacy JSON format or the
    protocol buffer format. Note that the JSON format will be deprecated soon.
    """

    json = "json"
    proto = "proto"


class StreamCompression(str, Enum):
    """
    Compression type to use for traces returned via streams.
    """

    none = "none"
    gzip = "gzip"


class MemoryDumpLevelOfDetail(str, Enum):
    """
        Details exposed when memory request explicitly declared.
    Keep consistent with memory_dump_request_args.h and
    memory_instrumentation.mojom
    """

    background = "background"
    light = "light"
    detailed = "detailed"


class TracingBackend(str, Enum):
    """
        Backend type to use for tracing. `chrome` uses the Chrome-integrated
    tracing service and is supported on all platforms. `system` is only
    supported on Chrome OS and uses the Perfetto system tracing service.
    `auto` chooses `system` when the perfettoConfig provided to Tracing.start
    specifies at least one non-Chrome data source; otherwise uses `chrome`.
    """

    auto = "auto"
    chrome = "chrome"
    system = "system"
