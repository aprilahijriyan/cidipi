# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.domains.webauthn.types import *


class enable(BaseModel):
    """
        Enable the WebAuthn domain and start intercepting credential storage and
    retrieval with a virtual authenticator.
    """

    __domain__: str = PrivateAttr("WebAuthn")
    enableUI: Optional[bool]
    """
    Whether to enable the WebAuthn user interface. Enabling the UI is
recommended for debugging and demo purposes, as it is closer to the real
experience. Disabling the UI is recommended for automated testing.
Supported at the embedder's discretion if UI is available.
Defaults to false.
    """


class disable(BaseModel):
    """
    Disable the WebAuthn domain.
    """

    __domain__: str = PrivateAttr("WebAuthn")


class addVirtualAuthenticator(BaseModel):
    """
    Creates and adds a virtual authenticator.
    """

    __domain__: str = PrivateAttr("WebAuthn")
    options: "VirtualAuthenticatorOptions"


class setResponseOverrideBits(BaseModel):
    """
    Resets parameters isBogusSignature, isBadUV, isBadUP to false if they are not present.
    """

    __domain__: str = PrivateAttr("WebAuthn")
    authenticatorId: "AuthenticatorId"
    isBogusSignature: Optional[bool]
    """
    If isBogusSignature is set, overrides the signature in the authenticator response to be zero.
Defaults to false.
    """
    isBadUV: Optional[bool]
    """
    If isBadUV is set, overrides the UV bit in the flags in the authenticator response to
be zero. Defaults to false.
    """
    isBadUP: Optional[bool]
    """
    If isBadUP is set, overrides the UP bit in the flags in the authenticator response to
be zero. Defaults to false.
    """


class removeVirtualAuthenticator(BaseModel):
    """
    Removes the given authenticator.
    """

    __domain__: str = PrivateAttr("WebAuthn")
    authenticatorId: "AuthenticatorId"


class addCredential(BaseModel):
    """
    Adds the credential to the specified authenticator.
    """

    __domain__: str = PrivateAttr("WebAuthn")
    authenticatorId: "AuthenticatorId"
    credential: "Credential"


class getCredential(BaseModel):
    """
        Returns a single credential stored in the given virtual authenticator that
    matches the credential ID.
    """

    __domain__: str = PrivateAttr("WebAuthn")
    authenticatorId: "AuthenticatorId"
    credentialId: str


class getCredentials(BaseModel):
    """
    Returns all the credentials stored in the given virtual authenticator.
    """

    __domain__: str = PrivateAttr("WebAuthn")
    authenticatorId: "AuthenticatorId"


class removeCredential(BaseModel):
    """
    Removes a credential from the authenticator.
    """

    __domain__: str = PrivateAttr("WebAuthn")
    authenticatorId: "AuthenticatorId"
    credentialId: str


class clearCredentials(BaseModel):
    """
    Clears all the credentials from the specified device.
    """

    __domain__: str = PrivateAttr("WebAuthn")
    authenticatorId: "AuthenticatorId"


class setUserVerified(BaseModel):
    """
        Sets whether User Verification succeeds or fails for an authenticator.
    The default is true.
    """

    __domain__: str = PrivateAttr("WebAuthn")
    authenticatorId: "AuthenticatorId"
    isUserVerified: bool


class setAutomaticPresenceSimulation(BaseModel):
    """
        Sets whether tests of user presence will succeed immediately (if true) or fail to resolve (if false) for an authenticator.
    The default is true.
    """

    __domain__: str = PrivateAttr("WebAuthn")
    authenticatorId: "AuthenticatorId"
    enabled: bool


class setCredentialProperties(BaseModel):
    """
        Allows setting credential properties.
    https://w3c.github.io/webauthn/#sctn-automation-set-credential-properties
    """

    __domain__: str = PrivateAttr("WebAuthn")
    authenticatorId: "AuthenticatorId"
    credentialId: str
    backupEligibility: Optional[bool]
    backupState: Optional[bool]
