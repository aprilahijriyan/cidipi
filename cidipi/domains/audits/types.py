# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Optional, TypeVar, Union

from pydantic import BaseModel

from cidipi.domains import dom, network, page, runtime


class AffectedCookie(BaseModel):
    """
    Information about a cookie that is affected by an inspector issue.
    """

    name: str
    """
    The following three properties uniquely identify a cookie
    """
    path: str
    domain: str


class AffectedRequest(BaseModel):
    """
    Information about a request that is affected by an inspector issue.
    """

    requestId: network.RequestId
    """
    The unique request id.
    """
    url: Optional[str]


class AffectedFrame(BaseModel):
    """
    Information about the frame affected by an inspector issue.
    """

    frameId: page.FrameId


class CookieExclusionReason(str, Enum):
    ExcludeSameSiteUnspecifiedTreatedAsLax = "ExcludeSameSiteUnspecifiedTreatedAsLax"
    ExcludeSameSiteNoneInsecure = "ExcludeSameSiteNoneInsecure"
    ExcludeSameSiteLax = "ExcludeSameSiteLax"
    ExcludeSameSiteStrict = "ExcludeSameSiteStrict"
    ExcludeInvalidSameParty = "ExcludeInvalidSameParty"
    ExcludeSamePartyCrossPartyContext = "ExcludeSamePartyCrossPartyContext"
    ExcludeDomainNonASCII = "ExcludeDomainNonASCII"
    ExcludeThirdPartyCookieBlockedInFirstPartySet = (
        "ExcludeThirdPartyCookieBlockedInFirstPartySet"
    )
    ExcludeThirdPartyPhaseout = "ExcludeThirdPartyPhaseout"


class CookieWarningReason(str, Enum):
    WarnSameSiteUnspecifiedCrossSiteContext = "WarnSameSiteUnspecifiedCrossSiteContext"
    WarnSameSiteNoneInsecure = "WarnSameSiteNoneInsecure"
    WarnSameSiteUnspecifiedLaxAllowUnsafe = "WarnSameSiteUnspecifiedLaxAllowUnsafe"
    WarnSameSiteStrictLaxDowngradeStrict = "WarnSameSiteStrictLaxDowngradeStrict"
    WarnSameSiteStrictCrossDowngradeStrict = "WarnSameSiteStrictCrossDowngradeStrict"
    WarnSameSiteStrictCrossDowngradeLax = "WarnSameSiteStrictCrossDowngradeLax"
    WarnSameSiteLaxCrossDowngradeStrict = "WarnSameSiteLaxCrossDowngradeStrict"
    WarnSameSiteLaxCrossDowngradeLax = "WarnSameSiteLaxCrossDowngradeLax"
    WarnAttributeValueExceedsMaxSize = "WarnAttributeValueExceedsMaxSize"
    WarnDomainNonASCII = "WarnDomainNonASCII"
    WarnThirdPartyPhaseout = "WarnThirdPartyPhaseout"
    WarnCrossSiteRedirectDowngradeChangesInclusion = (
        "WarnCrossSiteRedirectDowngradeChangesInclusion"
    )


class CookieOperation(str, Enum):
    SetCookie = "SetCookie"
    ReadCookie = "ReadCookie"


class CookieIssueDetails(BaseModel):
    """
        This information is currently necessary, as the front-end has a difficult
    time finding a specific cookie. With this, we can convey specific error
    information without the cookie.
    """

    cookie: Optional["AffectedCookie"]
    """
    If AffectedCookie is not set then rawCookieLine contains the raw
Set-Cookie header string. This hints at a problem where the
cookie line is syntactically or semantically malformed in a way
that no valid cookie could be created.
    """
    rawCookieLine: Optional[str]
    cookieWarningReasons: list
    cookieExclusionReasons: list
    operation: "CookieOperation"
    """
    Optionally identifies the site-for-cookies and the cookie url, which
may be used by the front-end as additional context.
    """
    siteForCookies: Optional[str]
    cookieUrl: Optional[str]
    request: Optional["AffectedRequest"]


class MixedContentResolutionStatus(str, Enum):
    MixedContentBlocked = "MixedContentBlocked"
    MixedContentAutomaticallyUpgraded = "MixedContentAutomaticallyUpgraded"
    MixedContentWarning = "MixedContentWarning"


class MixedContentResourceType(str, Enum):
    AttributionSrc = "AttributionSrc"
    Audio = "Audio"
    Beacon = "Beacon"
    CSPReport = "CSPReport"
    Download = "Download"
    EventSource = "EventSource"
    Favicon = "Favicon"
    Font = "Font"
    Form = "Form"
    Frame = "Frame"
    Image = "Image"
    Import = "Import"
    JSON = "JSON"
    Manifest = "Manifest"
    Ping = "Ping"
    PluginData = "PluginData"
    PluginResource = "PluginResource"
    Prefetch = "Prefetch"
    Resource = "Resource"
    Script = "Script"
    ServiceWorker = "ServiceWorker"
    SharedWorker = "SharedWorker"
    SpeculationRules = "SpeculationRules"
    Stylesheet = "Stylesheet"
    Track = "Track"
    Video = "Video"
    Worker = "Worker"
    XMLHttpRequest = "XMLHttpRequest"
    XSLT = "XSLT"


class MixedContentIssueDetails(BaseModel):
    resourceType: Optional["MixedContentResourceType"]
    """
    The type of resource causing the mixed content issue (css, js, iframe,
form,...). Marked as optional because it is mapped to from
blink::mojom::RequestContextType, which will be replaced
by network::mojom::RequestDestination
    """
    resolutionStatus: "MixedContentResolutionStatus"
    """
    The way the mixed content issue is being resolved.
    """
    insecureURL: str
    """
    The unsafe http url causing the mixed content issue.
    """
    mainResourceURL: str
    """
    The url responsible for the call to an unsafe url.
    """
    request: Optional["AffectedRequest"]
    """
    The mixed content request.
Does not always exist (e.g. for unsafe form submission urls).
    """
    frame: Optional["AffectedFrame"]
    """
    Optional because not every mixed content issue is necessarily linked to a frame.
    """


class BlockedByResponseReason(str, Enum):
    """
        Enum indicating the reason a response has been blocked. These reasons are
    refinements of the net error BLOCKED_BY_RESPONSE.
    """

    CoepFrameResourceNeedsCoepHeader = "CoepFrameResourceNeedsCoepHeader"
    CoopSandboxedIFrameCannotNavigateToCoopPage = (
        "CoopSandboxedIFrameCannotNavigateToCoopPage"
    )
    CorpNotSameOrigin = "CorpNotSameOrigin"
    CorpNotSameOriginAfterDefaultedToSameOriginByCoep = (
        "CorpNotSameOriginAfterDefaultedToSameOriginByCoep"
    )
    CorpNotSameOriginAfterDefaultedToSameOriginByDip = (
        "CorpNotSameOriginAfterDefaultedToSameOriginByDip"
    )
    CorpNotSameOriginAfterDefaultedToSameOriginByCoepAndDip = (
        "CorpNotSameOriginAfterDefaultedToSameOriginByCoepAndDip"
    )
    CorpNotSameSite = "CorpNotSameSite"


class BlockedByResponseIssueDetails(BaseModel):
    """
        Details for a request that has been blocked with the BLOCKED_BY_RESPONSE
    code. Currently only used for COEP/COOP, but may be extended to include
    some CSP errors in the future.
    """

    request: "AffectedRequest"
    parentFrame: Optional["AffectedFrame"]
    blockedFrame: Optional["AffectedFrame"]
    reason: "BlockedByResponseReason"


class HeavyAdResolutionStatus(str, Enum):
    HeavyAdBlocked = "HeavyAdBlocked"
    HeavyAdWarning = "HeavyAdWarning"


class HeavyAdReason(str, Enum):
    NetworkTotalLimit = "NetworkTotalLimit"
    CpuTotalLimit = "CpuTotalLimit"
    CpuPeakLimit = "CpuPeakLimit"


class HeavyAdIssueDetails(BaseModel):
    resolution: "HeavyAdResolutionStatus"
    """
    The resolution status, either blocking the content or warning.
    """
    reason: "HeavyAdReason"
    """
    The reason the ad was blocked, total network or cpu or peak cpu.
    """
    frame: "AffectedFrame"
    """
    The frame that was blocked.
    """


class ContentSecurityPolicyViolationType(str, Enum):
    kInlineViolation = "kInlineViolation"
    kEvalViolation = "kEvalViolation"
    kURLViolation = "kURLViolation"
    kTrustedTypesSinkViolation = "kTrustedTypesSinkViolation"
    kTrustedTypesPolicyViolation = "kTrustedTypesPolicyViolation"
    kWasmEvalViolation = "kWasmEvalViolation"


class SourceCodeLocation(BaseModel):
    scriptId: Optional[runtime.ScriptId]
    url: str
    lineNumber: Union[float, int]
    columnNumber: Union[float, int]


class ContentSecurityPolicyIssueDetails(BaseModel):
    blockedURL: Optional[str]
    """
    The url not included in allowed sources.
    """
    violatedDirective: str
    """
    Specific directive that is violated, causing the CSP issue.
    """
    isReportOnly: bool
    contentSecurityPolicyViolationType: "ContentSecurityPolicyViolationType"
    frameAncestor: Optional["AffectedFrame"]
    sourceCodeLocation: Optional["SourceCodeLocation"]
    violatingNodeId: Optional[dom.BackendNodeId]


class SharedArrayBufferIssueType(str, Enum):
    TransferIssue = "TransferIssue"
    CreationIssue = "CreationIssue"


class SharedArrayBufferIssueDetails(BaseModel):
    """
        Details for a issue arising from an SAB being instantiated in, or
    transferred to a context that is not cross-origin isolated.
    """

    sourceCodeLocation: "SourceCodeLocation"
    isWarning: bool
    type: "SharedArrayBufferIssueType"


class LowTextContrastIssueDetails(BaseModel):
    violatingNodeId: dom.BackendNodeId
    violatingNodeSelector: str
    contrastRatio: Union[float, int]
    thresholdAA: Union[float, int]
    thresholdAAA: Union[float, int]
    fontSize: str
    fontWeight: str


class CorsIssueDetails(BaseModel):
    """
        Details for a CORS related issue, e.g. a warning or error related to
    CORS RFC1918 enforcement.
    """

    corsErrorStatus: network.CorsErrorStatus
    isWarning: bool
    request: "AffectedRequest"
    location: Optional["SourceCodeLocation"]
    initiatorOrigin: Optional[str]
    resourceIPAddressSpace: Optional[network.IPAddressSpace]
    clientSecurityState: Optional[network.ClientSecurityState]


class AttributionReportingIssueType(str, Enum):
    PermissionPolicyDisabled = "PermissionPolicyDisabled"
    UntrustworthyReportingOrigin = "UntrustworthyReportingOrigin"
    InsecureContext = "InsecureContext"
    InvalidHeader = "InvalidHeader"
    InvalidRegisterTriggerHeader = "InvalidRegisterTriggerHeader"
    SourceAndTriggerHeaders = "SourceAndTriggerHeaders"
    SourceIgnored = "SourceIgnored"
    TriggerIgnored = "TriggerIgnored"
    OsSourceIgnored = "OsSourceIgnored"
    OsTriggerIgnored = "OsTriggerIgnored"
    InvalidRegisterOsSourceHeader = "InvalidRegisterOsSourceHeader"
    InvalidRegisterOsTriggerHeader = "InvalidRegisterOsTriggerHeader"
    WebAndOsHeaders = "WebAndOsHeaders"
    NoWebOrOsSupport = "NoWebOrOsSupport"
    NavigationRegistrationWithoutTransientUserActivation = (
        "NavigationRegistrationWithoutTransientUserActivation"
    )
    InvalidInfoHeader = "InvalidInfoHeader"
    NoRegisterSourceHeader = "NoRegisterSourceHeader"
    NoRegisterTriggerHeader = "NoRegisterTriggerHeader"
    NoRegisterOsSourceHeader = "NoRegisterOsSourceHeader"
    NoRegisterOsTriggerHeader = "NoRegisterOsTriggerHeader"


class SharedDictionaryError(str, Enum):
    UseErrorCrossOriginNoCorsRequest = "UseErrorCrossOriginNoCorsRequest"
    UseErrorDictionaryLoadFailure = "UseErrorDictionaryLoadFailure"
    UseErrorMatchingDictionaryNotUsed = "UseErrorMatchingDictionaryNotUsed"
    UseErrorUnexpectedContentDictionaryHeader = (
        "UseErrorUnexpectedContentDictionaryHeader"
    )
    WriteErrorCossOriginNoCorsRequest = "WriteErrorCossOriginNoCorsRequest"
    WriteErrorDisallowedBySettings = "WriteErrorDisallowedBySettings"
    WriteErrorExpiredResponse = "WriteErrorExpiredResponse"
    WriteErrorFeatureDisabled = "WriteErrorFeatureDisabled"
    WriteErrorInsufficientResources = "WriteErrorInsufficientResources"
    WriteErrorInvalidMatchField = "WriteErrorInvalidMatchField"
    WriteErrorInvalidStructuredHeader = "WriteErrorInvalidStructuredHeader"
    WriteErrorNavigationRequest = "WriteErrorNavigationRequest"
    WriteErrorNoMatchField = "WriteErrorNoMatchField"
    WriteErrorNonListMatchDestField = "WriteErrorNonListMatchDestField"
    WriteErrorNonSecureContext = "WriteErrorNonSecureContext"
    WriteErrorNonStringIdField = "WriteErrorNonStringIdField"
    WriteErrorNonStringInMatchDestList = "WriteErrorNonStringInMatchDestList"
    WriteErrorNonStringMatchField = "WriteErrorNonStringMatchField"
    WriteErrorNonTokenTypeField = "WriteErrorNonTokenTypeField"
    WriteErrorRequestAborted = "WriteErrorRequestAborted"
    WriteErrorShuttingDown = "WriteErrorShuttingDown"
    WriteErrorTooLongIdField = "WriteErrorTooLongIdField"
    WriteErrorUnsupportedType = "WriteErrorUnsupportedType"


class AttributionReportingIssueDetails(BaseModel):
    """
        Details for issues around "Attribution Reporting API" usage.
    Explainer: https://github.com/WICG/attribution-reporting-api
    """

    violationType: "AttributionReportingIssueType"
    request: Optional["AffectedRequest"]
    violatingNodeId: Optional[dom.BackendNodeId]
    invalidParameter: Optional[str]


class QuirksModeIssueDetails(BaseModel):
    """
        Details for issues about documents in Quirks Mode
    or Limited Quirks Mode that affects page layouting.
    """

    isLimitedQuirksMode: bool
    """
    If false, it means the document's mode is "quirks"
instead of "limited-quirks".
    """
    documentNodeId: dom.BackendNodeId
    url: str
    frameId: page.FrameId
    loaderId: network.LoaderId


class NavigatorUserAgentIssueDetails(BaseModel):
    url: str
    location: Optional["SourceCodeLocation"]


class SharedDictionaryIssueDetails(BaseModel):
    sharedDictionaryError: "SharedDictionaryError"
    request: "AffectedRequest"


class GenericIssueErrorType(str, Enum):
    CrossOriginPortalPostMessageError = "CrossOriginPortalPostMessageError"
    FormLabelForNameError = "FormLabelForNameError"
    FormDuplicateIdForInputError = "FormDuplicateIdForInputError"
    FormInputWithNoLabelError = "FormInputWithNoLabelError"
    FormAutocompleteAttributeEmptyError = "FormAutocompleteAttributeEmptyError"
    FormEmptyIdAndNameAttributesForInputError = (
        "FormEmptyIdAndNameAttributesForInputError"
    )
    FormAriaLabelledByToNonExistingId = "FormAriaLabelledByToNonExistingId"
    FormInputAssignedAutocompleteValueToIdOrNameAttributeError = (
        "FormInputAssignedAutocompleteValueToIdOrNameAttributeError"
    )
    FormLabelHasNeitherForNorNestedInput = "FormLabelHasNeitherForNorNestedInput"
    FormLabelForMatchesNonExistingIdError = "FormLabelForMatchesNonExistingIdError"
    FormInputHasWrongButWellIntendedAutocompleteValueError = (
        "FormInputHasWrongButWellIntendedAutocompleteValueError"
    )
    ResponseWasBlockedByORB = "ResponseWasBlockedByORB"


class GenericIssueDetails(BaseModel):
    """
    Depending on the concrete errorType, different properties are set.
    """

    errorType: "GenericIssueErrorType"
    """
    Issues with the same errorType are aggregated in the frontend.
    """
    frameId: Optional[page.FrameId]
    violatingNodeId: Optional[dom.BackendNodeId]
    violatingNodeAttribute: Optional[str]
    request: Optional["AffectedRequest"]


class DeprecationIssueDetails(BaseModel):
    """
        This issue tracks information needed to print a deprecation message.
    https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md
    """

    affectedFrame: Optional["AffectedFrame"]
    sourceCodeLocation: "SourceCodeLocation"
    type: str
    """
    One of the deprecation names from third_party/blink/renderer/core/frame/deprecation/deprecation.json5
    """


class BounceTrackingIssueDetails(BaseModel):
    """
        This issue warns about sites in the redirect chain of a finished navigation
    that may be flagged as trackers and have their state cleared if they don't
    receive a user interaction. Note that in this context 'site' means eTLD+1.
    For example, if the URL `https://example.test:80/bounce` was in the
    redirect chain, the site reported would be `example.test`.
    """

    trackingSites: list


class CookieDeprecationMetadataIssueDetails(BaseModel):
    """
        This issue warns about third-party sites that are accessing cookies on the
    current page, and have been permitted due to having a global metadata grant.
    Note that in this context 'site' means eTLD+1. For example, if the URL
    `https://example.test:80/web_page` was accessing cookies, the site reported
    would be `example.test`.
    """

    allowedSites: list
    optOutPercentage: Union[float, int]
    isOptOutTopLevel: bool
    operation: "CookieOperation"


class ClientHintIssueReason(str, Enum):
    MetaTagAllowListInvalidOrigin = "MetaTagAllowListInvalidOrigin"
    MetaTagModifiedHTML = "MetaTagModifiedHTML"


class FederatedAuthRequestIssueDetails(BaseModel):
    federatedAuthRequestIssueReason: "FederatedAuthRequestIssueReason"


class FederatedAuthRequestIssueReason(str, Enum):
    """
        Represents the failure reason when a federated authentication reason fails.
    Should be updated alongside RequestIdTokenStatus in
    third_party/blink/public/mojom/devtools/inspector_issue.mojom to include
    all cases except for success.
    """

    ShouldEmbargo = "ShouldEmbargo"
    TooManyRequests = "TooManyRequests"
    WellKnownHttpNotFound = "WellKnownHttpNotFound"
    WellKnownNoResponse = "WellKnownNoResponse"
    WellKnownInvalidResponse = "WellKnownInvalidResponse"
    WellKnownListEmpty = "WellKnownListEmpty"
    WellKnownInvalidContentType = "WellKnownInvalidContentType"
    ConfigNotInWellKnown = "ConfigNotInWellKnown"
    WellKnownTooBig = "WellKnownTooBig"
    ConfigHttpNotFound = "ConfigHttpNotFound"
    ConfigNoResponse = "ConfigNoResponse"
    ConfigInvalidResponse = "ConfigInvalidResponse"
    ConfigInvalidContentType = "ConfigInvalidContentType"
    ClientMetadataHttpNotFound = "ClientMetadataHttpNotFound"
    ClientMetadataNoResponse = "ClientMetadataNoResponse"
    ClientMetadataInvalidResponse = "ClientMetadataInvalidResponse"
    ClientMetadataInvalidContentType = "ClientMetadataInvalidContentType"
    DisabledInSettings = "DisabledInSettings"
    ErrorFetchingSignin = "ErrorFetchingSignin"
    InvalidSigninResponse = "InvalidSigninResponse"
    AccountsHttpNotFound = "AccountsHttpNotFound"
    AccountsNoResponse = "AccountsNoResponse"
    AccountsInvalidResponse = "AccountsInvalidResponse"
    AccountsListEmpty = "AccountsListEmpty"
    AccountsInvalidContentType = "AccountsInvalidContentType"
    IdTokenHttpNotFound = "IdTokenHttpNotFound"
    IdTokenNoResponse = "IdTokenNoResponse"
    IdTokenInvalidResponse = "IdTokenInvalidResponse"
    IdTokenIdpErrorResponse = "IdTokenIdpErrorResponse"
    IdTokenCrossSiteIdpErrorResponse = "IdTokenCrossSiteIdpErrorResponse"
    IdTokenInvalidRequest = "IdTokenInvalidRequest"
    IdTokenInvalidContentType = "IdTokenInvalidContentType"
    ErrorIdToken = "ErrorIdToken"
    Canceled = "Canceled"
    RpPageNotVisible = "RpPageNotVisible"
    SilentMediationFailure = "SilentMediationFailure"
    ThirdPartyCookiesBlocked = "ThirdPartyCookiesBlocked"
    NotSignedInWithIdp = "NotSignedInWithIdp"
    MissingTransientUserActivation = "MissingTransientUserActivation"
    ReplacedByButtonMode = "ReplacedByButtonMode"
    RelyingPartyOriginIsOpaque = "RelyingPartyOriginIsOpaque"
    TypeNotMatching = "TypeNotMatching"


class FederatedAuthUserInfoRequestIssueDetails(BaseModel):
    federatedAuthUserInfoRequestIssueReason: "FederatedAuthUserInfoRequestIssueReason"


class FederatedAuthUserInfoRequestIssueReason(str, Enum):
    """
        Represents the failure reason when a getUserInfo() call fails.
    Should be updated alongside FederatedAuthUserInfoRequestResult in
    third_party/blink/public/mojom/devtools/inspector_issue.mojom.
    """

    NotSameOrigin = "NotSameOrigin"
    NotIframe = "NotIframe"
    NotPotentiallyTrustworthy = "NotPotentiallyTrustworthy"
    NoApiPermission = "NoApiPermission"
    NotSignedInWithIdp = "NotSignedInWithIdp"
    NoAccountSharingPermission = "NoAccountSharingPermission"
    InvalidConfigOrWellKnown = "InvalidConfigOrWellKnown"
    InvalidAccountsResponse = "InvalidAccountsResponse"
    NoReturningUserFromFetchedAccounts = "NoReturningUserFromFetchedAccounts"


class ClientHintIssueDetails(BaseModel):
    """
        This issue tracks client hints related issues. It's used to deprecate old
    features, encourage the use of new ones, and provide general guidance.
    """

    sourceCodeLocation: "SourceCodeLocation"
    clientHintIssueReason: "ClientHintIssueReason"


class FailedRequestInfo(BaseModel):
    url: str
    """
    The URL that failed to load.
    """
    failureMessage: str
    """
    The failure message for the failed request.
    """
    requestId: Optional[network.RequestId]


class StyleSheetLoadingIssueReason(str, Enum):
    LateImportRule = "LateImportRule"
    RequestFailed = "RequestFailed"


class StylesheetLoadingIssueDetails(BaseModel):
    """
    This issue warns when a referenced stylesheet couldn't be loaded.
    """

    sourceCodeLocation: "SourceCodeLocation"
    """
    Source code position that referenced the failing stylesheet.
    """
    styleSheetLoadingIssueReason: "StyleSheetLoadingIssueReason"
    """
    Reason why the stylesheet couldn't be loaded.
    """
    failedRequestInfo: Optional["FailedRequestInfo"]
    """
    Contains additional info when the failure was due to a request.
    """


class PropertyRuleIssueReason(str, Enum):
    InvalidSyntax = "InvalidSyntax"
    InvalidInitialValue = "InvalidInitialValue"
    InvalidInherits = "InvalidInherits"
    InvalidName = "InvalidName"


class PropertyRuleIssueDetails(BaseModel):
    """
        This issue warns about errors in property rules that lead to property
    registrations being ignored.
    """

    sourceCodeLocation: "SourceCodeLocation"
    """
    Source code position of the property rule.
    """
    propertyRuleIssueReason: "PropertyRuleIssueReason"
    """
    Reason why the property rule was discarded.
    """
    propertyValue: Optional[str]
    """
    The value of the property rule property that failed to parse
    """


class InspectorIssueCode(str, Enum):
    """
        A unique identifier for the type of issue. Each type may use one of the
    optional fields in InspectorIssueDetails to convey more specific
    information about the kind of issue.
    """

    CookieIssue = "CookieIssue"
    MixedContentIssue = "MixedContentIssue"
    BlockedByResponseIssue = "BlockedByResponseIssue"
    HeavyAdIssue = "HeavyAdIssue"
    ContentSecurityPolicyIssue = "ContentSecurityPolicyIssue"
    SharedArrayBufferIssue = "SharedArrayBufferIssue"
    LowTextContrastIssue = "LowTextContrastIssue"
    CorsIssue = "CorsIssue"
    AttributionReportingIssue = "AttributionReportingIssue"
    QuirksModeIssue = "QuirksModeIssue"
    NavigatorUserAgentIssue = "NavigatorUserAgentIssue"
    GenericIssue = "GenericIssue"
    DeprecationIssue = "DeprecationIssue"
    ClientHintIssue = "ClientHintIssue"
    FederatedAuthRequestIssue = "FederatedAuthRequestIssue"
    BounceTrackingIssue = "BounceTrackingIssue"
    CookieDeprecationMetadataIssue = "CookieDeprecationMetadataIssue"
    StylesheetLoadingIssue = "StylesheetLoadingIssue"
    FederatedAuthUserInfoRequestIssue = "FederatedAuthUserInfoRequestIssue"
    PropertyRuleIssue = "PropertyRuleIssue"
    SharedDictionaryIssue = "SharedDictionaryIssue"


class InspectorIssueDetails(BaseModel):
    """
        This struct holds a list of optional fields with additional information
    specific to the kind of issue. When adding a new issue code, please also
    add a new optional field to this type.
    """

    cookieIssueDetails: Optional["CookieIssueDetails"]
    mixedContentIssueDetails: Optional["MixedContentIssueDetails"]
    blockedByResponseIssueDetails: Optional["BlockedByResponseIssueDetails"]
    heavyAdIssueDetails: Optional["HeavyAdIssueDetails"]
    contentSecurityPolicyIssueDetails: Optional["ContentSecurityPolicyIssueDetails"]
    sharedArrayBufferIssueDetails: Optional["SharedArrayBufferIssueDetails"]
    lowTextContrastIssueDetails: Optional["LowTextContrastIssueDetails"]
    corsIssueDetails: Optional["CorsIssueDetails"]
    attributionReportingIssueDetails: Optional["AttributionReportingIssueDetails"]
    quirksModeIssueDetails: Optional["QuirksModeIssueDetails"]
    navigatorUserAgentIssueDetails: Optional["NavigatorUserAgentIssueDetails"]
    genericIssueDetails: Optional["GenericIssueDetails"]
    deprecationIssueDetails: Optional["DeprecationIssueDetails"]
    clientHintIssueDetails: Optional["ClientHintIssueDetails"]
    federatedAuthRequestIssueDetails: Optional["FederatedAuthRequestIssueDetails"]
    bounceTrackingIssueDetails: Optional["BounceTrackingIssueDetails"]
    cookieDeprecationMetadataIssueDetails: Optional[
        "CookieDeprecationMetadataIssueDetails"
    ]
    stylesheetLoadingIssueDetails: Optional["StylesheetLoadingIssueDetails"]
    propertyRuleIssueDetails: Optional["PropertyRuleIssueDetails"]
    federatedAuthUserInfoRequestIssueDetails: Optional[
        "FederatedAuthUserInfoRequestIssueDetails"
    ]
    sharedDictionaryIssueDetails: Optional["SharedDictionaryIssueDetails"]


IssueId = TypeVar("IssueId", bound=str)
"""
A unique id for a DevTools inspector issue. Allows other entities (e.g.
exceptions, CDP message, console messages, etc.) to reference an issue.
"""


class InspectorIssue(BaseModel):
    """
    An inspector issue reported from the back-end.
    """

    code: "InspectorIssueCode"
    details: "InspectorIssueDetails"
    issueId: Optional["IssueId"]
    """
    A unique id for this issue. May be omitted if no other entity (e.g.
exception, CDP message, etc.) is referencing this issue.
    """
