# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Optional, TypeVar, Union

from pydantic import BaseModel


class TouchPoint(BaseModel):
    x: Union[float, int]
    """
    X coordinate of the event relative to the main frame's viewport in CSS pixels.
    """
    y: Union[float, int]
    """
    Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
    """
    radiusX: Optional[Union[float, int]]
    """
    X radius of the touch area (default: 1.0).
    """
    radiusY: Optional[Union[float, int]]
    """
    Y radius of the touch area (default: 1.0).
    """
    rotationAngle: Optional[Union[float, int]]
    """
    Rotation angle (default: 0.0).
    """
    force: Optional[Union[float, int]]
    """
    Force (default: 1.0).
    """
    tangentialPressure: Optional[Union[float, int]]
    """
    The normalized tangential pressure, which has a range of [-1,1] (default: 0).
    """
    tiltX: Optional[Union[float, int]]
    """
    The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0)
    """
    tiltY: Optional[Union[float, int]]
    """
    The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).
    """
    twist: Optional[Union[float, int]]
    """
    The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).
    """
    id: Optional[Union[float, int]]
    """
    Identifier used to track touch sources between events, must be unique within an event.
    """


class GestureSourceType(str, Enum):
    default = "default"
    touch = "touch"
    mouse = "mouse"


class MouseButton(str, Enum):
    none = "none"
    left = "left"
    middle = "middle"
    right = "right"
    back = "back"
    forward = "forward"


TimeSinceEpoch = TypeVar("TimeSinceEpoch", bound=Union[float, int])
"""
UTC time in seconds, counted from January 1, 1970.
"""


class DragDataItem(BaseModel):
    mimeType: str
    """
    Mime type of the dragged data.
    """
    data: str
    """
    Depending of the value of `mimeType`, it contains the dragged link,
text, HTML markup or any other data.
    """
    title: Optional[str]
    """
    Title associated with a link. Only valid when `mimeType` == "text/uri-list".
    """
    baseURL: Optional[str]
    """
    Stores the base URL for the contained markup. Only valid when `mimeType`
== "text/html".
    """


class DragData(BaseModel):
    items: list
    files: Optional[list]
    """
    List of filenames that should be included when dropping
    """
    dragOperationsMask: Union[float, int]
    """
    Bit field representing allowed drag operations. Copy = 1, Link = 2, Move = 16
    """
