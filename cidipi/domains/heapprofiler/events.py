# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.domains.heapprofiler.types import *


class addHeapSnapshotChunk(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")
    chunk: str


class heapStatsUpdate(BaseModel):
    """
    If heap objects tracking has been started then backend may send update for one or more fragments
    """

    __domain__: str = PrivateAttr("HeapProfiler")
    statsUpdate: list
    """
    An array of triplets. Each triplet describes a fragment. The first integer is the fragment
index, the second integer is a total count of objects for the fragment, the third integer is
a total size of the objects for the fragment.
    """


class lastSeenObjectId(BaseModel):
    """
        If heap objects tracking has been started then backend regularly sends a current value for last
    seen object id and corresponding timestamp. If the were changes in the heap since last event
    then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
    """

    __domain__: str = PrivateAttr("HeapProfiler")
    lastSeenObjectId: Union[float, int]
    timestamp: Union[float, int]


class reportHeapSnapshotProgress(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")
    done: Union[float, int]
    total: Union[float, int]
    finished: Optional[bool]


class resetProfiles(BaseModel):
    __domain__: str = PrivateAttr("HeapProfiler")
