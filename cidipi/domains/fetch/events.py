# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.domains import network, page
from cidipi.domains.fetch.types import *


class requestPaused(BaseModel):
    """
        Issued when the domain is enabled and the request URL matches the
    specified filter. The request is paused until the client responds
    with one of continueRequest, failRequest or fulfillRequest.
    The stage of the request can be determined by presence of responseErrorReason
    and responseStatusCode -- the request is at the response stage if either
    of these fields is present and in the request stage otherwise.
    Redirect responses and subsequent requests are reported similarly to regular
    responses and requests. Redirect responses may be distinguished by the value
    of `responseStatusCode` (which is one of 301, 302, 303, 307, 308) along with
    presence of the `location` header. Requests resulting from a redirect will
    have `redirectedRequestId` field set.
    """

    __domain__: str = PrivateAttr("Fetch")
    requestId: "RequestId"
    """
    Each request the page makes will have a unique id.
    """
    request: network.Request
    """
    The details of the request.
    """
    frameId: page.FrameId
    """
    The id of the frame that initiated the request.
    """
    resourceType: network.ResourceType
    """
    How the requested resource will be used.
    """
    responseErrorReason: Optional[network.ErrorReason]
    """
    Response error if intercepted at response stage.
    """
    responseStatusCode: Optional[Union[float, int]]
    """
    Response code if intercepted at response stage.
    """
    responseStatusText: Optional[str]
    """
    Response status text if intercepted at response stage.
    """
    responseHeaders: Optional[list]
    """
    Response headers if intercepted at the response stage.
    """
    networkId: Optional[network.RequestId]
    """
    If the intercepted request had a corresponding Network.requestWillBeSent event fired for it,
then this networkId will be the same as the requestId present in the requestWillBeSent event.
    """
    redirectedRequestId: Optional["RequestId"]
    """
    If the request is due to a redirect response from the server, the id of the request that
has caused the redirect.
    """


class authRequired(BaseModel):
    """
        Issued when the domain is enabled with handleAuthRequests set to true.
    The request is paused until client responds with continueWithAuth.
    """

    __domain__: str = PrivateAttr("Fetch")
    requestId: "RequestId"
    """
    Each request the page makes will have a unique id.
    """
    request: network.Request
    """
    The details of the request.
    """
    frameId: page.FrameId
    """
    The id of the frame that initiated the request.
    """
    resourceType: network.ResourceType
    """
    How the requested resource will be used.
    """
    authChallenge: "AuthChallenge"
    """
    Details of the Authorization Challenge encountered.
If this is set, client should respond with continueRequest that
contains AuthChallengeResponse.
    """
