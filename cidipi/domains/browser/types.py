# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Optional, TypeVar, Union

from pydantic import BaseModel

BrowserContextID = TypeVar("BrowserContextID", bound=str)

WindowID = TypeVar("WindowID", bound=Union[float, int])


class WindowState(str, Enum):
    """
    The state of the browser window.
    """

    normal = "normal"
    minimized = "minimized"
    maximized = "maximized"
    fullscreen = "fullscreen"


class Bounds(BaseModel):
    """
    Browser window bounds information
    """

    left: Optional[Union[float, int]]
    """
    The offset from the left edge of the screen to the window in pixels.
    """
    top: Optional[Union[float, int]]
    """
    The offset from the top edge of the screen to the window in pixels.
    """
    width: Optional[Union[float, int]]
    """
    The window width in pixels.
    """
    height: Optional[Union[float, int]]
    """
    The window height in pixels.
    """
    windowState: Optional["WindowState"]
    """
    The window state. Default to normal.
    """


class PermissionType(str, Enum):
    accessibilityEvents = "accessibilityEvents"
    audioCapture = "audioCapture"
    backgroundSync = "backgroundSync"
    backgroundFetch = "backgroundFetch"
    capturedSurfaceControl = "capturedSurfaceControl"
    clipboardReadWrite = "clipboardReadWrite"
    clipboardSanitizedWrite = "clipboardSanitizedWrite"
    displayCapture = "displayCapture"
    durableStorage = "durableStorage"
    flash = "flash"
    geolocation = "geolocation"
    idleDetection = "idleDetection"
    localFonts = "localFonts"
    midi = "midi"
    midiSysex = "midiSysex"
    nfc = "nfc"
    notifications = "notifications"
    paymentHandler = "paymentHandler"
    periodicBackgroundSync = "periodicBackgroundSync"
    protectedMediaIdentifier = "protectedMediaIdentifier"
    sensors = "sensors"
    storageAccess = "storageAccess"
    speakerSelection = "speakerSelection"
    topLevelStorageAccess = "topLevelStorageAccess"
    videoCapture = "videoCapture"
    videoCapturePanTiltZoom = "videoCapturePanTiltZoom"
    wakeLockScreen = "wakeLockScreen"
    wakeLockSystem = "wakeLockSystem"
    windowManagement = "windowManagement"


class PermissionSetting(str, Enum):
    granted = "granted"
    denied = "denied"
    prompt = "prompt"


class PermissionDescriptor(BaseModel):
    """
        Definition of PermissionDescriptor defined in the Permissions API:
    https://w3c.github.io/permissions/#dom-permissiondescriptor.
    """

    name: str
    """
    Name of permission.
See https://cs.chromium.org/chromium/src/third_party/blink/renderer/modules/permissions/permission_descriptor.idl for valid permission names.
    """
    sysex: Optional[bool]
    """
    For "midi" permission, may also specify sysex control.
    """
    userVisibleOnly: Optional[bool]
    """
    For "push" permission, may specify userVisibleOnly.
Note that userVisibleOnly = true is the only currently supported type.
    """
    allowWithoutSanitization: Optional[bool]
    """
    For "clipboard" permission, may specify allowWithoutSanitization.
    """
    panTiltZoom: Optional[bool]
    """
    For "camera" permission, may specify panTiltZoom.
    """


class BrowserCommandId(str, Enum):
    """
    Browser command ids used by executeBrowserCommand.
    """

    openTabSearch = "openTabSearch"
    closeTabSearch = "closeTabSearch"


class Bucket(BaseModel):
    """
    Chrome histogram bucket.
    """

    low: Union[float, int]
    """
    Minimum value (inclusive).
    """
    high: Union[float, int]
    """
    Maximum value (exclusive).
    """
    count: Union[float, int]
    """
    Number of samples.
    """


class Histogram(BaseModel):
    """
    Chrome histogram.
    """

    name: str
    """
    Name.
    """
    sum: Union[float, int]
    """
    Sum of sample values.
    """
    count: Union[float, int]
    """
    Total number of samples.
    """
    buckets: list
    """
    Buckets.
    """
