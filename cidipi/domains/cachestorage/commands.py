# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.domains import storage
from cidipi.domains.cachestorage.types import *


class deleteCache(BaseModel):
    """
    Deletes a cache.
    """

    __domain__: str = PrivateAttr("CacheStorage")
    cacheId: "CacheId"
    """
    Id of cache for deletion.
    """


class deleteEntry(BaseModel):
    """
    Deletes a cache entry.
    """

    __domain__: str = PrivateAttr("CacheStorage")
    cacheId: "CacheId"
    """
    Id of cache where the entry will be deleted.
    """
    request: str
    """
    URL spec of the request.
    """


class requestCacheNames(BaseModel):
    """
    Requests cache names.
    """

    __domain__: str = PrivateAttr("CacheStorage")
    securityOrigin: Optional[str]
    """
    At least and at most one of securityOrigin, storageKey, storageBucket must be specified.
Security origin.
    """
    storageKey: Optional[str]
    """
    Storage key.
    """
    storageBucket: Optional[storage.StorageBucket]
    """
    Storage bucket. If not specified, it uses the default bucket.
    """


class requestCachedResponse(BaseModel):
    """
    Fetches cache entry.
    """

    __domain__: str = PrivateAttr("CacheStorage")
    cacheId: "CacheId"
    """
    Id of cache that contains the entry.
    """
    requestURL: str
    """
    URL spec of the request.
    """
    requestHeaders: list
    """
    headers of the request.
    """


class requestEntries(BaseModel):
    """
    Requests data from cache.
    """

    __domain__: str = PrivateAttr("CacheStorage")
    cacheId: "CacheId"
    """
    ID of cache to get entries from.
    """
    skipCount: Optional[Union[float, int]]
    """
    Number of records to skip.
    """
    pageSize: Optional[Union[float, int]]
    """
    Number of records to fetch.
    """
    pathFilter: Optional[str]
    """
    If present, only return the entries containing this substring in the path
    """
