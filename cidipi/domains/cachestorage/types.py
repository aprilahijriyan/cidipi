# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Optional, TypeVar, Union

from pydantic import BaseModel

from cidipi.domains import storage

CacheId = TypeVar("CacheId", bound=str)
"""
Unique identifier of the Cache object.
"""


class CachedResponseType(str, Enum):
    """
    type of HTTP response cached
    """

    basic = "basic"
    cors = "cors"
    default = "default"
    error = "error"
    opaqueResponse = "opaqueResponse"
    opaqueRedirect = "opaqueRedirect"


class DataEntry(BaseModel):
    """
    Data entry.
    """

    requestURL: str
    """
    Request URL.
    """
    requestMethod: str
    """
    Request method.
    """
    requestHeaders: list
    """
    Request headers
    """
    responseTime: Union[float, int]
    """
    Number of seconds since epoch.
    """
    responseStatus: Union[float, int]
    """
    HTTP response status code.
    """
    responseStatusText: str
    """
    HTTP response status text.
    """
    responseType: "CachedResponseType"
    """
    HTTP response type
    """
    responseHeaders: list
    """
    Response headers
    """


class Cache(BaseModel):
    """
    Cache identifier.
    """

    cacheId: "CacheId"
    """
    An opaque unique id of the cache.
    """
    securityOrigin: str
    """
    Security origin of the cache.
    """
    storageKey: str
    """
    Storage key of the cache.
    """
    storageBucket: Optional[storage.StorageBucket]
    """
    Storage bucket of the cache.
    """
    cacheName: str
    """
    The name of the cache.
    """


class Header(BaseModel):
    name: str
    value: str


class CachedResponse(BaseModel):
    """
    Cached response
    """

    body: str
    """
    Entry content, base64-encoded. (Encoded as a base64 string when passed over JSON)
    """
