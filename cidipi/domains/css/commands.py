# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.domains import dom, page
from cidipi.domains.css.types import *


class addRule(BaseModel):
    """
        Inserts a new rule with the given `ruleText` in a stylesheet with given `styleSheetId`, at the
    position specified by `location`.
    """

    __domain__: str = PrivateAttr("CSS")
    styleSheetId: "StyleSheetId"
    """
    The css style sheet identifier where a new rule should be inserted.
    """
    ruleText: str
    """
    The text of a new rule.
    """
    location: "SourceRange"
    """
    Text position of a new rule in the target style sheet.
    """
    nodeForPropertySyntaxValidation: Optional[dom.NodeId]
    """
    NodeId for the DOM node in whose context custom property declarations for registered properties should be
validated. If omitted, declarations in the new rule text can only be validated statically, which may produce
incorrect results if the declaration contains a var() for example.
    """


class collectClassNames(BaseModel):
    """
    Returns all class names from specified stylesheet.
    """

    __domain__: str = PrivateAttr("CSS")
    styleSheetId: "StyleSheetId"


class createStyleSheet(BaseModel):
    """
    Creates a new special "via-inspector" stylesheet in the frame with given `frameId`.
    """

    __domain__: str = PrivateAttr("CSS")
    frameId: page.FrameId
    """
    Identifier of the frame where "via-inspector" stylesheet should be created.
    """


class disable(BaseModel):
    """
    Disables the CSS agent for the given page.
    """

    __domain__: str = PrivateAttr("CSS")


class enable(BaseModel):
    """
        Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been
    enabled until the result of this command is received.
    """

    __domain__: str = PrivateAttr("CSS")


class forcePseudoState(BaseModel):
    """
        Ensures that the given node will have specified pseudo-classes whenever its style is computed by
    the browser.
    """

    __domain__: str = PrivateAttr("CSS")
    nodeId: dom.NodeId
    """
    The element id for which to force the pseudo state.
    """
    forcedPseudoClasses: list
    """
    Element pseudo classes to force when computing the element's style.
    """


class getBackgroundColors(BaseModel):
    __domain__: str = PrivateAttr("CSS")
    nodeId: dom.NodeId
    """
    Id of the node to get background colors for.
    """


class getComputedStyleForNode(BaseModel):
    """
    Returns the computed style for a DOM node identified by `nodeId`.
    """

    __domain__: str = PrivateAttr("CSS")
    nodeId: dom.NodeId


class getInlineStylesForNode(BaseModel):
    """
        Returns the styles defined inline (explicitly in the "style" attribute and implicitly, using DOM
    attributes) for a DOM node identified by `nodeId`.
    """

    __domain__: str = PrivateAttr("CSS")
    nodeId: dom.NodeId


class getMatchedStylesForNode(BaseModel):
    """
    Returns requested styles for a DOM node identified by `nodeId`.
    """

    __domain__: str = PrivateAttr("CSS")
    nodeId: dom.NodeId


class getMediaQueries(BaseModel):
    """
    Returns all media queries parsed by the rendering engine.
    """

    __domain__: str = PrivateAttr("CSS")


class getPlatformFontsForNode(BaseModel):
    """
        Requests information about platform fonts which we used to render child TextNodes in the given
    node.
    """

    __domain__: str = PrivateAttr("CSS")
    nodeId: dom.NodeId


class getStyleSheetText(BaseModel):
    """
    Returns the current textual content for a stylesheet.
    """

    __domain__: str = PrivateAttr("CSS")
    styleSheetId: "StyleSheetId"


class getLayersForNode(BaseModel):
    """
        Returns all layers parsed by the rendering engine for the tree scope of a node.
    Given a DOM element identified by nodeId, getLayersForNode returns the root
    layer for the nearest ancestor document or shadow root. The layer root contains
    the full layer tree for the tree scope and their ordering.
    """

    __domain__: str = PrivateAttr("CSS")
    nodeId: dom.NodeId


class getLocationForSelector(BaseModel):
    """
        Given a CSS selector text and a style sheet ID, getLocationForSelector
    returns an array of locations of the CSS selector in the style sheet.
    """

    __domain__: str = PrivateAttr("CSS")
    styleSheetId: "StyleSheetId"
    selectorText: str


class trackComputedStyleUpdates(BaseModel):
    """
        Starts tracking the given computed styles for updates. The specified array of properties
    replaces the one previously specified. Pass empty array to disable tracking.
    Use takeComputedStyleUpdates to retrieve the list of nodes that had properties modified.
    The changes to computed style properties are only tracked for nodes pushed to the front-end
    by the DOM agent. If no changes to the tracked properties occur after the node has been pushed
    to the front-end, no updates will be issued for the node.
    """

    __domain__: str = PrivateAttr("CSS")
    propertiesToTrack: list


class takeComputedStyleUpdates(BaseModel):
    """
    Polls the next batch of computed style updates.
    """

    __domain__: str = PrivateAttr("CSS")


class setEffectivePropertyValueForNode(BaseModel):
    """
        Find a rule with the given active property for the given node and set the new value for this
    property
    """

    __domain__: str = PrivateAttr("CSS")
    nodeId: dom.NodeId
    """
    The element id for which to set property.
    """
    propertyName: str
    value: str


class setPropertyRulePropertyName(BaseModel):
    """
    Modifies the property rule property name.
    """

    __domain__: str = PrivateAttr("CSS")
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    propertyName: str


class setKeyframeKey(BaseModel):
    """
    Modifies the keyframe rule key text.
    """

    __domain__: str = PrivateAttr("CSS")
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    keyText: str


class setMediaText(BaseModel):
    """
    Modifies the rule selector.
    """

    __domain__: str = PrivateAttr("CSS")
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    text: str


class setContainerQueryText(BaseModel):
    """
    Modifies the expression of a container query.
    """

    __domain__: str = PrivateAttr("CSS")
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    text: str


class setSupportsText(BaseModel):
    """
    Modifies the expression of a supports at-rule.
    """

    __domain__: str = PrivateAttr("CSS")
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    text: str


class setScopeText(BaseModel):
    """
    Modifies the expression of a scope at-rule.
    """

    __domain__: str = PrivateAttr("CSS")
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    text: str


class setRuleSelector(BaseModel):
    """
    Modifies the rule selector.
    """

    __domain__: str = PrivateAttr("CSS")
    styleSheetId: "StyleSheetId"
    range: "SourceRange"
    selector: str


class setStyleSheetText(BaseModel):
    """
    Sets the new stylesheet text.
    """

    __domain__: str = PrivateAttr("CSS")
    styleSheetId: "StyleSheetId"
    text: str


class setStyleTexts(BaseModel):
    """
    Applies specified style edits one after another in the given order.
    """

    __domain__: str = PrivateAttr("CSS")
    edits: list
    nodeForPropertySyntaxValidation: Optional[dom.NodeId]
    """
    NodeId for the DOM node in whose context custom property declarations for registered properties should be
validated. If omitted, declarations in the new rule text can only be validated statically, which may produce
incorrect results if the declaration contains a var() for example.
    """


class startRuleUsageTracking(BaseModel):
    """
    Enables the selector recording.
    """

    __domain__: str = PrivateAttr("CSS")


class stopRuleUsageTracking(BaseModel):
    """
        Stop tracking rule usage and return the list of rules that were used since last call to
    `takeCoverageDelta` (or since start of coverage instrumentation).
    """

    __domain__: str = PrivateAttr("CSS")


class takeCoverageDelta(BaseModel):
    """
        Obtain list of rules that became used since last call to this method (or since start of coverage
    instrumentation).
    """

    __domain__: str = PrivateAttr("CSS")


class setLocalFontsEnabled(BaseModel):
    """
    Enables/disables rendering of local CSS fonts (enabled by default).
    """

    __domain__: str = PrivateAttr("CSS")
    enabled: bool
    """
    Whether rendering of local fonts is enabled.
    """
