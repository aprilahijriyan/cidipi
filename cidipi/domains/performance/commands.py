# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.domains.performance.types import *


class disable(BaseModel):
    """
    Disable collecting and reporting metrics.
    """

    __domain__: str = PrivateAttr("Performance")


class enable(BaseModel):
    """
    Enable collecting and reporting metrics.
    """

    __domain__: str = PrivateAttr("Performance")
    timeDomain: Optional[Literal["timeTicks", "threadTicks"]]
    """
    Time domain to use for collecting and reporting duration metrics.
    """


class setTimeDomain(BaseModel):
    """
        Sets time domain to use for collecting and reporting duration metrics.
    Note that this must be called before enabling metrics collection. Calling
    this method while metrics collection is enabled returns an error.
    """

    __domain__: str = PrivateAttr("Performance")
    timeDomain: Literal["timeTicks", "threadTicks"]
    """
    Time domain
    """


class getMetrics(BaseModel):
    """
    Retrieve current values of run-time metrics.
    """

    __domain__: str = PrivateAttr("Performance")
