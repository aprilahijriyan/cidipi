# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from enum import Enum
from typing import Literal, Optional

from pydantic import BaseModel

from cidipi.domains import dom


class SourceOrderConfig(BaseModel):
    """
    Configuration data for drawing the source order of an elements children.
    """

    parentOutlineColor: dom.RGBA
    """
    the color to outline the given element in.
    """
    childOutlineColor: dom.RGBA
    """
    the color to outline the child elements in.
    """


class GridHighlightConfig(BaseModel):
    """
    Configuration data for the highlighting of Grid elements.
    """

    showGridExtensionLines: Optional[bool]
    """
    Whether the extension lines from grid cells to the rulers should be shown (default: false).
    """
    showPositiveLineNumbers: Optional[bool]
    """
    Show Positive line number labels (default: false).
    """
    showNegativeLineNumbers: Optional[bool]
    """
    Show Negative line number labels (default: false).
    """
    showAreaNames: Optional[bool]
    """
    Show area name labels (default: false).
    """
    showLineNames: Optional[bool]
    """
    Show line name labels (default: false).
    """
    showTrackSizes: Optional[bool]
    """
    Show track size labels (default: false).
    """
    gridBorderColor: Optional[dom.RGBA]
    """
    The grid container border highlight color (default: transparent).
    """
    cellBorderColor: Optional[dom.RGBA]
    """
    The cell border color (default: transparent). Deprecated, please use rowLineColor and columnLineColor instead.
    """
    rowLineColor: Optional[dom.RGBA]
    """
    The row line color (default: transparent).
    """
    columnLineColor: Optional[dom.RGBA]
    """
    The column line color (default: transparent).
    """
    gridBorderDash: Optional[bool]
    """
    Whether the grid border is dashed (default: false).
    """
    cellBorderDash: Optional[bool]
    """
    Whether the cell border is dashed (default: false). Deprecated, please us rowLineDash and columnLineDash instead.
    """
    rowLineDash: Optional[bool]
    """
    Whether row lines are dashed (default: false).
    """
    columnLineDash: Optional[bool]
    """
    Whether column lines are dashed (default: false).
    """
    rowGapColor: Optional[dom.RGBA]
    """
    The row gap highlight fill color (default: transparent).
    """
    rowHatchColor: Optional[dom.RGBA]
    """
    The row gap hatching fill color (default: transparent).
    """
    columnGapColor: Optional[dom.RGBA]
    """
    The column gap highlight fill color (default: transparent).
    """
    columnHatchColor: Optional[dom.RGBA]
    """
    The column gap hatching fill color (default: transparent).
    """
    areaBorderColor: Optional[dom.RGBA]
    """
    The named grid areas border color (Default: transparent).
    """
    gridBackgroundColor: Optional[dom.RGBA]
    """
    The grid container background color (Default: transparent).
    """


class FlexContainerHighlightConfig(BaseModel):
    """
    Configuration data for the highlighting of Flex container elements.
    """

    containerBorder: Optional["LineStyle"]
    """
    The style of the container border
    """
    lineSeparator: Optional["LineStyle"]
    """
    The style of the separator between lines
    """
    itemSeparator: Optional["LineStyle"]
    """
    The style of the separator between items
    """
    mainDistributedSpace: Optional["BoxStyle"]
    """
    Style of content-distribution space on the main axis (justify-content).
    """
    crossDistributedSpace: Optional["BoxStyle"]
    """
    Style of content-distribution space on the cross axis (align-content).
    """
    rowGapSpace: Optional["BoxStyle"]
    """
    Style of empty space caused by row gaps (gap/row-gap).
    """
    columnGapSpace: Optional["BoxStyle"]
    """
    Style of empty space caused by columns gaps (gap/column-gap).
    """
    crossAlignment: Optional["LineStyle"]
    """
    Style of the self-alignment line (align-items).
    """


class FlexItemHighlightConfig(BaseModel):
    """
    Configuration data for the highlighting of Flex item elements.
    """

    baseSizeBox: Optional["BoxStyle"]
    """
    Style of the box representing the item's base size
    """
    baseSizeBorder: Optional["LineStyle"]
    """
    Style of the border around the box representing the item's base size
    """
    flexibilityArrow: Optional["LineStyle"]
    """
    Style of the arrow representing if the item grew or shrank
    """


class LineStyle(BaseModel):
    """
    Style information for drawing a line.
    """

    color: Optional[dom.RGBA]
    """
    The color of the line (default: transparent)
    """
    pattern: Optional[Literal["dashed", "dotted"]]
    """
    The line pattern (default: solid)
    """


class BoxStyle(BaseModel):
    """
    Style information for drawing a box.
    """

    fillColor: Optional[dom.RGBA]
    """
    The background color for the box (default: transparent)
    """
    hatchColor: Optional[dom.RGBA]
    """
    The hatching color for the box (default: transparent)
    """


class ContrastAlgorithm(str, Enum):
    aa = "aa"
    aaa = "aaa"
    apca = "apca"


class HighlightConfig(BaseModel):
    """
    Configuration data for the highlighting of page elements.
    """

    showInfo: Optional[bool]
    """
    Whether the node info tooltip should be shown (default: false).
    """
    showStyles: Optional[bool]
    """
    Whether the node styles in the tooltip (default: false).
    """
    showRulers: Optional[bool]
    """
    Whether the rulers should be shown (default: false).
    """
    showAccessibilityInfo: Optional[bool]
    """
    Whether the a11y info should be shown (default: true).
    """
    showExtensionLines: Optional[bool]
    """
    Whether the extension lines from node to the rulers should be shown (default: false).
    """
    contentColor: Optional[dom.RGBA]
    """
    The content box highlight fill color (default: transparent).
    """
    paddingColor: Optional[dom.RGBA]
    """
    The padding highlight fill color (default: transparent).
    """
    borderColor: Optional[dom.RGBA]
    """
    The border highlight fill color (default: transparent).
    """
    marginColor: Optional[dom.RGBA]
    """
    The margin highlight fill color (default: transparent).
    """
    eventTargetColor: Optional[dom.RGBA]
    """
    The event target element highlight fill color (default: transparent).
    """
    shapeColor: Optional[dom.RGBA]
    """
    The shape outside fill color (default: transparent).
    """
    shapeMarginColor: Optional[dom.RGBA]
    """
    The shape margin fill color (default: transparent).
    """
    cssGridColor: Optional[dom.RGBA]
    """
    The grid layout color (default: transparent).
    """
    colorFormat: Optional["ColorFormat"]
    """
    The color format used to format color styles (default: hex).
    """
    gridHighlightConfig: Optional["GridHighlightConfig"]
    """
    The grid layout highlight configuration (default: all transparent).
    """
    flexContainerHighlightConfig: Optional["FlexContainerHighlightConfig"]
    """
    The flex container highlight configuration (default: all transparent).
    """
    flexItemHighlightConfig: Optional["FlexItemHighlightConfig"]
    """
    The flex item highlight configuration (default: all transparent).
    """
    contrastAlgorithm: Optional["ContrastAlgorithm"]
    """
    The contrast algorithm to use for the contrast ratio (default: aa).
    """
    containerQueryContainerHighlightConfig: Optional[
        "ContainerQueryContainerHighlightConfig"
    ]
    """
    The container query container highlight configuration (default: all transparent).
    """


class ColorFormat(str, Enum):
    rgb = "rgb"
    hsl = "hsl"
    hwb = "hwb"
    hex = "hex"


class GridNodeHighlightConfig(BaseModel):
    """
    Configurations for Persistent Grid Highlight
    """

    gridHighlightConfig: "GridHighlightConfig"
    """
    A descriptor for the highlight appearance.
    """
    nodeId: dom.NodeId
    """
    Identifier of the node to highlight.
    """


class FlexNodeHighlightConfig(BaseModel):
    flexContainerHighlightConfig: "FlexContainerHighlightConfig"
    """
    A descriptor for the highlight appearance of flex containers.
    """
    nodeId: dom.NodeId
    """
    Identifier of the node to highlight.
    """


class ScrollSnapContainerHighlightConfig(BaseModel):
    snapportBorder: Optional["LineStyle"]
    """
    The style of the snapport border (default: transparent)
    """
    snapAreaBorder: Optional["LineStyle"]
    """
    The style of the snap area border (default: transparent)
    """
    scrollMarginColor: Optional[dom.RGBA]
    """
    The margin highlight fill color (default: transparent).
    """
    scrollPaddingColor: Optional[dom.RGBA]
    """
    The padding highlight fill color (default: transparent).
    """


class ScrollSnapHighlightConfig(BaseModel):
    scrollSnapContainerHighlightConfig: "ScrollSnapContainerHighlightConfig"
    """
    A descriptor for the highlight appearance of scroll snap containers.
    """
    nodeId: dom.NodeId
    """
    Identifier of the node to highlight.
    """


class HingeConfig(BaseModel):
    """
    Configuration for dual screen hinge
    """

    rect: dom.Rect
    """
    A rectangle represent hinge
    """
    contentColor: Optional[dom.RGBA]
    """
    The content box highlight fill color (default: a dark color).
    """
    outlineColor: Optional[dom.RGBA]
    """
    The content box highlight outline color (default: transparent).
    """


class WindowControlsOverlayConfig(BaseModel):
    """
    Configuration for Window Controls Overlay
    """

    showCSS: bool
    """
    Whether the title bar CSS should be shown when emulating the Window Controls Overlay.
    """
    selectedPlatform: str
    """
    Selected platforms to show the overlay.
    """
    themeColor: str
    """
    The theme color defined in app manifest.
    """


class ContainerQueryHighlightConfig(BaseModel):
    containerQueryContainerHighlightConfig: "ContainerQueryContainerHighlightConfig"
    """
    A descriptor for the highlight appearance of container query containers.
    """
    nodeId: dom.NodeId
    """
    Identifier of the container node to highlight.
    """


class ContainerQueryContainerHighlightConfig(BaseModel):
    containerBorder: Optional["LineStyle"]
    """
    The style of the container border.
    """
    descendantBorder: Optional["LineStyle"]
    """
    The style of the descendants' borders.
    """


class IsolatedElementHighlightConfig(BaseModel):
    isolationModeHighlightConfig: "IsolationModeHighlightConfig"
    """
    A descriptor for the highlight appearance of an element in isolation mode.
    """
    nodeId: dom.NodeId
    """
    Identifier of the isolated element to highlight.
    """


class IsolationModeHighlightConfig(BaseModel):
    resizerColor: Optional[dom.RGBA]
    """
    The fill color of the resizers (default: transparent).
    """
    resizerHandleColor: Optional[dom.RGBA]
    """
    The fill color for resizer handles (default: transparent).
    """
    maskColor: Optional[dom.RGBA]
    """
    The fill color for the mask covering non-isolated elements (default: transparent).
    """


class InspectMode(str, Enum):
    searchForNode = "searchForNode"
    searchForUAShadowDOM = "searchForUAShadowDOM"
    captureAreaScreenshot = "captureAreaScreenshot"
    showDistances = "showDistances"
    none = "none"
