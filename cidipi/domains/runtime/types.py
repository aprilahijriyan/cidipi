# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import Any, Literal, Optional, TypeVar, Union

from pydantic import BaseModel

ScriptId = TypeVar("ScriptId", bound=str)
"""
Unique script identifier.
"""


class SerializationOptions(BaseModel):
    """
    Represents options for serialization. Overrides `generatePreview` and `returnByValue`.
    """

    serialization: Literal["deep", "json", "idOnly"]
    maxDepth: Optional[Union[float, int]]
    """
    Deep serialization depth. Default is full depth. Respected only in `deep` serialization mode.
    """
    additionalParameters: Optional[dict]
    """
    Embedder-specific parameters. For example if connected to V8 in Chrome these control DOM
serialization via `maxNodeDepth: integer` and `includeShadowTree: "none" | "open" | "all"`.
Values can be only of type string or integer.
    """


class DeepSerializedValue(BaseModel):
    """
    Represents deep serialized value.
    """

    type: Literal[
        "undefined",
        "null",
        "string",
        "number",
        "boolean",
        "bigint",
        "regexp",
        "date",
        "symbol",
        "array",
        "object",
        "function",
        "map",
        "set",
        "weakmap",
        "weakset",
        "error",
        "proxy",
        "promise",
        "typedarray",
        "arraybuffer",
        "node",
        "window",
        "generator",
    ]
    value: Optional[Any]
    objectId: Optional[str]
    weakLocalObjectReference: Optional[Union[float, int]]
    """
    Set if value reference met more then once during serialization. In such
case, value is provided only to one of the serialized values. Unique
per value in the scope of one CDP call.
    """


RemoteObjectId = TypeVar("RemoteObjectId", bound=str)
"""
Unique object identifier.
"""

UnserializableValue = TypeVar("UnserializableValue", bound=str)
"""
Primitive value which cannot be JSON-stringified. Includes values `-0`, `NaN`, `Infinity`,
`-Infinity`, and bigint literals.
"""


class RemoteObject(BaseModel):
    """
    Mirror object referencing original JavaScript object.
    """

    type: Literal[
        "object",
        "function",
        "undefined",
        "string",
        "number",
        "boolean",
        "symbol",
        "bigint",
    ]
    """
    Object type.
    """
    subtype: Optional[
        Literal[
            "array",
            "null",
            "node",
            "regexp",
            "date",
            "map",
            "set",
            "weakmap",
            "weakset",
            "iterator",
            "generator",
            "error",
            "proxy",
            "promise",
            "typedarray",
            "arraybuffer",
            "dataview",
            "webassemblymemory",
            "wasmvalue",
        ]
    ]
    """
    Object subtype hint. Specified for `object` type values only.
NOTE: If you change anything here, make sure to also update
`subtype` in `ObjectPreview` and `PropertyPreview` below.
    """
    className: Optional[str]
    """
    Object class (constructor) name. Specified for `object` type values only.
    """
    value: Optional[Any]
    """
    Remote object value in case of primitive values or JSON values (if it was requested).
    """
    unserializableValue: Optional["UnserializableValue"]
    """
    Primitive value which can not be JSON-stringified does not have `value`, but gets this
property.
    """
    description: Optional[str]
    """
    String representation of the object.
    """
    deepSerializedValue: Optional["DeepSerializedValue"]
    """
    Deep serialized value.
    """
    objectId: Optional["RemoteObjectId"]
    """
    Unique object identifier (for non-primitive values).
    """
    preview: Optional["ObjectPreview"]
    """
    Preview containing abbreviated property values. Specified for `object` type values only.
    """
    customPreview: Optional["CustomPreview"]


class CustomPreview(BaseModel):
    header: str
    """
    The JSON-stringified result of formatter.header(object, config) call.
It contains json ML array that represents RemoteObject.
    """
    bodyGetterId: Optional["RemoteObjectId"]
    """
    If formatter returns true as a result of formatter.hasBody call then bodyGetterId will
contain RemoteObjectId for the function that returns result of formatter.body(object, config) call.
The result value is json ML array.
    """


class ObjectPreview(BaseModel):
    """
    Object containing abbreviated remote object value.
    """

    type: Literal[
        "object",
        "function",
        "undefined",
        "string",
        "number",
        "boolean",
        "symbol",
        "bigint",
    ]
    """
    Object type.
    """
    subtype: Optional[
        Literal[
            "array",
            "null",
            "node",
            "regexp",
            "date",
            "map",
            "set",
            "weakmap",
            "weakset",
            "iterator",
            "generator",
            "error",
            "proxy",
            "promise",
            "typedarray",
            "arraybuffer",
            "dataview",
            "webassemblymemory",
            "wasmvalue",
        ]
    ]
    """
    Object subtype hint. Specified for `object` type values only.
    """
    description: Optional[str]
    """
    String representation of the object.
    """
    overflow: bool
    """
    True iff some of the properties or entries of the original object did not fit.
    """
    properties: list
    """
    List of the properties.
    """
    entries: Optional[list]
    """
    List of the entries. Specified for `map` and `set` subtype values only.
    """


class PropertyPreview(BaseModel):
    name: str
    """
    Property name.
    """
    type: Literal[
        "object",
        "function",
        "undefined",
        "string",
        "number",
        "boolean",
        "symbol",
        "accessor",
        "bigint",
    ]
    """
    Object type. Accessor means that the property itself is an accessor property.
    """
    value: Optional[str]
    """
    User-friendly property value string.
    """
    valuePreview: Optional["ObjectPreview"]
    """
    Nested value preview.
    """
    subtype: Optional[
        Literal[
            "array",
            "null",
            "node",
            "regexp",
            "date",
            "map",
            "set",
            "weakmap",
            "weakset",
            "iterator",
            "generator",
            "error",
            "proxy",
            "promise",
            "typedarray",
            "arraybuffer",
            "dataview",
            "webassemblymemory",
            "wasmvalue",
        ]
    ]
    """
    Object subtype hint. Specified for `object` type values only.
    """


class EntryPreview(BaseModel):
    key: Optional["ObjectPreview"]
    """
    Preview of the key. Specified for map-like collection entries.
    """
    value: "ObjectPreview"
    """
    Preview of the value.
    """


class PropertyDescriptor(BaseModel):
    """
    Object property descriptor.
    """

    name: str
    """
    Property name or symbol description.
    """
    value: Optional["RemoteObject"]
    """
    The value associated with the property.
    """
    writable: Optional[bool]
    """
    True if the value associated with the property may be changed (data descriptors only).
    """
    get: Optional["RemoteObject"]
    """
    A function which serves as a getter for the property, or `undefined` if there is no getter
(accessor descriptors only).
    """
    set: Optional["RemoteObject"]
    """
    A function which serves as a setter for the property, or `undefined` if there is no setter
(accessor descriptors only).
    """
    configurable: bool
    """
    True if the type of this property descriptor may be changed and if the property may be
deleted from the corresponding object.
    """
    enumerable: bool
    """
    True if this property shows up during enumeration of the properties on the corresponding
object.
    """
    wasThrown: Optional[bool]
    """
    True if the result was thrown during the evaluation.
    """
    isOwn: Optional[bool]
    """
    True if the property is owned for the object.
    """
    symbol: Optional["RemoteObject"]
    """
    Property symbol object, if the property is of the `symbol` type.
    """


class InternalPropertyDescriptor(BaseModel):
    """
    Object internal property descriptor. This property isn't normally visible in JavaScript code.
    """

    name: str
    """
    Conventional property name.
    """
    value: Optional["RemoteObject"]
    """
    The value associated with the property.
    """


class PrivatePropertyDescriptor(BaseModel):
    """
    Object private field descriptor.
    """

    name: str
    """
    Private property name.
    """
    value: Optional["RemoteObject"]
    """
    The value associated with the private property.
    """
    get: Optional["RemoteObject"]
    """
    A function which serves as a getter for the private property,
or `undefined` if there is no getter (accessor descriptors only).
    """
    set: Optional["RemoteObject"]
    """
    A function which serves as a setter for the private property,
or `undefined` if there is no setter (accessor descriptors only).
    """


class CallArgument(BaseModel):
    """
        Represents function call argument. Either remote object id `objectId`, primitive `value`,
    unserializable primitive value or neither of (for undefined) them should be specified.
    """

    value: Optional[Any]
    """
    Primitive value or serializable javascript object.
    """
    unserializableValue: Optional["UnserializableValue"]
    """
    Primitive value which can not be JSON-stringified.
    """
    objectId: Optional["RemoteObjectId"]
    """
    Remote object handle.
    """


ExecutionContextId = TypeVar("ExecutionContextId", bound=Union[float, int])
"""
Id of an execution context.
"""


class ExecutionContextDescription(BaseModel):
    """
    Description of an isolated world.
    """

    id: "ExecutionContextId"
    """
    Unique id of the execution context. It can be used to specify in which execution context
script evaluation should be performed.
    """
    origin: str
    """
    Execution context origin.
    """
    name: str
    """
    Human readable name describing given context.
    """
    uniqueId: str
    """
    A system-unique execution context identifier. Unlike the id, this is unique across
multiple processes, so can be reliably used to identify specific context while backend
performs a cross-process navigation.
    """
    auxData: Optional[dict]
    """
    Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'|'isolated'|'worker', frameId: string}
    """


class ExceptionDetails(BaseModel):
    """
        Detailed information about exception (or error) that was thrown during script compilation or
    execution.
    """

    exceptionId: Union[float, int]
    """
    Exception id.
    """
    text: str
    """
    Exception text, which should be used together with exception object when available.
    """
    lineNumber: Union[float, int]
    """
    Line number of the exception location (0-based).
    """
    columnNumber: Union[float, int]
    """
    Column number of the exception location (0-based).
    """
    scriptId: Optional["ScriptId"]
    """
    Script ID of the exception location.
    """
    url: Optional[str]
    """
    URL of the exception location, to be used when the script was not reported.
    """
    stackTrace: Optional["StackTrace"]
    """
    JavaScript stack trace if available.
    """
    exception: Optional["RemoteObject"]
    """
    Exception object if available.
    """
    executionContextId: Optional["ExecutionContextId"]
    """
    Identifier of the context where exception happened.
    """
    exceptionMetaData: Optional[dict]
    """
    Dictionary with entries of meta data that the client associated
with this exception, such as information about associated network
requests, etc.
    """


Timestamp = TypeVar("Timestamp", bound=Union[float, int])
"""
Number of milliseconds since epoch.
"""

TimeDelta = TypeVar("TimeDelta", bound=Union[float, int])
"""
Number of milliseconds.
"""


class CallFrame(BaseModel):
    """
    Stack entry for runtime errors and assertions.
    """

    functionName: str
    """
    JavaScript function name.
    """
    scriptId: "ScriptId"
    """
    JavaScript script id.
    """
    url: str
    """
    JavaScript script name or url.
    """
    lineNumber: Union[float, int]
    """
    JavaScript script line number (0-based).
    """
    columnNumber: Union[float, int]
    """
    JavaScript script column number (0-based).
    """


class StackTrace(BaseModel):
    """
    Call frames for assertions or error messages.
    """

    description: Optional[str]
    """
    String label of this stack trace. For async traces this may be a name of the function that
initiated the async call.
    """
    callFrames: list
    """
    JavaScript function name.
    """
    parent: Optional["StackTrace"]
    """
    Asynchronous JavaScript stack trace that preceded this stack, if available.
    """
    parentId: Optional["StackTraceId"]
    """
    Asynchronous JavaScript stack trace that preceded this stack, if available.
    """


UniqueDebuggerId = TypeVar("UniqueDebuggerId", bound=str)
"""
Unique identifier of current debugger.
"""


class StackTraceId(BaseModel):
    """
        If `debuggerId` is set stack trace comes from another debugger and can be resolved there. This
    allows to track cross-debugger calls. See `Runtime.StackTrace` and `Debugger.paused` for usages.
    """

    id: str
    debuggerId: Optional["UniqueDebuggerId"]
