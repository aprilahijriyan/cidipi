# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.domains import network, page
from cidipi.domains.storage.types import *


class cacheStorageContentUpdated(BaseModel):
    """
    A cache's contents have been modified.
    """

    __domain__: str = PrivateAttr("Storage")
    origin: str
    """
    Origin to update.
    """
    storageKey: str
    """
    Storage key to update.
    """
    bucketId: str
    """
    Storage bucket to update.
    """
    cacheName: str
    """
    Name of cache in origin.
    """


class cacheStorageListUpdated(BaseModel):
    """
    A cache has been added/deleted.
    """

    __domain__: str = PrivateAttr("Storage")
    origin: str
    """
    Origin to update.
    """
    storageKey: str
    """
    Storage key to update.
    """
    bucketId: str
    """
    Storage bucket to update.
    """


class indexedDBContentUpdated(BaseModel):
    """
    The origin's IndexedDB object store has been modified.
    """

    __domain__: str = PrivateAttr("Storage")
    origin: str
    """
    Origin to update.
    """
    storageKey: str
    """
    Storage key to update.
    """
    bucketId: str
    """
    Storage bucket to update.
    """
    databaseName: str
    """
    Database to update.
    """
    objectStoreName: str
    """
    ObjectStore to update.
    """


class indexedDBListUpdated(BaseModel):
    """
    The origin's IndexedDB database list has been modified.
    """

    __domain__: str = PrivateAttr("Storage")
    origin: str
    """
    Origin to update.
    """
    storageKey: str
    """
    Storage key to update.
    """
    bucketId: str
    """
    Storage bucket to update.
    """


class interestGroupAccessed(BaseModel):
    """
        One of the interest groups was accessed. Note that these events are global
    to all targets sharing an interest group store.
    """

    __domain__: str = PrivateAttr("Storage")
    accessTime: network.TimeSinceEpoch
    type: "InterestGroupAccessType"
    ownerOrigin: str
    name: str
    componentSellerOrigin: Optional[str]
    """
    For topLevelBid/topLevelAdditionalBid, and when appropriate,
win and additionalBidWin
    """
    bid: Optional[Union[float, int]]
    """
    For bid or somethingBid event, if done locally and not on a server.
    """
    bidCurrency: Optional[str]
    uniqueAuctionId: Optional["InterestGroupAuctionId"]
    """
    For non-global events --- links to interestGroupAuctionEvent
    """


class interestGroupAuctionEventOccurred(BaseModel):
    """
        An auction involving interest groups is taking place. These events are
    target-specific.
    """

    __domain__: str = PrivateAttr("Storage")
    eventTime: network.TimeSinceEpoch
    type: "InterestGroupAuctionEventType"
    uniqueAuctionId: "InterestGroupAuctionId"
    parentAuctionId: Optional["InterestGroupAuctionId"]
    """
    Set for child auctions.
    """
    auctionConfig: Optional[dict]
    """
    Set for started and configResolved
    """


class interestGroupAuctionNetworkRequestCreated(BaseModel):
    """
        Specifies which auctions a particular network fetch may be related to, and
    in what role. Note that it is not ordered with respect to
    Network.requestWillBeSent (but will happen before loadingFinished
    loadingFailed).
    """

    __domain__: str = PrivateAttr("Storage")
    type: "InterestGroupAuctionFetchType"
    requestId: network.RequestId
    auctions: list
    """
    This is the set of the auctions using the worklet that issued this
request.  In the case of trusted signals, it's possible that only some of
them actually care about the keys being queried.
    """


class sharedStorageAccessed(BaseModel):
    """
        Shared storage was accessed by the associated page.
    The following parameters are included in all events.
    """

    __domain__: str = PrivateAttr("Storage")
    accessTime: network.TimeSinceEpoch
    """
    Time of the access.
    """
    type: "SharedStorageAccessType"
    """
    Enum value indicating the Shared Storage API method invoked.
    """
    mainFrameId: page.FrameId
    """
    DevTools Frame Token for the primary frame tree's root.
    """
    ownerOrigin: str
    """
    Serialized origin for the context that invoked the Shared Storage API.
    """
    params: "SharedStorageAccessParams"
    """
    The sub-parameters wrapped by `params` are all optional and their
presence/absence depends on `type`.
    """


class storageBucketCreatedOrUpdated(BaseModel):
    __domain__: str = PrivateAttr("Storage")
    bucketInfo: "StorageBucketInfo"


class storageBucketDeleted(BaseModel):
    __domain__: str = PrivateAttr("Storage")
    bucketId: str


class attributionReportingSourceRegistered(BaseModel):
    __domain__: str = PrivateAttr("Storage")
    registration: "AttributionReportingSourceRegistration"
    result: "AttributionReportingSourceRegistrationResult"


class attributionReportingTriggerRegistered(BaseModel):
    __domain__: str = PrivateAttr("Storage")
    registration: "AttributionReportingTriggerRegistration"
    eventLevel: "AttributionReportingEventLevelResult"
    aggregatable: "AttributionReportingAggregatableResult"
