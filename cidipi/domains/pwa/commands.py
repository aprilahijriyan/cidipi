# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.domains.pwa.types import *


class getOsAppState(BaseModel):
    """
    Returns the following OS state for the given manifest id.
    """

    __domain__: str = PrivateAttr("PWA")
    manifestId: str
    """
    The id from the webapp's manifest file, commonly it's the url of the
site installing the webapp. See
https://web.dev/learn/pwa/web-app-manifest.
    """


class install(BaseModel):
    """
        Installs the given manifest identity, optionally using the given install_url
    or IWA bundle location.

    TODO(crbug.com/337872319) Support IWA to meet the following specific
    requirement.
    IWA-specific install description: If the manifest_id is isolated-app://,
    install_url_or_bundle_url is required, and can be either an http(s) URL or
    file:// URL pointing to a signed web bundle (.swbn). The .swbn file's
    signing key must correspond to manifest_id. If Chrome is not in IWA dev
    mode, the installation will fail, regardless of the state of the allowlist.
    """

    __domain__: str = PrivateAttr("PWA")
    manifestId: str
    installUrlOrBundleUrl: Optional[str]
    """
    The location of the app or bundle overriding the one derived from the
manifestId.
    """


class uninstall(BaseModel):
    """
    Uninstals the given manifest_id and closes any opened app windows.
    """

    __domain__: str = PrivateAttr("PWA")
    manifestId: str


class launch(BaseModel):
    """
        Launches the installed web app, or an url in the same web app instead of the
    default start url if it is provided. Returns a page Target.TargetID which
    can be used to attach to via Target.attachToTarget or similar APIs.
    """

    __domain__: str = PrivateAttr("PWA")
    manifestId: str
    url: Optional[str]


class launchFilesInApp(BaseModel):
    """
        Opens one or more local files from an installed web app identified by its
    manifestId. The web app needs to have file handlers registered to process
    the files. The API returns one or more page Target.TargetIDs which can be
    used to attach to via Target.attachToTarget or similar APIs.
    If some files in the parameters cannot be handled by the web app, they will
    be ignored. If none of the files can be handled, this API returns an error.
    If no files provided as the parameter, this API also returns an error.

    According to the definition of the file handlers in the manifest file, one
    Target.TargetID may represent a page handling one or more files. The order
    of the returned Target.TargetIDs is not guaranteed.

    TODO(crbug.com/339454034): Check the existences of the input files.
    """

    __domain__: str = PrivateAttr("PWA")
    manifestId: str
    files: list


class openCurrentPageInApp(BaseModel):
    """
        Opens the current page in its web app identified by the manifest id, needs
    to be called on a page target. This function returns immediately without
    waiting for the app finishing loading.
    """

    __domain__: str = PrivateAttr("PWA")
    manifestId: str
