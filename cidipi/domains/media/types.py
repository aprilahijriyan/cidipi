# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import Literal, TypeVar, Union

from pydantic import BaseModel

PlayerId = TypeVar("PlayerId", bound=str)
"""
Players will get an ID that is unique within the agent context.
"""

Timestamp = TypeVar("Timestamp", bound=Union[float, int])


class PlayerMessage(BaseModel):
    """
        Have one type per entry in MediaLogRecord::Type
    Corresponds to kMessage
    """

    level: Literal["error", "warning", "info", "debug"]
    """
    Keep in sync with MediaLogMessageLevel
We are currently keeping the message level 'error' separate from the
PlayerError type because right now they represent different things,
this one being a DVLOG(ERROR) style log message that gets printed
based on what log level is selected in the UI, and the other is a
representation of a media::PipelineStatus object. Soon however we're
going to be moving away from using PipelineStatus for errors and
introducing a new error type which should hopefully let us integrate
the error log level into the PlayerError type.
    """
    message: str


class PlayerProperty(BaseModel):
    """
    Corresponds to kMediaPropertyChange
    """

    name: str
    value: str


class PlayerEvent(BaseModel):
    """
    Corresponds to kMediaEventTriggered
    """

    timestamp: "Timestamp"
    value: str


class PlayerErrorSourceLocation(BaseModel):
    """
        Represents logged source line numbers reported in an error.
    NOTE: file and line are from chromium c++ implementation code, not js.
    """

    file: str
    line: Union[float, int]


class PlayerError(BaseModel):
    """
    Corresponds to kMediaError
    """

    errorType: str
    code: Union[float, int]
    """
    Code is the numeric enum entry for a specific set of error codes, such
as PipelineStatusCodes in media/base/pipeline_status.h
    """
    stack: list
    """
    A trace of where this error was caused / where it passed through.
    """
    cause: list
    """
    Errors potentially have a root cause error, ie, a DecoderError might be
caused by an WindowsError
    """
    data: dict
    """
    Extra data attached to an error, such as an HRESULT, Video Codec, etc.
    """
