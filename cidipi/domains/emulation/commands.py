# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi.domains import dom, network, page
from cidipi.domains.emulation.types import *


class canEmulate(BaseModel):
    """
    Tells whether emulation is supported.
    """

    __domain__: str = PrivateAttr("Emulation")


class clearDeviceMetricsOverride(BaseModel):
    """
    Clears the overridden device metrics.
    """

    __domain__: str = PrivateAttr("Emulation")


class clearGeolocationOverride(BaseModel):
    """
    Clears the overridden Geolocation Position and Error.
    """

    __domain__: str = PrivateAttr("Emulation")


class resetPageScaleFactor(BaseModel):
    """
    Requests that page scale factor is reset to initial values.
    """

    __domain__: str = PrivateAttr("Emulation")


class setFocusEmulationEnabled(BaseModel):
    """
    Enables or disables simulating a focused and active page.
    """

    __domain__: str = PrivateAttr("Emulation")
    enabled: bool
    """
    Whether to enable to disable focus emulation.
    """


class setAutoDarkModeOverride(BaseModel):
    """
    Automatically render all web contents using a dark theme.
    """

    __domain__: str = PrivateAttr("Emulation")
    enabled: Optional[bool]
    """
    Whether to enable or disable automatic dark mode.
If not specified, any existing override will be cleared.
    """


class setCPUThrottlingRate(BaseModel):
    """
    Enables CPU throttling to emulate slow CPUs.
    """

    __domain__: str = PrivateAttr("Emulation")
    rate: Union[float, int]
    """
    Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
    """


class setDefaultBackgroundColorOverride(BaseModel):
    """
        Sets or clears an override of the default background color of the frame. This override is used
    if the content does not specify one.
    """

    __domain__: str = PrivateAttr("Emulation")
    color: Optional[dom.RGBA]
    """
    RGBA of the default background color. If not specified, any existing override will be
cleared.
    """


class setDeviceMetricsOverride(BaseModel):
    """
        Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
    window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
    query results).
    """

    __domain__: str = PrivateAttr("Emulation")
    width: Union[float, int]
    """
    Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    """
    height: Union[float, int]
    """
    Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
    """
    deviceScaleFactor: Union[float, int]
    """
    Overriding device scale factor value. 0 disables the override.
    """
    mobile: bool
    """
    Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text
autosizing and more.
    """
    scale: Optional[Union[float, int]]
    """
    Scale to apply to resulting view image.
    """
    screenWidth: Optional[Union[float, int]]
    """
    Overriding screen width value in pixels (minimum 0, maximum 10000000).
    """
    screenHeight: Optional[Union[float, int]]
    """
    Overriding screen height value in pixels (minimum 0, maximum 10000000).
    """
    positionX: Optional[Union[float, int]]
    """
    Overriding view X position on screen in pixels (minimum 0, maximum 10000000).
    """
    positionY: Optional[Union[float, int]]
    """
    Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).
    """
    dontSetVisibleSize: Optional[bool]
    """
    Do not set visible view size, rely upon explicit setVisibleSize call.
    """
    screenOrientation: Optional["ScreenOrientation"]
    """
    Screen orientation override.
    """
    viewport: Optional[page.Viewport]
    """
    If set, the visible area of the page will be overridden to this viewport. This viewport
change is not observed by the page, e.g. viewport-relative elements do not change positions.
    """
    displayFeature: Optional["DisplayFeature"]
    """
    If set, the display feature of a multi-segment screen. If not set, multi-segment support
is turned-off.
    """
    devicePosture: Optional["DevicePosture"]
    """
    If set, the posture of a foldable device. If not set the posture is set
to continuous.
Deprecated, use Emulation.setDevicePostureOverride.
    """


class setDevicePostureOverride(BaseModel):
    """
        Start reporting the given posture value to the Device Posture API.
    This override can also be set in setDeviceMetricsOverride().
    """

    __domain__: str = PrivateAttr("Emulation")
    posture: "DevicePosture"


class clearDevicePostureOverride(BaseModel):
    """
        Clears a device posture override set with either setDeviceMetricsOverride()
    or setDevicePostureOverride() and starts using posture information from the
    platform again.
    Does nothing if no override is set.
    """

    __domain__: str = PrivateAttr("Emulation")


class setScrollbarsHidden(BaseModel):
    __domain__: str = PrivateAttr("Emulation")
    hidden: bool
    """
    Whether scrollbars should be always hidden.
    """


class setDocumentCookieDisabled(BaseModel):
    __domain__: str = PrivateAttr("Emulation")
    disabled: bool
    """
    Whether document.coookie API should be disabled.
    """


class setEmitTouchEventsForMouse(BaseModel):
    __domain__: str = PrivateAttr("Emulation")
    enabled: bool
    """
    Whether touch emulation based on mouse input should be enabled.
    """
    configuration: Optional[Literal["mobile", "desktop"]]
    """
    Touch/gesture events configuration. Default: current platform.
    """


class setEmulatedMedia(BaseModel):
    """
    Emulates the given media type or media feature for CSS media queries.
    """

    __domain__: str = PrivateAttr("Emulation")
    media: Optional[str]
    """
    Media type to emulate. Empty string disables the override.
    """
    features: Optional[list]
    """
    Media features to emulate.
    """


class setEmulatedVisionDeficiency(BaseModel):
    """
    Emulates the given vision deficiency.
    """

    __domain__: str = PrivateAttr("Emulation")
    type: Literal[
        "none",
        "blurredVision",
        "reducedContrast",
        "achromatopsia",
        "deuteranopia",
        "protanopia",
        "tritanopia",
    ]
    """
    Vision deficiency to emulate. Order: best-effort emulations come first, followed by any
physiologically accurate emulations for medically recognized color vision deficiencies.
    """


class setGeolocationOverride(BaseModel):
    """
        Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
    unavailable.
    """

    __domain__: str = PrivateAttr("Emulation")
    latitude: Optional[Union[float, int]]
    """
    Mock latitude
    """
    longitude: Optional[Union[float, int]]
    """
    Mock longitude
    """
    accuracy: Optional[Union[float, int]]
    """
    Mock accuracy
    """


class getOverriddenSensorInformation(BaseModel):
    __domain__: str = PrivateAttr("Emulation")
    type: "SensorType"


class setSensorOverrideEnabled(BaseModel):
    """
        Overrides a platform sensor of a given type. If |enabled| is true, calls to
    Sensor.start() will use a virtual sensor as backend rather than fetching
    data from a real hardware sensor. Otherwise, existing virtual
    sensor-backend Sensor objects will fire an error event and new calls to
    Sensor.start() will attempt to use a real sensor instead.
    """

    __domain__: str = PrivateAttr("Emulation")
    enabled: bool
    type: "SensorType"
    metadata: Optional["SensorMetadata"]


class setSensorOverrideReadings(BaseModel):
    """
        Updates the sensor readings reported by a sensor type previously overridden
    by setSensorOverrideEnabled.
    """

    __domain__: str = PrivateAttr("Emulation")
    type: "SensorType"
    reading: "SensorReading"


class setIdleOverride(BaseModel):
    """
    Overrides the Idle state.
    """

    __domain__: str = PrivateAttr("Emulation")
    isUserActive: bool
    """
    Mock isUserActive
    """
    isScreenUnlocked: bool
    """
    Mock isScreenUnlocked
    """


class clearIdleOverride(BaseModel):
    """
    Clears Idle state overrides.
    """

    __domain__: str = PrivateAttr("Emulation")


class setNavigatorOverrides(BaseModel):
    """
    Overrides value returned by the javascript navigator object.
    """

    __domain__: str = PrivateAttr("Emulation")
    platform: str
    """
    The platform navigator.platform should return.
    """


class setPageScaleFactor(BaseModel):
    """
    Sets a specified page scale factor.
    """

    __domain__: str = PrivateAttr("Emulation")
    pageScaleFactor: Union[float, int]
    """
    Page scale factor.
    """


class setScriptExecutionDisabled(BaseModel):
    """
    Switches script execution in the page.
    """

    __domain__: str = PrivateAttr("Emulation")
    value: bool
    """
    Whether script execution should be disabled in the page.
    """


class setTouchEmulationEnabled(BaseModel):
    """
    Enables touch on platforms which do not support them.
    """

    __domain__: str = PrivateAttr("Emulation")
    enabled: bool
    """
    Whether the touch event emulation should be enabled.
    """
    maxTouchPoints: Optional[Union[float, int]]
    """
    Maximum touch points supported. Defaults to one.
    """


class setVirtualTimePolicy(BaseModel):
    """
        Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
    the current virtual time policy.  Note this supersedes any previous time budget.
    """

    __domain__: str = PrivateAttr("Emulation")
    policy: "VirtualTimePolicy"
    budget: Optional[Union[float, int]]
    """
    If set, after this many virtual milliseconds have elapsed virtual time will be paused and a
virtualTimeBudgetExpired event is sent.
    """
    maxVirtualTimeTaskStarvationCount: Optional[Union[float, int]]
    """
    If set this specifies the maximum number of tasks that can be run before virtual is forced
forwards to prevent deadlock.
    """
    initialVirtualTime: Optional[network.TimeSinceEpoch]
    """
    If set, base::Time::Now will be overridden to initially return this value.
    """


class setLocaleOverride(BaseModel):
    """
    Overrides default host system locale with the specified one.
    """

    __domain__: str = PrivateAttr("Emulation")
    locale: Optional[str]
    """
    ICU style C locale (e.g. "en_US"). If not specified or empty, disables the override and
restores default host system locale.
    """


class setTimezoneOverride(BaseModel):
    """
    Overrides default host system timezone with the specified one.
    """

    __domain__: str = PrivateAttr("Emulation")
    timezoneId: str
    """
    The timezone identifier. List of supported timezones:
https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt
If empty, disables the override and restores default host system timezone.
    """


class setVisibleSize(BaseModel):
    """
        Resizes the frame/viewport of the page. Note that this does not affect the frame's container
    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
    on Android.
    """

    __domain__: str = PrivateAttr("Emulation")
    width: Union[float, int]
    """
    Frame width (DIP).
    """
    height: Union[float, int]
    """
    Frame height (DIP).
    """


class setDisabledImageTypes(BaseModel):
    __domain__: str = PrivateAttr("Emulation")
    imageTypes: list
    """
    Image types to disable.
    """


class setHardwareConcurrencyOverride(BaseModel):
    __domain__: str = PrivateAttr("Emulation")
    hardwareConcurrency: Union[float, int]
    """
    Hardware concurrency to report
    """


class setUserAgentOverride(BaseModel):
    """
        Allows overriding user agent with the given string.
    `userAgentMetadata` must be set for Client Hint headers to be sent.
    """

    __domain__: str = PrivateAttr("Emulation")
    userAgent: str
    """
    User agent to use.
    """
    acceptLanguage: Optional[str]
    """
    Browser language to emulate.
    """
    platform: Optional[str]
    """
    The platform navigator.platform should return.
    """
    userAgentMetadata: Optional["UserAgentMetadata"]
    """
    To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """


class setAutomationOverride(BaseModel):
    """
    Allows overriding the automation flag.
    """

    __domain__: str = PrivateAttr("Emulation")
    enabled: bool
    """
    Whether the override should be enabled.
    """
