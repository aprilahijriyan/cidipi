# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi import emulation, page
from cidipi.network.types import *


class setAcceptedEncodings(BaseModel):
    """
    Sets a list of content encodings that will be accepted. Empty list means no encoding is accepted.
    """

    __domain__: str = PrivateAttr("Network")
    encodings: list
    """
    List of accepted content encodings.
    """


class clearAcceptedEncodingsOverride(BaseModel):
    """
    Clears accepted encodings set by setAcceptedEncodings
    """

    __domain__: str = PrivateAttr("Network")


class canClearBrowserCache(BaseModel):
    """
    Tells whether clearing browser cache is supported.
    """

    __domain__: str = PrivateAttr("Network")


class canClearBrowserCookies(BaseModel):
    """
    Tells whether clearing browser cookies is supported.
    """

    __domain__: str = PrivateAttr("Network")


class canEmulateNetworkConditions(BaseModel):
    """
    Tells whether emulation of network conditions is supported.
    """

    __domain__: str = PrivateAttr("Network")


class clearBrowserCache(BaseModel):
    """
    Clears browser cache.
    """

    __domain__: str = PrivateAttr("Network")


class clearBrowserCookies(BaseModel):
    """
    Clears browser cookies.
    """

    __domain__: str = PrivateAttr("Network")


class continueInterceptedRequest(BaseModel):
    """
        Response to Network.requestIntercepted which either modifies the request to continue with any
    modifications, or blocks it, or completes it with the provided response bytes. If a network
    fetch occurs as a result which encounters a redirect an additional Network.requestIntercepted
    event will be sent with the same InterceptionId.
    Deprecated, use Fetch.continueRequest, Fetch.fulfillRequest and Fetch.failRequest instead.
    """

    __domain__: str = PrivateAttr("Network")
    interceptionId: "InterceptionId"
    errorReason: Optional["ErrorReason"]
    """
    If set this causes the request to fail with the given reason. Passing `Aborted` for requests
marked with `isNavigationRequest` also cancels the navigation. Must not be set in response
to an authChallenge.
    """
    rawResponse: Optional[str]
    """
    If set the requests completes using with the provided base64 encoded raw response, including
HTTP status line and headers etc... Must not be set in response to an authChallenge. (Encoded as a base64 string when passed over JSON)
    """
    url: Optional[str]
    """
    If set the request url will be modified in a way that's not observable by page. Must not be
set in response to an authChallenge.
    """
    method: Optional[str]
    """
    If set this allows the request method to be overridden. Must not be set in response to an
authChallenge.
    """
    postData: Optional[str]
    """
    If set this allows postData to be set. Must not be set in response to an authChallenge.
    """
    headers: Optional["Headers"]
    """
    If set this allows the request headers to be changed. Must not be set in response to an
authChallenge.
    """
    authChallengeResponse: Optional["AuthChallengeResponse"]
    """
    Response to a requestIntercepted with an authChallenge. Must not be set otherwise.
    """


class deleteCookies(BaseModel):
    """
    Deletes browser cookies with matching name and url or domain/path/partitionKey pair.
    """

    __domain__: str = PrivateAttr("Network")
    name: str
    """
    Name of the cookies to remove.
    """
    url: Optional[str]
    """
    If specified, deletes all the cookies with the given name where domain and path match
provided URL.
    """
    domain: Optional[str]
    """
    If specified, deletes only cookies with the exact domain.
    """
    path: Optional[str]
    """
    If specified, deletes only cookies with the exact path.
    """
    partitionKey: Optional["CookiePartitionKey"]
    """
    If specified, deletes only cookies with the the given name and partitionKey where
all partition key attributes match the cookie partition key attribute.
    """


class disable(BaseModel):
    """
    Disables network tracking, prevents network events from being sent to the client.
    """

    __domain__: str = PrivateAttr("Network")


class emulateNetworkConditions(BaseModel):
    """
    Activates emulation of network conditions.
    """

    __domain__: str = PrivateAttr("Network")
    offline: bool
    """
    True to emulate internet disconnection.
    """
    latency: Union[float, int]
    """
    Minimum latency from request sent to response headers received (ms).
    """
    downloadThroughput: Union[float, int]
    """
    Maximal aggregated download throughput (bytes/sec). -1 disables download throttling.
    """
    uploadThroughput: Union[float, int]
    """
    Maximal aggregated upload throughput (bytes/sec).  -1 disables upload throttling.
    """
    connectionType: Optional["ConnectionType"]
    """
    Connection type if known.
    """
    packetLoss: Optional[Union[float, int]]
    """
    WebRTC packet loss (percent, 0-100). 0 disables packet loss emulation, 100 drops all the packets.
    """
    packetQueueLength: Optional[Union[float, int]]
    """
    WebRTC packet queue length (packet). 0 removes any queue length limitations.
    """
    packetReordering: Optional[bool]
    """
    WebRTC packetReordering feature.
    """


class enable(BaseModel):
    """
    Enables network tracking, network events will now be delivered to the client.
    """

    __domain__: str = PrivateAttr("Network")
    maxTotalBufferSize: Optional[Union[float, int]]
    """
    Buffer size in bytes to use when preserving network payloads (XHRs, etc).
    """
    maxResourceBufferSize: Optional[Union[float, int]]
    """
    Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).
    """
    maxPostDataSize: Optional[Union[float, int]]
    """
    Longest post body size (in bytes) that would be included in requestWillBeSent notification
    """


class getAllCookies(BaseModel):
    """
        Returns all browser cookies. Depending on the backend support, will return detailed cookie
    information in the `cookies` field.
    Deprecated. Use Storage.getCookies instead.
    """

    __domain__: str = PrivateAttr("Network")


class getCertificate(BaseModel):
    """
    Returns the DER-encoded certificate.
    """

    __domain__: str = PrivateAttr("Network")
    origin: str
    """
    Origin to get certificate for.
    """


class getCookies(BaseModel):
    """
        Returns all browser cookies for the current URL. Depending on the backend support, will return
    detailed cookie information in the `cookies` field.
    """

    __domain__: str = PrivateAttr("Network")
    urls: Optional[list]
    """
    The list of URLs for which applicable cookies will be fetched.
If not specified, it's assumed to be set to the list containing
the URLs of the page and all of its subframes.
    """


class getResponseBody(BaseModel):
    """
    Returns content served for the given request.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Identifier of the network request to get content for.
    """


class getRequestPostData(BaseModel):
    """
    Returns post data sent with the request. Returns an error when no data was sent with the request.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Identifier of the network request to get content for.
    """


class getResponseBodyForInterception(BaseModel):
    """
    Returns content served for the given currently intercepted request.
    """

    __domain__: str = PrivateAttr("Network")
    interceptionId: "InterceptionId"
    """
    Identifier for the intercepted request to get body for.
    """


class takeResponseBodyForInterceptionAsStream(BaseModel):
    """
        Returns a handle to the stream representing the response body. Note that after this command,
    the intercepted request can't be continued as is -- you either need to cancel it or to provide
    the response body. The stream only supports sequential read, IO.read will fail if the position
    is specified.
    """

    __domain__: str = PrivateAttr("Network")
    interceptionId: "InterceptionId"


class replayXHR(BaseModel):
    """
        This method sends a new XMLHttpRequest which is identical to the original one. The following
    parameters should be identical: method, url, async, request body, extra headers, withCredentials
    attribute, user, password.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Identifier of XHR to replay.
    """


class searchInResponseBody(BaseModel):
    """
    Searches for given string in response content.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Identifier of the network response to search.
    """
    query: str
    """
    String to search for.
    """
    caseSensitive: Optional[bool]
    """
    If true, search is case sensitive.
    """
    isRegex: Optional[bool]
    """
    If true, treats string parameter as regex.
    """


class setBlockedURLs(BaseModel):
    """
    Blocks URLs from loading.
    """

    __domain__: str = PrivateAttr("Network")
    urls: list
    """
    URL patterns to block. Wildcards ('*') are allowed.
    """


class setBypassServiceWorker(BaseModel):
    """
    Toggles ignoring of service worker for each request.
    """

    __domain__: str = PrivateAttr("Network")
    bypass: bool
    """
    Bypass service worker and load from network.
    """


class setCacheDisabled(BaseModel):
    """
    Toggles ignoring cache for each request. If `true`, cache will not be used.
    """

    __domain__: str = PrivateAttr("Network")
    cacheDisabled: bool
    """
    Cache disabled state.
    """


class setCookie(BaseModel):
    """
    Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.
    """

    __domain__: str = PrivateAttr("Network")
    name: str
    """
    Cookie name.
    """
    value: str
    """
    Cookie value.
    """
    url: Optional[str]
    """
    The request-URI to associate with the setting of the cookie. This value can affect the
default domain, path, source port, and source scheme values of the created cookie.
    """
    domain: Optional[str]
    """
    Cookie domain.
    """
    path: Optional[str]
    """
    Cookie path.
    """
    secure: Optional[bool]
    """
    True if cookie is secure.
    """
    httpOnly: Optional[bool]
    """
    True if cookie is http-only.
    """
    sameSite: Optional["CookieSameSite"]
    """
    Cookie SameSite type.
    """
    expires: Optional["TimeSinceEpoch"]
    """
    Cookie expiration date, session cookie if not set
    """
    priority: Optional["CookiePriority"]
    """
    Cookie Priority type.
    """
    sameParty: Optional[bool]
    """
    True if cookie is SameParty.
    """
    sourceScheme: Optional["CookieSourceScheme"]
    """
    Cookie source scheme type.
    """
    sourcePort: Optional[Union[float, int]]
    """
    Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port.
An unspecified port value allows protocol clients to emulate legacy cookie scope for the port.
This is a temporary ability and it will be removed in the future.
    """
    partitionKey: Optional["CookiePartitionKey"]
    """
    Cookie partition key. If not set, the cookie will be set as not partitioned.
    """


class setCookies(BaseModel):
    """
    Sets given cookies.
    """

    __domain__: str = PrivateAttr("Network")
    cookies: list
    """
    Cookies to be set.
    """


class setExtraHTTPHeaders(BaseModel):
    """
    Specifies whether to always send extra HTTP headers with the requests from this page.
    """

    __domain__: str = PrivateAttr("Network")
    headers: "Headers"
    """
    Map with extra HTTP headers.
    """


class setAttachDebugStack(BaseModel):
    """
    Specifies whether to attach a page script stack id in requests
    """

    __domain__: str = PrivateAttr("Network")
    enabled: bool
    """
    Whether to attach a page script stack for debugging purpose.
    """


class setRequestInterception(BaseModel):
    """
        Sets the requests to intercept that match the provided patterns and optionally resource types.
    Deprecated, please use Fetch.enable instead.
    """

    __domain__: str = PrivateAttr("Network")
    patterns: list
    """
    Requests matching any of these patterns will be forwarded and wait for the corresponding
continueInterceptedRequest call.
    """


class setUserAgentOverride(BaseModel):
    """
    Allows overriding user agent with the given string.
    """

    __domain__: str = PrivateAttr("Network")
    userAgent: str
    """
    User agent to use.
    """
    acceptLanguage: Optional[str]
    """
    Browser language to emulate.
    """
    platform: Optional[str]
    """
    The platform navigator.platform should return.
    """
    userAgentMetadata: Optional[emulation.UserAgentMetadata]
    """
    To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData
    """


class streamResourceContent(BaseModel):
    """
        Enables streaming of the response for the given requestId.
    If enabled, the dataReceived event contains the data that was received during streaming.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Identifier of the request to stream.
    """


class getSecurityIsolationStatus(BaseModel):
    """
    Returns information about the COEP/COOP isolation status.
    """

    __domain__: str = PrivateAttr("Network")
    frameId: Optional[page.FrameId]
    """
    If no frameId is provided, the status of the target is provided.
    """


class enableReportingApi(BaseModel):
    """
        Enables tracking for the Reporting API, events generated by the Reporting API will now be delivered to the client.
    Enabling triggers 'reportingApiReportAdded' for all existing reports.
    """

    __domain__: str = PrivateAttr("Network")
    enable: bool
    """
    Whether to enable or disable events for the Reporting API
    """


class loadNetworkResource(BaseModel):
    """
    Fetches the resource and returns the content.
    """

    __domain__: str = PrivateAttr("Network")
    frameId: Optional[page.FrameId]
    """
    Frame id to get the resource for. Mandatory for frame targets, and
should be omitted for worker targets.
    """
    url: str
    """
    URL of the resource to get content for.
    """
    options: "LoadNetworkResourceOptions"
    """
    Options for the request.
    """
