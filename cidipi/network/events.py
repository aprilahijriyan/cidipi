# AUTO-GENERATED By cidipi/tools/generator.py. DO NOT EDIT.

from typing import *

from pydantic import BaseModel, PrivateAttr

from cidipi import page
from cidipi.network.types import *


class dataReceived(BaseModel):
    """
    Fired when data chunk was received over the network.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """
    dataLength: Union[float, int]
    """
    Data chunk length.
    """
    encodedDataLength: Union[float, int]
    """
    Actual bytes received (might be less than dataLength for compressed encodings).
    """
    data: Optional[str]
    """
    Data that was received. (Encoded as a base64 string when passed over JSON)
    """


class eventSourceMessageReceived(BaseModel):
    """
    Fired when EventSource message is received.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """
    eventName: str
    """
    Message type.
    """
    eventId: str
    """
    Message identifier.
    """
    data: str
    """
    Message content.
    """


class loadingFailed(BaseModel):
    """
    Fired when HTTP request has failed to load.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """
    type: "ResourceType"
    """
    Resource type.
    """
    errorText: str
    """
    Error message. List of network errors: https://cs.chromium.org/chromium/src/net/base/net_error_list.h
    """
    canceled: Optional[bool]
    """
    True if loading was canceled.
    """
    blockedReason: Optional["BlockedReason"]
    """
    The reason why loading was blocked, if any.
    """
    corsErrorStatus: Optional["CorsErrorStatus"]
    """
    The reason why loading was blocked by CORS, if any.
    """


class loadingFinished(BaseModel):
    """
    Fired when HTTP request has finished loading.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """
    encodedDataLength: Union[float, int]
    """
    Total number of bytes received for this request.
    """


class requestIntercepted(BaseModel):
    """
        Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
    mocked.
    Deprecated, use Fetch.requestPaused instead.
    """

    __domain__: str = PrivateAttr("Network")
    interceptionId: "InterceptionId"
    """
    Each request the page makes will have a unique id, however if any redirects are encountered
while processing that fetch, they will be reported with the same id as the original fetch.
Likewise if HTTP authentication is needed then the same fetch id will be used.
    """
    request: "Request"
    frameId: page.FrameId
    """
    The id of the frame that initiated the request.
    """
    resourceType: "ResourceType"
    """
    How the requested resource will be used.
    """
    isNavigationRequest: bool
    """
    Whether this is a navigation request, which can abort the navigation completely.
    """
    isDownload: Optional[bool]
    """
    Set if the request is a navigation that will result in a download.
Only present after response is received from the server (i.e. HeadersReceived stage).
    """
    redirectUrl: Optional[str]
    """
    Redirect location, only sent if a redirect was intercepted.
    """
    authChallenge: Optional["AuthChallenge"]
    """
    Details of the Authorization Challenge encountered. If this is set then
continueInterceptedRequest must contain an authChallengeResponse.
    """
    responseErrorReason: Optional["ErrorReason"]
    """
    Response error if intercepted at response stage or if redirect occurred while intercepting
request.
    """
    responseStatusCode: Optional[Union[float, int]]
    """
    Response code if intercepted at response stage or if redirect occurred while intercepting
request or auth retry occurred.
    """
    responseHeaders: Optional["Headers"]
    """
    Response headers if intercepted at the response stage or if redirect occurred while
intercepting request or auth retry occurred.
    """
    requestId: Optional["RequestId"]
    """
    If the intercepted request had a corresponding requestWillBeSent event fired for it, then
this requestId will be the same as the requestId present in the requestWillBeSent event.
    """


class requestServedFromCache(BaseModel):
    """
    Fired if request ended up loading from cache.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """


class requestWillBeSent(BaseModel):
    """
    Fired when page is about to send HTTP request.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    loaderId: "LoaderId"
    """
    Loader identifier. Empty string if the request is fetched from worker.
    """
    documentURL: str
    """
    URL of the document this request is loaded for.
    """
    request: "Request"
    """
    Request data.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """
    wallTime: "TimeSinceEpoch"
    """
    Timestamp.
    """
    initiator: "Initiator"
    """
    Request initiator.
    """
    redirectHasExtraInfo: bool
    """
    In the case that redirectResponse is populated, this flag indicates whether
requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be or were emitted
for the request which was just redirected.
    """
    redirectResponse: Optional["Response"]
    """
    Redirect response data.
    """
    type: Optional["ResourceType"]
    """
    Type of this resource.
    """
    frameId: Optional[page.FrameId]
    """
    Frame identifier.
    """
    hasUserGesture: Optional[bool]
    """
    Whether the request is initiated by a user gesture. Defaults to false.
    """


class resourceChangedPriority(BaseModel):
    """
    Fired when resource loading priority is changed
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    newPriority: "ResourcePriority"
    """
    New priority
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """


class signedExchangeReceived(BaseModel):
    """
    Fired when a signed exchange was received over the network
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    info: "SignedExchangeInfo"
    """
    Information about the signed exchange response.
    """


class responseReceived(BaseModel):
    """
    Fired when HTTP response is available.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    loaderId: "LoaderId"
    """
    Loader identifier. Empty string if the request is fetched from worker.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """
    type: "ResourceType"
    """
    Resource type.
    """
    response: "Response"
    """
    Response data.
    """
    hasExtraInfo: bool
    """
    Indicates whether requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be
or were emitted for this request.
    """
    frameId: Optional[page.FrameId]
    """
    Frame identifier.
    """


class webSocketClosed(BaseModel):
    """
    Fired when WebSocket is closed.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """


class webSocketCreated(BaseModel):
    """
    Fired upon WebSocket creation.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    url: str
    """
    WebSocket request URL.
    """
    initiator: Optional["Initiator"]
    """
    Request initiator.
    """


class webSocketFrameError(BaseModel):
    """
    Fired when WebSocket message error occurs.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """
    errorMessage: str
    """
    WebSocket error message.
    """


class webSocketFrameReceived(BaseModel):
    """
    Fired when WebSocket message is received.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """
    response: "WebSocketFrame"
    """
    WebSocket response data.
    """


class webSocketFrameSent(BaseModel):
    """
    Fired when WebSocket message is sent.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """
    response: "WebSocketFrame"
    """
    WebSocket response data.
    """


class webSocketHandshakeResponseReceived(BaseModel):
    """
    Fired when WebSocket handshake response becomes available.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """
    response: "WebSocketResponse"
    """
    WebSocket response data.
    """


class webSocketWillSendHandshakeRequest(BaseModel):
    """
    Fired when WebSocket is about to initiate handshake.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """
    wallTime: "TimeSinceEpoch"
    """
    UTC Timestamp.
    """
    request: "WebSocketRequest"
    """
    WebSocket request data.
    """


class webTransportCreated(BaseModel):
    """
    Fired upon WebTransport creation.
    """

    __domain__: str = PrivateAttr("Network")
    transportId: "RequestId"
    """
    WebTransport identifier.
    """
    url: str
    """
    WebTransport request URL.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """
    initiator: Optional["Initiator"]
    """
    Request initiator.
    """


class webTransportConnectionEstablished(BaseModel):
    """
    Fired when WebTransport handshake is finished.
    """

    __domain__: str = PrivateAttr("Network")
    transportId: "RequestId"
    """
    WebTransport identifier.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """


class webTransportClosed(BaseModel):
    """
    Fired when WebTransport is disposed.
    """

    __domain__: str = PrivateAttr("Network")
    transportId: "RequestId"
    """
    WebTransport identifier.
    """
    timestamp: "MonotonicTime"
    """
    Timestamp.
    """


class requestWillBeSentExtraInfo(BaseModel):
    """
        Fired when additional information about a requestWillBeSent event is available from the
    network stack. Not every requestWillBeSent event will have an additional
    requestWillBeSentExtraInfo fired for it, and there is no guarantee whether requestWillBeSent
    or requestWillBeSentExtraInfo will be fired first for the same request.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier. Used to match this information to an existing requestWillBeSent event.
    """
    associatedCookies: list
    """
    A list of cookies potentially associated to the requested URL. This includes both cookies sent with
the request and the ones not sent; the latter are distinguished by having blockedReasons field set.
    """
    headers: "Headers"
    """
    Raw request headers as they will be sent over the wire.
    """
    connectTiming: "ConnectTiming"
    """
    Connection timing information for the request.
    """
    clientSecurityState: Optional["ClientSecurityState"]
    """
    The client security state set for the request.
    """
    siteHasCookieInOtherPartition: Optional[bool]
    """
    Whether the site has partitioned cookies stored in a partition different than the current one.
    """


class responseReceivedExtraInfo(BaseModel):
    """
        Fired when additional information about a responseReceived event is available from the network
    stack. Not every responseReceived event will have an additional responseReceivedExtraInfo for
    it, and responseReceivedExtraInfo may be fired before or after responseReceived.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier. Used to match this information to another responseReceived event.
    """
    blockedCookies: list
    """
    A list of cookies which were not stored from the response along with the corresponding
reasons for blocking. The cookies here may not be valid due to syntax errors, which
are represented by the invalid cookie line string instead of a proper cookie.
    """
    headers: "Headers"
    """
    Raw response headers as they were received over the wire.
    """
    resourceIPAddressSpace: "IPAddressSpace"
    """
    The IP address space of the resource. The address space can only be determined once the transport
established the connection, so we can't send it in `requestWillBeSentExtraInfo`.
    """
    statusCode: Union[float, int]
    """
    The status code of the response. This is useful in cases the request failed and no responseReceived
event is triggered, which is the case for, e.g., CORS errors. This is also the correct status code
for cached requests, where the status in responseReceived is a 200 and this will be 304.
    """
    headersText: Optional[str]
    """
    Raw response header text as it was received over the wire. The raw text may not always be
available, such as in the case of HTTP/2 or QUIC.
    """
    cookiePartitionKey: Optional["CookiePartitionKey"]
    """
    The cookie partition key that will be used to store partitioned cookies set in this response.
Only sent when partitioned cookies are enabled.
    """
    cookiePartitionKeyOpaque: Optional[bool]
    """
    True if partitioned cookies are enabled, but the partition key is not serializable to string.
    """
    exemptedCookies: Optional[list]
    """
    A list of cookies which should have been blocked by 3PCD but are exempted and stored from
the response with the corresponding reason.
    """


class responseReceivedEarlyHints(BaseModel):
    """
        Fired when 103 Early Hints headers is received in addition to the common response.
    Not every responseReceived event will have an responseReceivedEarlyHints fired.
    Only one responseReceivedEarlyHints may be fired for eached responseReceived event.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier. Used to match this information to another responseReceived event.
    """
    headers: "Headers"
    """
    Raw response headers as they were received over the wire.
    """


class trustTokenOperationDone(BaseModel):
    """
        Fired exactly once for each Trust Token operation. Depending on
    the type of the operation and whether the operation succeeded or
    failed, the event is fired before the corresponding request was sent
    or after the response was received.
    """

    __domain__: str = PrivateAttr("Network")
    status: Literal[
        "Ok",
        "InvalidArgument",
        "MissingIssuerKeys",
        "FailedPrecondition",
        "ResourceExhausted",
        "AlreadyExists",
        "ResourceLimited",
        "Unauthorized",
        "BadResponse",
        "InternalError",
        "UnknownError",
        "FulfilledLocally",
    ]
    """
    Detailed success or error status of the operation.
'AlreadyExists' also signifies a successful operation, as the result
of the operation already exists und thus, the operation was abort
preemptively (e.g. a cache hit).
    """
    type: "TrustTokenOperationType"
    requestId: "RequestId"
    topLevelOrigin: Optional[str]
    """
    Top level origin. The context in which the operation was attempted.
    """
    issuerOrigin: Optional[str]
    """
    Origin of the issuer in case of a "Issuance" or "Redemption" operation.
    """
    issuedTokenCount: Optional[Union[float, int]]
    """
    The number of obtained Trust Tokens on a successful "Issuance" operation.
    """


class subresourceWebBundleMetadataReceived(BaseModel):
    """
        Fired once when parsing the .wbn file has succeeded.
    The event contains the information about the web bundle contents.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier. Used to match this information to another event.
    """
    urls: list
    """
    A list of URLs of resources in the subresource Web Bundle.
    """


class subresourceWebBundleMetadataError(BaseModel):
    """
    Fired once when parsing the .wbn file has failed.
    """

    __domain__: str = PrivateAttr("Network")
    requestId: "RequestId"
    """
    Request identifier. Used to match this information to another event.
    """
    errorMessage: str
    """
    Error message
    """


class subresourceWebBundleInnerResponseParsed(BaseModel):
    """
        Fired when handling requests for resources within a .wbn file.
    Note: this will only be fired for resources that are requested by the webpage.
    """

    __domain__: str = PrivateAttr("Network")
    innerRequestId: "RequestId"
    """
    Request identifier of the subresource request
    """
    innerRequestURL: str
    """
    URL of the subresource resource.
    """
    bundleRequestId: Optional["RequestId"]
    """
    Bundle request identifier. Used to match this information to another event.
This made be absent in case when the instrumentation was enabled only
after webbundle was parsed.
    """


class subresourceWebBundleInnerResponseError(BaseModel):
    """
    Fired when request for resources within a .wbn file failed.
    """

    __domain__: str = PrivateAttr("Network")
    innerRequestId: "RequestId"
    """
    Request identifier of the subresource request
    """
    innerRequestURL: str
    """
    URL of the subresource resource.
    """
    errorMessage: str
    """
    Error message
    """
    bundleRequestId: Optional["RequestId"]
    """
    Bundle request identifier. Used to match this information to another event.
This made be absent in case when the instrumentation was enabled only
after webbundle was parsed.
    """


class reportingApiReportAdded(BaseModel):
    """
        Is sent whenever a new report is added.
    And after 'enableReportingApi' for all existing reports.
    """

    __domain__: str = PrivateAttr("Network")
    report: "ReportingApiReport"


class reportingApiReportUpdated(BaseModel):
    __domain__: str = PrivateAttr("Network")
    report: "ReportingApiReport"


class reportingApiEndpointsChangedForOrigin(BaseModel):
    __domain__: str = PrivateAttr("Network")
    origin: str
    """
    Origin of the document(s) which configured the endpoints.
    """
    endpoints: list
